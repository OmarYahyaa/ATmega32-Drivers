
ATmega32_COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000832c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  0000832c  000083c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800188  00800188  000084e8  2**0
                  ALLOC
  3 .stab         000075c0  00000000  00000000  000084e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000245b  00000000  00000000  0000faa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00011f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000120a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00012295  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000146a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00015a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00016bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00016dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000170b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00017a20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__vector_1>
       8:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__vector_2>
       c:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 27 0f 	jmp	0x1e4e	; 0x1e4e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f3 e8       	ldi	r31, 0x83	; 131
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 39       	cpi	r26, 0x97	; 151
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 dc 40 	call	0x81b8	; 0x81b8 <main>
      8a:	0c 94 94 41 	jmp	0x8328	; 0x8328 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5d 41 	jmp	0x82ba	; 0x82ba <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 79 41 	jmp	0x82f2	; 0x82f2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 69 41 	jmp	0x82d2	; 0x82d2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 85 41 	jmp	0x830a	; 0x830a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 69 41 	jmp	0x82d2	; 0x82d2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 85 41 	jmp	0x830a	; 0x830a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5d 41 	jmp	0x82ba	; 0x82ba <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 79 41 	jmp	0x82f2	; 0x82f2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 65 41 	jmp	0x82ca	; 0x82ca <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 81 41 	jmp	0x8302	; 0x8302 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 69 41 	jmp	0x82d2	; 0x82d2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 85 41 	jmp	0x830a	; 0x830a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 69 41 	jmp	0x82d2	; 0x82d2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 85 41 	jmp	0x830a	; 0x830a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 69 41 	jmp	0x82d2	; 0x82d2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 85 41 	jmp	0x830a	; 0x830a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 6d 41 	jmp	0x82da	; 0x82da <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 89 41 	jmp	0x8312	; 0x8312 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 65 41 	jmp	0x82ca	; 0x82ca <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 81 41 	jmp	0x8302	; 0x8302 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <MGIE_enEnable>:
#include <MGIE_register.h>
#include <MGIE_private.h>
#include <MGIE_config.h>
#include <MGIE_Interface.h>

ErrorState_t MGIE_enEnable(void) {
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(REG_SREG, SREG_I);
     e36:	af e5       	ldi	r26, 0x5F	; 95
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ef e5       	ldi	r30, 0x5F	; 95
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 68       	ori	r24, 0x80	; 128
     e42:	8c 93       	st	X, r24
	//asm("SEI"); // Assembly
	return SUCCESS;
     e44:	80 e0       	ldi	r24, 0x00	; 0
}
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <MGIE_enDisable>:

ErrorState_t MGIE_enDisable(void) {
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(REG_SREG, SREG_I);
     e54:	af e5       	ldi	r26, 0x5F	; 95
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	ef e5       	ldi	r30, 0x5F	; 95
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	8f 77       	andi	r24, 0x7F	; 127
     e60:	8c 93       	st	X, r24
	//asm("CLI"); // Assembly
	return SUCCESS;
     e62:	80 e0       	ldi	r24, 0x00	; 0
}
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <MEXTI_enEnable>:
#include <MDIO_interface.h>

static void (*MEXTI_voidISR[3])(void) = {NULL,NULL,NULL };

/******************************** Post-Build *********************************/
ErrorState_t MEXTI_enEnable(InterruptID_t copy_enINT, SenseControl_t copy_enSC) {
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <MEXTI_enEnable+0x6>
     e70:	00 d0       	rcall	.+0      	; 0xe72 <MEXTI_enEnable+0x8>
     e72:	0f 92       	push	r0
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	8a 83       	std	Y+2, r24	; 0x02
     e7a:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_enState = SUCCESS;
     e7c:	19 82       	std	Y+1, r1	; 0x01
	/** Adjust Sense Control **/
	switch (copy_enINT) {
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	3d 83       	std	Y+5, r19	; 0x05
     e86:	2c 83       	std	Y+4, r18	; 0x04
     e88:	8c 81       	ldd	r24, Y+4	; 0x04
     e8a:	9d 81       	ldd	r25, Y+5	; 0x05
     e8c:	86 30       	cpi	r24, 0x06	; 6
     e8e:	91 05       	cpc	r25, r1
     e90:	59 f0       	breq	.+22     	; 0xea8 <MEXTI_enEnable+0x3e>
     e92:	2c 81       	ldd	r18, Y+4	; 0x04
     e94:	3d 81       	ldd	r19, Y+5	; 0x05
     e96:	27 30       	cpi	r18, 0x07	; 7
     e98:	31 05       	cpc	r19, r1
     e9a:	b1 f0       	breq	.+44     	; 0xec8 <MEXTI_enEnable+0x5e>
     e9c:	8c 81       	ldd	r24, Y+4	; 0x04
     e9e:	9d 81       	ldd	r25, Y+5	; 0x05
     ea0:	85 30       	cpi	r24, 0x05	; 5
     ea2:	91 05       	cpc	r25, r1
     ea4:	41 f1       	breq	.+80     	; 0xef6 <MEXTI_enEnable+0x8c>
     ea6:	45 c0       	rjmp	.+138    	; 0xf32 <MEXTI_enEnable+0xc8>
	case INT0:
		// 1- Apply Mask
		REG_MCUCR &= INT0_SC_MASK;
     ea8:	a5 e5       	ldi	r26, 0x55	; 85
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e5 e5       	ldi	r30, 0x55	; 85
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	8c 7f       	andi	r24, 0xFC	; 252
     eb4:	8c 93       	st	X, r24
		// 2- Set Value
		REG_MCUCR |= copy_enSC;
     eb6:	a5 e5       	ldi	r26, 0x55	; 85
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e5 e5       	ldi	r30, 0x55	; 85
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	90 81       	ld	r25, Z
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	89 2b       	or	r24, r25
     ec4:	8c 93       	st	X, r24
     ec6:	37 c0       	rjmp	.+110    	; 0xf36 <MEXTI_enEnable+0xcc>
		break;
	case INT1:
		REG_MCUCR &= INT1_SC_MASK;
     ec8:	a5 e5       	ldi	r26, 0x55	; 85
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e5 e5       	ldi	r30, 0x55	; 85
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	83 7f       	andi	r24, 0xF3	; 243
     ed4:	8c 93       	st	X, r24
		REG_MCUCR |= copy_enSC << INT1_SC_SHIFT;
     ed6:	a5 e5       	ldi	r26, 0x55	; 85
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e5 e5       	ldi	r30, 0x55	; 85
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	28 2f       	mov	r18, r24
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	88 2f       	mov	r24, r24
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	82 2b       	or	r24, r18
     ef2:	8c 93       	st	X, r24
     ef4:	20 c0       	rjmp	.+64     	; 0xf36 <MEXTI_enEnable+0xcc>
		break;
	case INT2:
		CLR_BIT(REG_MCUCSR, MCUCSR_ISC2);
     ef6:	a4 e5       	ldi	r26, 0x54	; 84
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e4 e5       	ldi	r30, 0x54	; 84
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	8f 7b       	andi	r24, 0xBF	; 191
     f02:	8c 93       	st	X, r24
		REG_MCUCSR |= GET_BIT(copy_enSC,0) << MCUCSR_ISC2;
     f04:	a4 e5       	ldi	r26, 0x54	; 84
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e4 e5       	ldi	r30, 0x54	; 84
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	28 2f       	mov	r18, r24
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	88 2f       	mov	r24, r24
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	81 70       	andi	r24, 0x01	; 1
     f18:	90 70       	andi	r25, 0x00	; 0
     f1a:	00 24       	eor	r0, r0
     f1c:	96 95       	lsr	r25
     f1e:	87 95       	ror	r24
     f20:	07 94       	ror	r0
     f22:	96 95       	lsr	r25
     f24:	87 95       	ror	r24
     f26:	07 94       	ror	r0
     f28:	98 2f       	mov	r25, r24
     f2a:	80 2d       	mov	r24, r0
     f2c:	82 2b       	or	r24, r18
     f2e:	8c 93       	st	X, r24
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <MEXTI_enEnable+0xcc>
		break;
	default:
		Local_enState = OUT_OF_RANGE;
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/** Enable SIE **/
	SET_BIT(REG_GICR, copy_enINT);
     f36:	ab e5       	ldi	r26, 0x5B	; 91
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	eb e5       	ldi	r30, 0x5B	; 91
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <MEXTI_enEnable+0xea>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <MEXTI_enEnable+0xe6>
     f58:	84 2b       	or	r24, r20
     f5a:	8c 93       	st	X, r24
	return Local_enState;
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <MEXTI_enDisable>:

ErrorState_t MEXTI_enDisable(InterruptID_t copy_enINT) {
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	0f 92       	push	r0
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(REG_GICR, copy_enINT);
     f7a:	ab e5       	ldi	r26, 0x5B	; 91
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	eb e5       	ldi	r30, 0x5B	; 91
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <MEXTI_enDisable+0x2a>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <MEXTI_enDisable+0x26>
     f9c:	80 95       	com	r24
     f9e:	84 23       	and	r24, r20
     fa0:	8c 93       	st	X, r24
	return SUCCESS;
     fa2:	80 e0       	ldi	r24, 0x00	; 0
}
     fa4:	0f 90       	pop	r0
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <MEXTI_enSetCallBack>:

ErrorState_t MEXTI_enSetCallBack(InterruptID_t copy_enINT, void (*ptrFn)(void)) {
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <MEXTI_enSetCallBack+0x6>
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <MEXTI_enSetCallBack+0x8>
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <MEXTI_enSetCallBack+0xa>
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	8a 83       	std	Y+2, r24	; 0x02
     fbc:	7c 83       	std	Y+4, r23	; 0x04
     fbe:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_enState = SUCCESS;
     fc0:	19 82       	std	Y+1, r1	; 0x01
	if (ptrFn == NULL) {
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	9c 81       	ldd	r25, Y+4	; 0x04
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	19 f4       	brne	.+6      	; 0xfd0 <MEXTI_enSetCallBack+0x24>
		Local_enState = NULL_POINTER;
     fca:	82 e0       	ldi	r24, 0x02	; 2
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	2c c0       	rjmp	.+88     	; 0x1028 <MEXTI_enSetCallBack+0x7c>
	} else {
		switch (copy_enINT) {
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	3e 83       	std	Y+6, r19	; 0x06
     fd8:	2d 83       	std	Y+5, r18	; 0x05
     fda:	8d 81       	ldd	r24, Y+5	; 0x05
     fdc:	9e 81       	ldd	r25, Y+6	; 0x06
     fde:	86 30       	cpi	r24, 0x06	; 6
     fe0:	91 05       	cpc	r25, r1
     fe2:	59 f0       	breq	.+22     	; 0xffa <MEXTI_enSetCallBack+0x4e>
     fe4:	2d 81       	ldd	r18, Y+5	; 0x05
     fe6:	3e 81       	ldd	r19, Y+6	; 0x06
     fe8:	27 30       	cpi	r18, 0x07	; 7
     fea:	31 05       	cpc	r19, r1
     fec:	69 f0       	breq	.+26     	; 0x1008 <MEXTI_enSetCallBack+0x5c>
     fee:	8d 81       	ldd	r24, Y+5	; 0x05
     ff0:	9e 81       	ldd	r25, Y+6	; 0x06
     ff2:	85 30       	cpi	r24, 0x05	; 5
     ff4:	91 05       	cpc	r25, r1
     ff6:	79 f0       	breq	.+30     	; 0x1016 <MEXTI_enSetCallBack+0x6a>
     ff8:	15 c0       	rjmp	.+42     	; 0x1024 <MEXTI_enSetCallBack+0x78>
		case INT0:
			MEXTI_voidISR[0] = ptrFn;
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	9c 81       	ldd	r25, Y+4	; 0x04
     ffe:	90 93 89 01 	sts	0x0189, r25
    1002:	80 93 88 01 	sts	0x0188, r24
    1006:	10 c0       	rjmp	.+32     	; 0x1028 <MEXTI_enSetCallBack+0x7c>
			break;
		case INT1:
			MEXTI_voidISR[1] = ptrFn;
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	9c 81       	ldd	r25, Y+4	; 0x04
    100c:	90 93 8b 01 	sts	0x018B, r25
    1010:	80 93 8a 01 	sts	0x018A, r24
    1014:	09 c0       	rjmp	.+18     	; 0x1028 <MEXTI_enSetCallBack+0x7c>
			break;
		case INT2:
			MEXTI_voidISR[2] = ptrFn;
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	9c 81       	ldd	r25, Y+4	; 0x04
    101a:	90 93 8d 01 	sts	0x018D, r25
    101e:	80 93 8c 01 	sts	0x018C, r24
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <MEXTI_enSetCallBack+0x7c>
			break;
		default:
			Local_enState = OUT_OF_RANGE;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Local_enState;
    1028:	89 81       	ldd	r24, Y+1	; 0x01
}
    102a:	26 96       	adiw	r28, 0x06	; 6
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <MEXTI_voidInt0Enable>:
/******************************** Post-Build *********************************/

/********************************* Pre-Build *********************************/
void MEXTI_voidInt0Enable(void) {
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(REG_MCUCR, MCUCR_ISC00);
#elif(INT0_SC == SC_FALL_EDGE)
	SET_BIT(REG_MCUCR, MCUCR_ISC01);
	CLR_BIT(REG_MCUCR, MCUCR_ISC00);
#elif(INT0_SC == SC_RISE_EDGE)
	SET_BIT(REG_MCUCR, MCUCR_ISC01);
    1044:	a5 e5       	ldi	r26, 0x55	; 85
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e5 e5       	ldi	r30, 0x55	; 85
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	82 60       	ori	r24, 0x02	; 2
    1050:	8c 93       	st	X, r24
	SET_BIT(REG_MCUCR, MCUCR_ISC00);
    1052:	a5 e5       	ldi	r26, 0x55	; 85
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e5 e5       	ldi	r30, 0x55	; 85
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	81 60       	ori	r24, 0x01	; 1
    105e:	8c 93       	st	X, r24
#else
#error("Wrong Sense Control Configuration for INT0")
#endif
	/** Enable SIE **/
	SET_BIT(REG_GICR, GICR_INT0);
    1060:	ab e5       	ldi	r26, 0x5B	; 91
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	eb e5       	ldi	r30, 0x5B	; 91
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	80 64       	ori	r24, 0x40	; 64
    106c:	8c 93       	st	X, r24
}
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <MEXTI_voidInt1Enable>:

void MEXTI_voidInt1Enable(void) {
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(REG_MCUCR, MCUCR_ISC10);
#elif(INT1_SC == SC_FALL_EDGE)
	SET_BIT(REG_MCUCR, MCUCR_ISC11);
	CLR_BIT(REG_MCUCR, MCUCR_ISC10);
#elif(INT1_SC == SC_RISE_EDGE)
	SET_BIT(REG_MCUCR, MCUCR_ISC11);
    107c:	a5 e5       	ldi	r26, 0x55	; 85
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e5 e5       	ldi	r30, 0x55	; 85
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	88 60       	ori	r24, 0x08	; 8
    1088:	8c 93       	st	X, r24
	SET_BIT(REG_MCUCR, MCUCR_ISC10);
    108a:	a5 e5       	ldi	r26, 0x55	; 85
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e5 e5       	ldi	r30, 0x55	; 85
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	84 60       	ori	r24, 0x04	; 4
    1096:	8c 93       	st	X, r24
#else
#error("Wrong Sense Control Configuration for INT1")
#endif
	/** Enable SIE **/
	SET_BIT(REG_GICR, GICR_INT1);
    1098:	ab e5       	ldi	r26, 0x5B	; 91
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	eb e5       	ldi	r30, 0x5B	; 91
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	80 68       	ori	r24, 0x80	; 128
    10a4:	8c 93       	st	X, r24
}
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <MEXTI_voidInt2Enable>:

void MEXTI_voidInt2Enable(void) {
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
	/** Adjust Sense Control **/
#if(INT2_SC == SC_FALL_EDGE)
	CLR_BIT(REG_MCUCSR, MCUCSR_ISC2);
#elif(INT2_SC == SC_RISE_EDGE)
	SET_BIT(REG_MCUCSR, MCUCSR_ISC2);
    10b4:	a4 e5       	ldi	r26, 0x54	; 84
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e4 e5       	ldi	r30, 0x54	; 84
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	80 64       	ori	r24, 0x40	; 64
    10c0:	8c 93       	st	X, r24
#else
#error("Wrong Sense Control Configuration for INT2")
#endif
	/** Enable SIE **/
	SET_BIT(REG_GICR, GICR_INT2);
    10c2:	ab e5       	ldi	r26, 0x5B	; 91
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	eb e5       	ldi	r30, 0x5B	; 91
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	80 62       	ori	r24, 0x20	; 32
    10ce:	8c 93       	st	X, r24
}
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <__vector_1>:
/********************************* Pre-Build *********************************/

/************************************ ISR ************************************/
ISR(INT0_vect) {
    10d6:	1f 92       	push	r1
    10d8:	0f 92       	push	r0
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	0f 92       	push	r0
    10de:	11 24       	eor	r1, r1
    10e0:	2f 93       	push	r18
    10e2:	3f 93       	push	r19
    10e4:	4f 93       	push	r20
    10e6:	5f 93       	push	r21
    10e8:	6f 93       	push	r22
    10ea:	7f 93       	push	r23
    10ec:	8f 93       	push	r24
    10ee:	9f 93       	push	r25
    10f0:	af 93       	push	r26
    10f2:	bf 93       	push	r27
    10f4:	ef 93       	push	r30
    10f6:	ff 93       	push	r31
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
	if (MEXTI_voidISR[0] != NULL) {
    1100:	80 91 88 01 	lds	r24, 0x0188
    1104:	90 91 89 01 	lds	r25, 0x0189
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	29 f0       	breq	.+10     	; 0x1116 <__vector_1+0x40>
		MEXTI_voidISR[0]();
    110c:	e0 91 88 01 	lds	r30, 0x0188
    1110:	f0 91 89 01 	lds	r31, 0x0189
    1114:	09 95       	icall
	}
}
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	ff 91       	pop	r31
    111c:	ef 91       	pop	r30
    111e:	bf 91       	pop	r27
    1120:	af 91       	pop	r26
    1122:	9f 91       	pop	r25
    1124:	8f 91       	pop	r24
    1126:	7f 91       	pop	r23
    1128:	6f 91       	pop	r22
    112a:	5f 91       	pop	r21
    112c:	4f 91       	pop	r20
    112e:	3f 91       	pop	r19
    1130:	2f 91       	pop	r18
    1132:	0f 90       	pop	r0
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	0f 90       	pop	r0
    1138:	1f 90       	pop	r1
    113a:	18 95       	reti

0000113c <__vector_2>:

ISR(INT1_vect) {
    113c:	1f 92       	push	r1
    113e:	0f 92       	push	r0
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	0f 92       	push	r0
    1144:	11 24       	eor	r1, r1
    1146:	2f 93       	push	r18
    1148:	3f 93       	push	r19
    114a:	4f 93       	push	r20
    114c:	5f 93       	push	r21
    114e:	6f 93       	push	r22
    1150:	7f 93       	push	r23
    1152:	8f 93       	push	r24
    1154:	9f 93       	push	r25
    1156:	af 93       	push	r26
    1158:	bf 93       	push	r27
    115a:	ef 93       	push	r30
    115c:	ff 93       	push	r31
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
	if (MEXTI_voidISR[1] != NULL) {
    1166:	80 91 8a 01 	lds	r24, 0x018A
    116a:	90 91 8b 01 	lds	r25, 0x018B
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	29 f0       	breq	.+10     	; 0x117c <__vector_2+0x40>
		MEXTI_voidISR[1]();
    1172:	e0 91 8a 01 	lds	r30, 0x018A
    1176:	f0 91 8b 01 	lds	r31, 0x018B
    117a:	09 95       	icall
	}
}
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	ff 91       	pop	r31
    1182:	ef 91       	pop	r30
    1184:	bf 91       	pop	r27
    1186:	af 91       	pop	r26
    1188:	9f 91       	pop	r25
    118a:	8f 91       	pop	r24
    118c:	7f 91       	pop	r23
    118e:	6f 91       	pop	r22
    1190:	5f 91       	pop	r21
    1192:	4f 91       	pop	r20
    1194:	3f 91       	pop	r19
    1196:	2f 91       	pop	r18
    1198:	0f 90       	pop	r0
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	0f 90       	pop	r0
    119e:	1f 90       	pop	r1
    11a0:	18 95       	reti

000011a2 <__vector_3>:

ISR(INT2_vect) {
    11a2:	1f 92       	push	r1
    11a4:	0f 92       	push	r0
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	0f 92       	push	r0
    11aa:	11 24       	eor	r1, r1
    11ac:	2f 93       	push	r18
    11ae:	3f 93       	push	r19
    11b0:	4f 93       	push	r20
    11b2:	5f 93       	push	r21
    11b4:	6f 93       	push	r22
    11b6:	7f 93       	push	r23
    11b8:	8f 93       	push	r24
    11ba:	9f 93       	push	r25
    11bc:	af 93       	push	r26
    11be:	bf 93       	push	r27
    11c0:	ef 93       	push	r30
    11c2:	ff 93       	push	r31
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
	if (MEXTI_voidISR[2] != NULL) {
    11cc:	80 91 8c 01 	lds	r24, 0x018C
    11d0:	90 91 8d 01 	lds	r25, 0x018D
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	29 f0       	breq	.+10     	; 0x11e2 <__vector_3+0x40>
		MEXTI_voidISR[2]();
    11d8:	e0 91 8c 01 	lds	r30, 0x018C
    11dc:	f0 91 8d 01 	lds	r31, 0x018D
    11e0:	09 95       	icall
	}
}
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	ff 91       	pop	r31
    11e8:	ef 91       	pop	r30
    11ea:	bf 91       	pop	r27
    11ec:	af 91       	pop	r26
    11ee:	9f 91       	pop	r25
    11f0:	8f 91       	pop	r24
    11f2:	7f 91       	pop	r23
    11f4:	6f 91       	pop	r22
    11f6:	5f 91       	pop	r21
    11f8:	4f 91       	pop	r20
    11fa:	3f 91       	pop	r19
    11fc:	2f 91       	pop	r18
    11fe:	0f 90       	pop	r0
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	0f 90       	pop	r0
    1204:	1f 90       	pop	r1
    1206:	18 95       	reti

00001208 <MDIO_enSetPinDirection>:
#include <MDIO_register.h>
#include <MDIO_private.h>
#include <MDIO_config.h>
#include <MDIO_interface.h>

ErrorState_t MDIO_enSetPinDirection(Pin_t copy_enPin,Direction_t copy_enDirection) {
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	27 97       	sbiw	r28, 0x07	; 7
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	8c 83       	std	Y+4, r24	; 0x04
    121e:	6d 83       	std	Y+5, r22	; 0x05
	ErrorState_t Local_enState = SUCCESS;
    1220:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8Port = copy_enPin / 10;
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	9a e0       	ldi	r25, 0x0A	; 10
    1226:	69 2f       	mov	r22, r25
    1228:	0e 94 00 41 	call	0x8200	; 0x8200 <__udivmodqi4>
    122c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Pin  = copy_enPin % 10;
    122e:	8c 81       	ldd	r24, Y+4	; 0x04
    1230:	9a e0       	ldi	r25, 0x0A	; 10
    1232:	69 2f       	mov	r22, r25
    1234:	0e 94 00 41 	call	0x8200	; 0x8200 <__udivmodqi4>
    1238:	89 2f       	mov	r24, r25
    123a:	89 83       	std	Y+1, r24	; 0x01
	switch (Local_u8Port) {
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	3f 83       	std	Y+7, r19	; 0x07
    1244:	2e 83       	std	Y+6, r18	; 0x06
    1246:	8e 81       	ldd	r24, Y+6	; 0x06
    1248:	9f 81       	ldd	r25, Y+7	; 0x07
    124a:	82 30       	cpi	r24, 0x02	; 2
    124c:	91 05       	cpc	r25, r1
    124e:	09 f4       	brne	.+2      	; 0x1252 <MDIO_enSetPinDirection+0x4a>
    1250:	4a c0       	rjmp	.+148    	; 0x12e6 <MDIO_enSetPinDirection+0xde>
    1252:	2e 81       	ldd	r18, Y+6	; 0x06
    1254:	3f 81       	ldd	r19, Y+7	; 0x07
    1256:	23 30       	cpi	r18, 0x03	; 3
    1258:	31 05       	cpc	r19, r1
    125a:	34 f4       	brge	.+12     	; 0x1268 <MDIO_enSetPinDirection+0x60>
    125c:	8e 81       	ldd	r24, Y+6	; 0x06
    125e:	9f 81       	ldd	r25, Y+7	; 0x07
    1260:	81 30       	cpi	r24, 0x01	; 1
    1262:	91 05       	cpc	r25, r1
    1264:	71 f0       	breq	.+28     	; 0x1282 <MDIO_enSetPinDirection+0x7a>
    1266:	d5 c0       	rjmp	.+426    	; 0x1412 <MDIO_enSetPinDirection+0x20a>
    1268:	2e 81       	ldd	r18, Y+6	; 0x06
    126a:	3f 81       	ldd	r19, Y+7	; 0x07
    126c:	23 30       	cpi	r18, 0x03	; 3
    126e:	31 05       	cpc	r19, r1
    1270:	09 f4       	brne	.+2      	; 0x1274 <MDIO_enSetPinDirection+0x6c>
    1272:	6b c0       	rjmp	.+214    	; 0x134a <MDIO_enSetPinDirection+0x142>
    1274:	8e 81       	ldd	r24, Y+6	; 0x06
    1276:	9f 81       	ldd	r25, Y+7	; 0x07
    1278:	84 30       	cpi	r24, 0x04	; 4
    127a:	91 05       	cpc	r25, r1
    127c:	09 f4       	brne	.+2      	; 0x1280 <MDIO_enSetPinDirection+0x78>
    127e:	97 c0       	rjmp	.+302    	; 0x13ae <MDIO_enSetPinDirection+0x1a6>
    1280:	c8 c0       	rjmp	.+400    	; 0x1412 <MDIO_enSetPinDirection+0x20a>
	case PORTA:
		if (OUTPUT == copy_enDirection) {
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	a1 f4       	brne	.+40     	; 0x12b0 <MDIO_enSetPinDirection+0xa8>
			SET_BIT(REG_DDRA, Local_u8Pin);
    1288:	aa e3       	ldi	r26, 0x3A	; 58
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	ea e3       	ldi	r30, 0x3A	; 58
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <MDIO_enSetPinDirection+0x9e>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <MDIO_enSetPinDirection+0x9a>
    12aa:	84 2b       	or	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	b3 c0       	rjmp	.+358    	; 0x1416 <MDIO_enSetPinDirection+0x20e>
		} else if (INPUT == copy_enDirection) {
    12b0:	8d 81       	ldd	r24, Y+5	; 0x05
    12b2:	88 23       	and	r24, r24
    12b4:	a9 f4       	brne	.+42     	; 0x12e0 <MDIO_enSetPinDirection+0xd8>
			CLR_BIT(REG_DDRA, Local_u8Pin);
    12b6:	aa e3       	ldi	r26, 0x3A	; 58
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	ea e3       	ldi	r30, 0x3A	; 58
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	48 2f       	mov	r20, r24
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 2e       	mov	r0, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <MDIO_enSetPinDirection+0xcc>
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	0a 94       	dec	r0
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <MDIO_enSetPinDirection+0xc8>
    12d8:	80 95       	com	r24
    12da:	84 23       	and	r24, r20
    12dc:	8c 93       	st	X, r24
    12de:	9b c0       	rjmp	.+310    	; 0x1416 <MDIO_enSetPinDirection+0x20e>
		} else {
			Local_enState = OUT_OF_RANGE;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	8b 83       	std	Y+3, r24	; 0x03
    12e4:	98 c0       	rjmp	.+304    	; 0x1416 <MDIO_enSetPinDirection+0x20e>
		}
		break;
	case PORTB:
		if (OUTPUT == copy_enDirection) {
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
    12e8:	81 30       	cpi	r24, 0x01	; 1
    12ea:	a1 f4       	brne	.+40     	; 0x1314 <MDIO_enSetPinDirection+0x10c>
			SET_BIT(REG_DDRB, Local_u8Pin);
    12ec:	a7 e3       	ldi	r26, 0x37	; 55
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e7 e3       	ldi	r30, 0x37	; 55
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	48 2f       	mov	r20, r24
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 2e       	mov	r0, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <MDIO_enSetPinDirection+0x102>
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	0a 94       	dec	r0
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <MDIO_enSetPinDirection+0xfe>
    130e:	84 2b       	or	r24, r20
    1310:	8c 93       	st	X, r24
    1312:	81 c0       	rjmp	.+258    	; 0x1416 <MDIO_enSetPinDirection+0x20e>
		} else if (INPUT == copy_enDirection) {
    1314:	8d 81       	ldd	r24, Y+5	; 0x05
    1316:	88 23       	and	r24, r24
    1318:	a9 f4       	brne	.+42     	; 0x1344 <MDIO_enSetPinDirection+0x13c>
			CLR_BIT(REG_DDRB, Local_u8Pin);
    131a:	a7 e3       	ldi	r26, 0x37	; 55
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e7 e3       	ldi	r30, 0x37	; 55
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <MDIO_enSetPinDirection+0x130>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <MDIO_enSetPinDirection+0x12c>
    133c:	80 95       	com	r24
    133e:	84 23       	and	r24, r20
    1340:	8c 93       	st	X, r24
    1342:	69 c0       	rjmp	.+210    	; 0x1416 <MDIO_enSetPinDirection+0x20e>
		} else {
			Local_enState = OUT_OF_RANGE;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	8b 83       	std	Y+3, r24	; 0x03
    1348:	66 c0       	rjmp	.+204    	; 0x1416 <MDIO_enSetPinDirection+0x20e>
		}
		break;
	case PORTC:
		if (OUTPUT == copy_enDirection) {
    134a:	8d 81       	ldd	r24, Y+5	; 0x05
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	a1 f4       	brne	.+40     	; 0x1378 <MDIO_enSetPinDirection+0x170>
			SET_BIT(REG_DDRC, Local_u8Pin);
    1350:	a4 e3       	ldi	r26, 0x34	; 52
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e4 e3       	ldi	r30, 0x34	; 52
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	48 2f       	mov	r20, r24
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 2e       	mov	r0, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <MDIO_enSetPinDirection+0x166>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <MDIO_enSetPinDirection+0x162>
    1372:	84 2b       	or	r24, r20
    1374:	8c 93       	st	X, r24
    1376:	4f c0       	rjmp	.+158    	; 0x1416 <MDIO_enSetPinDirection+0x20e>
		} else if (INPUT == copy_enDirection) {
    1378:	8d 81       	ldd	r24, Y+5	; 0x05
    137a:	88 23       	and	r24, r24
    137c:	a9 f4       	brne	.+42     	; 0x13a8 <MDIO_enSetPinDirection+0x1a0>
			CLR_BIT(REG_DDRC, Local_u8Pin);
    137e:	a4 e3       	ldi	r26, 0x34	; 52
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e4 e3       	ldi	r30, 0x34	; 52
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <MDIO_enSetPinDirection+0x194>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <MDIO_enSetPinDirection+0x190>
    13a0:	80 95       	com	r24
    13a2:	84 23       	and	r24, r20
    13a4:	8c 93       	st	X, r24
    13a6:	37 c0       	rjmp	.+110    	; 0x1416 <MDIO_enSetPinDirection+0x20e>
		} else {
			Local_enState = OUT_OF_RANGE;
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	8b 83       	std	Y+3, r24	; 0x03
    13ac:	34 c0       	rjmp	.+104    	; 0x1416 <MDIO_enSetPinDirection+0x20e>
		}
		break;
	case PORTD:
		if (OUTPUT == copy_enDirection) {
    13ae:	8d 81       	ldd	r24, Y+5	; 0x05
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	a1 f4       	brne	.+40     	; 0x13dc <MDIO_enSetPinDirection+0x1d4>
			SET_BIT(REG_DDRD, Local_u8Pin);
    13b4:	a1 e3       	ldi	r26, 0x31	; 49
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e1 e3       	ldi	r30, 0x31	; 49
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	48 2f       	mov	r20, r24
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 2e       	mov	r0, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <MDIO_enSetPinDirection+0x1ca>
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	0a 94       	dec	r0
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <MDIO_enSetPinDirection+0x1c6>
    13d6:	84 2b       	or	r24, r20
    13d8:	8c 93       	st	X, r24
    13da:	1d c0       	rjmp	.+58     	; 0x1416 <MDIO_enSetPinDirection+0x20e>
		} else if (INPUT == copy_enDirection) {
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	88 23       	and	r24, r24
    13e0:	a9 f4       	brne	.+42     	; 0x140c <MDIO_enSetPinDirection+0x204>
			CLR_BIT(REG_DDRD, Local_u8Pin);
    13e2:	a1 e3       	ldi	r26, 0x31	; 49
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e1 e3       	ldi	r30, 0x31	; 49
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <MDIO_enSetPinDirection+0x1f8>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <MDIO_enSetPinDirection+0x1f4>
    1404:	80 95       	com	r24
    1406:	84 23       	and	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	05 c0       	rjmp	.+10     	; 0x1416 <MDIO_enSetPinDirection+0x20e>
		} else {
			Local_enState = OUT_OF_RANGE;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	8b 83       	std	Y+3, r24	; 0x03
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <MDIO_enSetPinDirection+0x20e>
		}
		break;
	default:
		Local_enState = OUT_OF_RANGE;
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	8b 83       	std	Y+3, r24	; 0x03
		break;
	} // switch
	return Local_enState;
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1418:	27 96       	adiw	r28, 0x07	; 7
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <MDIO_enSetPortDirection>:

ErrorState_t MDIO_enSetPortDirection(Port_t copy_enPort, u8 copy_u8Value) {
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	00 d0       	rcall	.+0      	; 0x1430 <MDIO_enSetPortDirection+0x6>
    1430:	00 d0       	rcall	.+0      	; 0x1432 <MDIO_enSetPortDirection+0x8>
    1432:	0f 92       	push	r0
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	8a 83       	std	Y+2, r24	; 0x02
    143a:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_enState = SUCCESS;
    143c:	19 82       	std	Y+1, r1	; 0x01
	if ((0 > copy_u8Value) || (255 < copy_u8Value)) {
		Local_enState = OUT_OF_RANGE;
	} else {
		switch (copy_enPort) {
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	3d 83       	std	Y+5, r19	; 0x05
    1446:	2c 83       	std	Y+4, r18	; 0x04
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	9d 81       	ldd	r25, Y+5	; 0x05
    144c:	82 30       	cpi	r24, 0x02	; 2
    144e:	91 05       	cpc	r25, r1
    1450:	d9 f0       	breq	.+54     	; 0x1488 <MDIO_enSetPortDirection+0x5e>
    1452:	2c 81       	ldd	r18, Y+4	; 0x04
    1454:	3d 81       	ldd	r19, Y+5	; 0x05
    1456:	23 30       	cpi	r18, 0x03	; 3
    1458:	31 05       	cpc	r19, r1
    145a:	34 f4       	brge	.+12     	; 0x1468 <MDIO_enSetPortDirection+0x3e>
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
    145e:	9d 81       	ldd	r25, Y+5	; 0x05
    1460:	81 30       	cpi	r24, 0x01	; 1
    1462:	91 05       	cpc	r25, r1
    1464:	61 f0       	breq	.+24     	; 0x147e <MDIO_enSetPortDirection+0x54>
    1466:	1f c0       	rjmp	.+62     	; 0x14a6 <MDIO_enSetPortDirection+0x7c>
    1468:	2c 81       	ldd	r18, Y+4	; 0x04
    146a:	3d 81       	ldd	r19, Y+5	; 0x05
    146c:	23 30       	cpi	r18, 0x03	; 3
    146e:	31 05       	cpc	r19, r1
    1470:	81 f0       	breq	.+32     	; 0x1492 <MDIO_enSetPortDirection+0x68>
    1472:	8c 81       	ldd	r24, Y+4	; 0x04
    1474:	9d 81       	ldd	r25, Y+5	; 0x05
    1476:	84 30       	cpi	r24, 0x04	; 4
    1478:	91 05       	cpc	r25, r1
    147a:	81 f0       	breq	.+32     	; 0x149c <MDIO_enSetPortDirection+0x72>
    147c:	14 c0       	rjmp	.+40     	; 0x14a6 <MDIO_enSetPortDirection+0x7c>
		case PORTA: // PORTA
			REG_DDRA = copy_u8Value;
    147e:	ea e3       	ldi	r30, 0x3A	; 58
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	80 83       	st	Z, r24
    1486:	11 c0       	rjmp	.+34     	; 0x14aa <MDIO_enSetPortDirection+0x80>
			break;
		case PORTB: // PORTB
			REG_DDRB = copy_u8Value;
    1488:	e7 e3       	ldi	r30, 0x37	; 55
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	80 83       	st	Z, r24
    1490:	0c c0       	rjmp	.+24     	; 0x14aa <MDIO_enSetPortDirection+0x80>
			break;
		case PORTC: // PORTC
			REG_DDRC = copy_u8Value;
    1492:	e4 e3       	ldi	r30, 0x34	; 52
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	80 83       	st	Z, r24
    149a:	07 c0       	rjmp	.+14     	; 0x14aa <MDIO_enSetPortDirection+0x80>
			break;
		case PORTD: // PORTD
			REG_DDRD = copy_u8Value;
    149c:	e1 e3       	ldi	r30, 0x31	; 49
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	80 83       	st	Z, r24
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <MDIO_enSetPortDirection+0x80>
			break;
		default:
			Local_enState = OUT_OF_RANGE;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	89 83       	std	Y+1, r24	; 0x01
			break;
		} // switch
	} // else
	return Local_enState;
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <MDIO_enSetPinValue>:

ErrorState_t MDIO_enSetPinValue(Pin_t copy_enPin, Value_t copy_enValue) {
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	27 97       	sbiw	r28, 0x07	; 7
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	8c 83       	std	Y+4, r24	; 0x04
    14d2:	6d 83       	std	Y+5, r22	; 0x05
	ErrorState_t Local_enState = SUCCESS;
    14d4:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8Port = copy_enPin / 10;
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	9a e0       	ldi	r25, 0x0A	; 10
    14da:	69 2f       	mov	r22, r25
    14dc:	0e 94 00 41 	call	0x8200	; 0x8200 <__udivmodqi4>
    14e0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Pin  = copy_enPin % 10;
    14e2:	8c 81       	ldd	r24, Y+4	; 0x04
    14e4:	9a e0       	ldi	r25, 0x0A	; 10
    14e6:	69 2f       	mov	r22, r25
    14e8:	0e 94 00 41 	call	0x8200	; 0x8200 <__udivmodqi4>
    14ec:	89 2f       	mov	r24, r25
    14ee:	89 83       	std	Y+1, r24	; 0x01
	switch (Local_u8Port) {
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	3f 83       	std	Y+7, r19	; 0x07
    14f8:	2e 83       	std	Y+6, r18	; 0x06
    14fa:	8e 81       	ldd	r24, Y+6	; 0x06
    14fc:	9f 81       	ldd	r25, Y+7	; 0x07
    14fe:	82 30       	cpi	r24, 0x02	; 2
    1500:	91 05       	cpc	r25, r1
    1502:	09 f4       	brne	.+2      	; 0x1506 <MDIO_enSetPinValue+0x4a>
    1504:	4a c0       	rjmp	.+148    	; 0x159a <MDIO_enSetPinValue+0xde>
    1506:	2e 81       	ldd	r18, Y+6	; 0x06
    1508:	3f 81       	ldd	r19, Y+7	; 0x07
    150a:	23 30       	cpi	r18, 0x03	; 3
    150c:	31 05       	cpc	r19, r1
    150e:	34 f4       	brge	.+12     	; 0x151c <MDIO_enSetPinValue+0x60>
    1510:	8e 81       	ldd	r24, Y+6	; 0x06
    1512:	9f 81       	ldd	r25, Y+7	; 0x07
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	91 05       	cpc	r25, r1
    1518:	71 f0       	breq	.+28     	; 0x1536 <MDIO_enSetPinValue+0x7a>
    151a:	d5 c0       	rjmp	.+426    	; 0x16c6 <MDIO_enSetPinValue+0x20a>
    151c:	2e 81       	ldd	r18, Y+6	; 0x06
    151e:	3f 81       	ldd	r19, Y+7	; 0x07
    1520:	23 30       	cpi	r18, 0x03	; 3
    1522:	31 05       	cpc	r19, r1
    1524:	09 f4       	brne	.+2      	; 0x1528 <MDIO_enSetPinValue+0x6c>
    1526:	6b c0       	rjmp	.+214    	; 0x15fe <MDIO_enSetPinValue+0x142>
    1528:	8e 81       	ldd	r24, Y+6	; 0x06
    152a:	9f 81       	ldd	r25, Y+7	; 0x07
    152c:	84 30       	cpi	r24, 0x04	; 4
    152e:	91 05       	cpc	r25, r1
    1530:	09 f4       	brne	.+2      	; 0x1534 <MDIO_enSetPinValue+0x78>
    1532:	97 c0       	rjmp	.+302    	; 0x1662 <MDIO_enSetPinValue+0x1a6>
    1534:	c8 c0       	rjmp	.+400    	; 0x16c6 <MDIO_enSetPinValue+0x20a>
	case PORTA:
		if (HIGH == copy_enValue) {
    1536:	8d 81       	ldd	r24, Y+5	; 0x05
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	a1 f4       	brne	.+40     	; 0x1564 <MDIO_enSetPinValue+0xa8>
			SET_BIT(REG_PORTA, Local_u8Pin);
    153c:	ab e3       	ldi	r26, 0x3B	; 59
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	eb e3       	ldi	r30, 0x3B	; 59
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	48 2f       	mov	r20, r24
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 2e       	mov	r0, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <MDIO_enSetPinValue+0x9e>
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	0a 94       	dec	r0
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <MDIO_enSetPinValue+0x9a>
    155e:	84 2b       	or	r24, r20
    1560:	8c 93       	st	X, r24
    1562:	b3 c0       	rjmp	.+358    	; 0x16ca <MDIO_enSetPinValue+0x20e>
		} else if (LOW == copy_enValue) {
    1564:	8d 81       	ldd	r24, Y+5	; 0x05
    1566:	88 23       	and	r24, r24
    1568:	a9 f4       	brne	.+42     	; 0x1594 <MDIO_enSetPinValue+0xd8>
			CLR_BIT(REG_PORTA, Local_u8Pin);
    156a:	ab e3       	ldi	r26, 0x3B	; 59
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	eb e3       	ldi	r30, 0x3B	; 59
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	48 2f       	mov	r20, r24
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 2e       	mov	r0, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <MDIO_enSetPinValue+0xcc>
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	0a 94       	dec	r0
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <MDIO_enSetPinValue+0xc8>
    158c:	80 95       	com	r24
    158e:	84 23       	and	r24, r20
    1590:	8c 93       	st	X, r24
    1592:	9b c0       	rjmp	.+310    	; 0x16ca <MDIO_enSetPinValue+0x20e>
		} else {
			Local_enState = OUT_OF_RANGE;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	8b 83       	std	Y+3, r24	; 0x03
    1598:	98 c0       	rjmp	.+304    	; 0x16ca <MDIO_enSetPinValue+0x20e>
		}
		break;
	case PORTB:
		if (HIGH == copy_enValue) {
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	a1 f4       	brne	.+40     	; 0x15c8 <MDIO_enSetPinValue+0x10c>
			SET_BIT(REG_PORTB, Local_u8Pin);
    15a0:	a8 e3       	ldi	r26, 0x38	; 56
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e8 e3       	ldi	r30, 0x38	; 56
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 2e       	mov	r0, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <MDIO_enSetPinValue+0x102>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	0a 94       	dec	r0
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <MDIO_enSetPinValue+0xfe>
    15c2:	84 2b       	or	r24, r20
    15c4:	8c 93       	st	X, r24
    15c6:	81 c0       	rjmp	.+258    	; 0x16ca <MDIO_enSetPinValue+0x20e>
		} else if (LOW == copy_enValue) {
    15c8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ca:	88 23       	and	r24, r24
    15cc:	a9 f4       	brne	.+42     	; 0x15f8 <MDIO_enSetPinValue+0x13c>
			CLR_BIT(REG_PORTB, Local_u8Pin);
    15ce:	a8 e3       	ldi	r26, 0x38	; 56
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e8 e3       	ldi	r30, 0x38	; 56
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	48 2f       	mov	r20, r24
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	02 2e       	mov	r0, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <MDIO_enSetPinValue+0x130>
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	0a 94       	dec	r0
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <MDIO_enSetPinValue+0x12c>
    15f0:	80 95       	com	r24
    15f2:	84 23       	and	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	69 c0       	rjmp	.+210    	; 0x16ca <MDIO_enSetPinValue+0x20e>
		} else {
			Local_enState = OUT_OF_RANGE;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	8b 83       	std	Y+3, r24	; 0x03
    15fc:	66 c0       	rjmp	.+204    	; 0x16ca <MDIO_enSetPinValue+0x20e>
		}
		break;
	case PORTC:
		if (HIGH == copy_enValue) {
    15fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	a1 f4       	brne	.+40     	; 0x162c <MDIO_enSetPinValue+0x170>
			SET_BIT(REG_PORTC, Local_u8Pin);
    1604:	a5 e3       	ldi	r26, 0x35	; 53
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e5 e3       	ldi	r30, 0x35	; 53
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	48 2f       	mov	r20, r24
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	02 2e       	mov	r0, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <MDIO_enSetPinValue+0x166>
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	0a 94       	dec	r0
    1624:	e2 f7       	brpl	.-8      	; 0x161e <MDIO_enSetPinValue+0x162>
    1626:	84 2b       	or	r24, r20
    1628:	8c 93       	st	X, r24
    162a:	4f c0       	rjmp	.+158    	; 0x16ca <MDIO_enSetPinValue+0x20e>
		} else if (LOW == copy_enValue) {
    162c:	8d 81       	ldd	r24, Y+5	; 0x05
    162e:	88 23       	and	r24, r24
    1630:	a9 f4       	brne	.+42     	; 0x165c <MDIO_enSetPinValue+0x1a0>
			CLR_BIT(REG_PORTC, Local_u8Pin);
    1632:	a5 e3       	ldi	r26, 0x35	; 53
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e5 e3       	ldi	r30, 0x35	; 53
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	48 2f       	mov	r20, r24
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	02 2e       	mov	r0, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <MDIO_enSetPinValue+0x194>
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	0a 94       	dec	r0
    1652:	e2 f7       	brpl	.-8      	; 0x164c <MDIO_enSetPinValue+0x190>
    1654:	80 95       	com	r24
    1656:	84 23       	and	r24, r20
    1658:	8c 93       	st	X, r24
    165a:	37 c0       	rjmp	.+110    	; 0x16ca <MDIO_enSetPinValue+0x20e>
		} else {
			Local_enState = OUT_OF_RANGE;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	8b 83       	std	Y+3, r24	; 0x03
    1660:	34 c0       	rjmp	.+104    	; 0x16ca <MDIO_enSetPinValue+0x20e>
		}
		break;
	case PORTD:
		if (HIGH == copy_enValue) {
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	a1 f4       	brne	.+40     	; 0x1690 <MDIO_enSetPinValue+0x1d4>
			SET_BIT(REG_PORTD, Local_u8Pin);
    1668:	a2 e3       	ldi	r26, 0x32	; 50
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e2 e3       	ldi	r30, 0x32	; 50
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	48 2f       	mov	r20, r24
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	02 2e       	mov	r0, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <MDIO_enSetPinValue+0x1ca>
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	0a 94       	dec	r0
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <MDIO_enSetPinValue+0x1c6>
    168a:	84 2b       	or	r24, r20
    168c:	8c 93       	st	X, r24
    168e:	1d c0       	rjmp	.+58     	; 0x16ca <MDIO_enSetPinValue+0x20e>
		} else if (LOW == copy_enValue) {
    1690:	8d 81       	ldd	r24, Y+5	; 0x05
    1692:	88 23       	and	r24, r24
    1694:	a9 f4       	brne	.+42     	; 0x16c0 <MDIO_enSetPinValue+0x204>
			CLR_BIT(REG_PORTD, Local_u8Pin);
    1696:	a2 e3       	ldi	r26, 0x32	; 50
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e2 e3       	ldi	r30, 0x32	; 50
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	48 2f       	mov	r20, r24
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 2e       	mov	r0, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <MDIO_enSetPinValue+0x1f8>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	0a 94       	dec	r0
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <MDIO_enSetPinValue+0x1f4>
    16b8:	80 95       	com	r24
    16ba:	84 23       	and	r24, r20
    16bc:	8c 93       	st	X, r24
    16be:	05 c0       	rjmp	.+10     	; 0x16ca <MDIO_enSetPinValue+0x20e>
		} else {
			Local_enState = OUT_OF_RANGE;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	8b 83       	std	Y+3, r24	; 0x03
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <MDIO_enSetPinValue+0x20e>
		}
		break;
	default:
		Local_enState = OUT_OF_RANGE;
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	8b 83       	std	Y+3, r24	; 0x03
		break;
	} // switch
	return Local_enState;
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
}
    16cc:	27 96       	adiw	r28, 0x07	; 7
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <MDIO_enSetPortValue>:

ErrorState_t MDIO_enSetPortValue(Port_t copy_enPort, u8 copy_u8Value) {
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <MDIO_enSetPortValue+0x6>
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <MDIO_enSetPortValue+0x8>
    16e6:	0f 92       	push	r0
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	8a 83       	std	Y+2, r24	; 0x02
    16ee:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_enState = SUCCESS;
    16f0:	19 82       	std	Y+1, r1	; 0x01
	if ((0 > copy_u8Value) || (255 < copy_u8Value)) {
		Local_enState = OUT_OF_RANGE;
	} else {
		switch (copy_enPort) {
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	3d 83       	std	Y+5, r19	; 0x05
    16fa:	2c 83       	std	Y+4, r18	; 0x04
    16fc:	8c 81       	ldd	r24, Y+4	; 0x04
    16fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1700:	82 30       	cpi	r24, 0x02	; 2
    1702:	91 05       	cpc	r25, r1
    1704:	d9 f0       	breq	.+54     	; 0x173c <MDIO_enSetPortValue+0x5e>
    1706:	2c 81       	ldd	r18, Y+4	; 0x04
    1708:	3d 81       	ldd	r19, Y+5	; 0x05
    170a:	23 30       	cpi	r18, 0x03	; 3
    170c:	31 05       	cpc	r19, r1
    170e:	34 f4       	brge	.+12     	; 0x171c <MDIO_enSetPortValue+0x3e>
    1710:	8c 81       	ldd	r24, Y+4	; 0x04
    1712:	9d 81       	ldd	r25, Y+5	; 0x05
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	91 05       	cpc	r25, r1
    1718:	61 f0       	breq	.+24     	; 0x1732 <MDIO_enSetPortValue+0x54>
    171a:	1f c0       	rjmp	.+62     	; 0x175a <MDIO_enSetPortValue+0x7c>
    171c:	2c 81       	ldd	r18, Y+4	; 0x04
    171e:	3d 81       	ldd	r19, Y+5	; 0x05
    1720:	23 30       	cpi	r18, 0x03	; 3
    1722:	31 05       	cpc	r19, r1
    1724:	81 f0       	breq	.+32     	; 0x1746 <MDIO_enSetPortValue+0x68>
    1726:	8c 81       	ldd	r24, Y+4	; 0x04
    1728:	9d 81       	ldd	r25, Y+5	; 0x05
    172a:	84 30       	cpi	r24, 0x04	; 4
    172c:	91 05       	cpc	r25, r1
    172e:	81 f0       	breq	.+32     	; 0x1750 <MDIO_enSetPortValue+0x72>
    1730:	14 c0       	rjmp	.+40     	; 0x175a <MDIO_enSetPortValue+0x7c>
		case PORTA:
			REG_PORTA = copy_u8Value;
    1732:	eb e3       	ldi	r30, 0x3B	; 59
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	80 83       	st	Z, r24
    173a:	11 c0       	rjmp	.+34     	; 0x175e <MDIO_enSetPortValue+0x80>
			break;
		case PORTB:
			REG_PORTB = copy_u8Value;
    173c:	e8 e3       	ldi	r30, 0x38	; 56
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	80 83       	st	Z, r24
    1744:	0c c0       	rjmp	.+24     	; 0x175e <MDIO_enSetPortValue+0x80>
			break;
		case PORTC:
			REG_PORTC = copy_u8Value;
    1746:	e5 e3       	ldi	r30, 0x35	; 53
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	80 83       	st	Z, r24
    174e:	07 c0       	rjmp	.+14     	; 0x175e <MDIO_enSetPortValue+0x80>
			break;
		case PORTD:
			REG_PORTD = copy_u8Value;
    1750:	e2 e3       	ldi	r30, 0x32	; 50
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	80 83       	st	Z, r24
    1758:	02 c0       	rjmp	.+4      	; 0x175e <MDIO_enSetPortValue+0x80>
			break;
		default:
			Local_enState = OUT_OF_RANGE;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	89 83       	std	Y+1, r24	; 0x01
			break;
		} // switch
	} // else
	return Local_enState;
    175e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <MDIO_enGetPinValue>:

ErrorState_t MDIO_enGetPinValue(Pin_t copy_enPin, Value_t *ptrPinValue) {
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	28 97       	sbiw	r28, 0x08	; 8
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	8c 83       	std	Y+4, r24	; 0x04
    1786:	7e 83       	std	Y+6, r23	; 0x06
    1788:	6d 83       	std	Y+5, r22	; 0x05
	ErrorState_t Local_enState = SUCCESS;
    178a:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8Port = copy_enPin / 10;
    178c:	8c 81       	ldd	r24, Y+4	; 0x04
    178e:	9a e0       	ldi	r25, 0x0A	; 10
    1790:	69 2f       	mov	r22, r25
    1792:	0e 94 00 41 	call	0x8200	; 0x8200 <__udivmodqi4>
    1796:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Pin = copy_enPin % 10;
    1798:	8c 81       	ldd	r24, Y+4	; 0x04
    179a:	9a e0       	ldi	r25, 0x0A	; 10
    179c:	69 2f       	mov	r22, r25
    179e:	0e 94 00 41 	call	0x8200	; 0x8200 <__udivmodqi4>
    17a2:	89 2f       	mov	r24, r25
    17a4:	89 83       	std	Y+1, r24	; 0x01
	if (NULL != ptrPinValue) {
    17a6:	8d 81       	ldd	r24, Y+5	; 0x05
    17a8:	9e 81       	ldd	r25, Y+6	; 0x06
    17aa:	00 97       	sbiw	r24, 0x00	; 0
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <MDIO_enGetPinValue+0x40>
    17ae:	74 c0       	rjmp	.+232    	; 0x1898 <MDIO_enGetPinValue+0x128>
		switch (Local_u8Port) {
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	28 2f       	mov	r18, r24
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	38 87       	std	Y+8, r19	; 0x08
    17b8:	2f 83       	std	Y+7, r18	; 0x07
    17ba:	4f 81       	ldd	r20, Y+7	; 0x07
    17bc:	58 85       	ldd	r21, Y+8	; 0x08
    17be:	42 30       	cpi	r20, 0x02	; 2
    17c0:	51 05       	cpc	r21, r1
    17c2:	59 f1       	breq	.+86     	; 0x181a <MDIO_enGetPinValue+0xaa>
    17c4:	8f 81       	ldd	r24, Y+7	; 0x07
    17c6:	98 85       	ldd	r25, Y+8	; 0x08
    17c8:	83 30       	cpi	r24, 0x03	; 3
    17ca:	91 05       	cpc	r25, r1
    17cc:	34 f4       	brge	.+12     	; 0x17da <MDIO_enGetPinValue+0x6a>
    17ce:	2f 81       	ldd	r18, Y+7	; 0x07
    17d0:	38 85       	ldd	r19, Y+8	; 0x08
    17d2:	21 30       	cpi	r18, 0x01	; 1
    17d4:	31 05       	cpc	r19, r1
    17d6:	69 f0       	breq	.+26     	; 0x17f2 <MDIO_enGetPinValue+0x82>
    17d8:	5c c0       	rjmp	.+184    	; 0x1892 <MDIO_enGetPinValue+0x122>
    17da:	4f 81       	ldd	r20, Y+7	; 0x07
    17dc:	58 85       	ldd	r21, Y+8	; 0x08
    17de:	43 30       	cpi	r20, 0x03	; 3
    17e0:	51 05       	cpc	r21, r1
    17e2:	79 f1       	breq	.+94     	; 0x1842 <MDIO_enGetPinValue+0xd2>
    17e4:	8f 81       	ldd	r24, Y+7	; 0x07
    17e6:	98 85       	ldd	r25, Y+8	; 0x08
    17e8:	84 30       	cpi	r24, 0x04	; 4
    17ea:	91 05       	cpc	r25, r1
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <MDIO_enGetPinValue+0x80>
    17ee:	3d c0       	rjmp	.+122    	; 0x186a <MDIO_enGetPinValue+0xfa>
    17f0:	50 c0       	rjmp	.+160    	; 0x1892 <MDIO_enGetPinValue+0x122>
		case PORTA:
			*ptrPinValue = GET_BIT(REG_PINA, Local_u8Pin);
    17f2:	e9 e3       	ldi	r30, 0x39	; 57
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	88 2f       	mov	r24, r24
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	a9 01       	movw	r20, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <MDIO_enGetPinValue+0x9a>
    1806:	55 95       	asr	r21
    1808:	47 95       	ror	r20
    180a:	8a 95       	dec	r24
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <MDIO_enGetPinValue+0x96>
    180e:	ca 01       	movw	r24, r20
    1810:	81 70       	andi	r24, 0x01	; 1
    1812:	ed 81       	ldd	r30, Y+5	; 0x05
    1814:	fe 81       	ldd	r31, Y+6	; 0x06
    1816:	80 83       	st	Z, r24
    1818:	41 c0       	rjmp	.+130    	; 0x189c <MDIO_enGetPinValue+0x12c>
			break;
		case PORTB:
			*ptrPinValue = GET_BIT(REG_PINB, Local_u8Pin);
    181a:	e6 e3       	ldi	r30, 0x36	; 54
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	88 2f       	mov	r24, r24
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	a9 01       	movw	r20, r18
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <MDIO_enGetPinValue+0xc2>
    182e:	55 95       	asr	r21
    1830:	47 95       	ror	r20
    1832:	8a 95       	dec	r24
    1834:	e2 f7       	brpl	.-8      	; 0x182e <MDIO_enGetPinValue+0xbe>
    1836:	ca 01       	movw	r24, r20
    1838:	81 70       	andi	r24, 0x01	; 1
    183a:	ed 81       	ldd	r30, Y+5	; 0x05
    183c:	fe 81       	ldd	r31, Y+6	; 0x06
    183e:	80 83       	st	Z, r24
    1840:	2d c0       	rjmp	.+90     	; 0x189c <MDIO_enGetPinValue+0x12c>
			break;
		case PORTC:
			*ptrPinValue = GET_BIT(REG_PINC, Local_u8Pin);
    1842:	e3 e3       	ldi	r30, 0x33	; 51
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	88 2f       	mov	r24, r24
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	a9 01       	movw	r20, r18
    1854:	02 c0       	rjmp	.+4      	; 0x185a <MDIO_enGetPinValue+0xea>
    1856:	55 95       	asr	r21
    1858:	47 95       	ror	r20
    185a:	8a 95       	dec	r24
    185c:	e2 f7       	brpl	.-8      	; 0x1856 <MDIO_enGetPinValue+0xe6>
    185e:	ca 01       	movw	r24, r20
    1860:	81 70       	andi	r24, 0x01	; 1
    1862:	ed 81       	ldd	r30, Y+5	; 0x05
    1864:	fe 81       	ldd	r31, Y+6	; 0x06
    1866:	80 83       	st	Z, r24
    1868:	19 c0       	rjmp	.+50     	; 0x189c <MDIO_enGetPinValue+0x12c>
			break;
		case PORTD:
			*ptrPinValue = GET_BIT(REG_PIND, Local_u8Pin);
    186a:	e0 e3       	ldi	r30, 0x30	; 48
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	88 2f       	mov	r24, r24
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	a9 01       	movw	r20, r18
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <MDIO_enGetPinValue+0x112>
    187e:	55 95       	asr	r21
    1880:	47 95       	ror	r20
    1882:	8a 95       	dec	r24
    1884:	e2 f7       	brpl	.-8      	; 0x187e <MDIO_enGetPinValue+0x10e>
    1886:	ca 01       	movw	r24, r20
    1888:	81 70       	andi	r24, 0x01	; 1
    188a:	ed 81       	ldd	r30, Y+5	; 0x05
    188c:	fe 81       	ldd	r31, Y+6	; 0x06
    188e:	80 83       	st	Z, r24
    1890:	05 c0       	rjmp	.+10     	; 0x189c <MDIO_enGetPinValue+0x12c>
			break;
		default:
			Local_enState = OUT_OF_RANGE;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	8b 83       	std	Y+3, r24	; 0x03
    1896:	02 c0       	rjmp	.+4      	; 0x189c <MDIO_enGetPinValue+0x12c>
			break;
		} // switch
	} // if
	else {
		Local_enState = NULL_POINTER;
    1898:	82 e0       	ldi	r24, 0x02	; 2
    189a:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_enState;
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    189e:	28 96       	adiw	r28, 0x08	; 8
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <MDIO_enGetPortValue>:

ErrorState_t MDIO_enGetPortValue(Port_t copy_enPort, u8 *ptrPortValue) {
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <MDIO_enGetPortValue+0x6>
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <MDIO_enGetPortValue+0x8>
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <MDIO_enGetPortValue+0xa>
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	8a 83       	std	Y+2, r24	; 0x02
    18c0:	7c 83       	std	Y+4, r23	; 0x04
    18c2:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_enState = SUCCESS;
    18c4:	19 82       	std	Y+1, r1	; 0x01
	if (NULL != ptrPortValue) {
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <MDIO_enGetPortValue+0x20>
    18ce:	3f c0       	rjmp	.+126    	; 0x194e <MDIO_enGetPortValue+0x9e>
		switch (copy_enPort) {
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	3e 83       	std	Y+6, r19	; 0x06
    18d8:	2d 83       	std	Y+5, r18	; 0x05
    18da:	8d 81       	ldd	r24, Y+5	; 0x05
    18dc:	9e 81       	ldd	r25, Y+6	; 0x06
    18de:	82 30       	cpi	r24, 0x02	; 2
    18e0:	91 05       	cpc	r25, r1
    18e2:	e9 f0       	breq	.+58     	; 0x191e <MDIO_enGetPortValue+0x6e>
    18e4:	2d 81       	ldd	r18, Y+5	; 0x05
    18e6:	3e 81       	ldd	r19, Y+6	; 0x06
    18e8:	23 30       	cpi	r18, 0x03	; 3
    18ea:	31 05       	cpc	r19, r1
    18ec:	34 f4       	brge	.+12     	; 0x18fa <MDIO_enGetPortValue+0x4a>
    18ee:	8d 81       	ldd	r24, Y+5	; 0x05
    18f0:	9e 81       	ldd	r25, Y+6	; 0x06
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	91 05       	cpc	r25, r1
    18f6:	61 f0       	breq	.+24     	; 0x1910 <MDIO_enGetPortValue+0x60>
    18f8:	27 c0       	rjmp	.+78     	; 0x1948 <MDIO_enGetPortValue+0x98>
    18fa:	2d 81       	ldd	r18, Y+5	; 0x05
    18fc:	3e 81       	ldd	r19, Y+6	; 0x06
    18fe:	23 30       	cpi	r18, 0x03	; 3
    1900:	31 05       	cpc	r19, r1
    1902:	a1 f0       	breq	.+40     	; 0x192c <MDIO_enGetPortValue+0x7c>
    1904:	8d 81       	ldd	r24, Y+5	; 0x05
    1906:	9e 81       	ldd	r25, Y+6	; 0x06
    1908:	84 30       	cpi	r24, 0x04	; 4
    190a:	91 05       	cpc	r25, r1
    190c:	b1 f0       	breq	.+44     	; 0x193a <MDIO_enGetPortValue+0x8a>
    190e:	1c c0       	rjmp	.+56     	; 0x1948 <MDIO_enGetPortValue+0x98>
		case PORTA:
			*ptrPortValue = REG_PINA;
    1910:	e9 e3       	ldi	r30, 0x39	; 57
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	eb 81       	ldd	r30, Y+3	; 0x03
    1918:	fc 81       	ldd	r31, Y+4	; 0x04
    191a:	80 83       	st	Z, r24
    191c:	1a c0       	rjmp	.+52     	; 0x1952 <MDIO_enGetPortValue+0xa2>
			break;
		case PORTB:
			*ptrPortValue = REG_PINB;
    191e:	e6 e3       	ldi	r30, 0x36	; 54
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	eb 81       	ldd	r30, Y+3	; 0x03
    1926:	fc 81       	ldd	r31, Y+4	; 0x04
    1928:	80 83       	st	Z, r24
    192a:	13 c0       	rjmp	.+38     	; 0x1952 <MDIO_enGetPortValue+0xa2>
			break;
		case PORTC:
			*ptrPortValue = REG_PINC;
    192c:	e3 e3       	ldi	r30, 0x33	; 51
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	eb 81       	ldd	r30, Y+3	; 0x03
    1934:	fc 81       	ldd	r31, Y+4	; 0x04
    1936:	80 83       	st	Z, r24
    1938:	0c c0       	rjmp	.+24     	; 0x1952 <MDIO_enGetPortValue+0xa2>
			break;
		case PORTD:
			*ptrPortValue = REG_PIND;
    193a:	e0 e3       	ldi	r30, 0x30	; 48
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	eb 81       	ldd	r30, Y+3	; 0x03
    1942:	fc 81       	ldd	r31, Y+4	; 0x04
    1944:	80 83       	st	Z, r24
    1946:	05 c0       	rjmp	.+10     	; 0x1952 <MDIO_enGetPortValue+0xa2>
			break;
		default:
			Local_enState = OUT_OF_RANGE;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <MDIO_enGetPortValue+0xa2>
			break;
		} // switch
	} // if
	else {
		Local_enState = NULL_POINTER;
    194e:	82 e0       	ldi	r24, 0x02	; 2
    1950:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enState;
    1952:	89 81       	ldd	r24, Y+1	; 0x01
}
    1954:	26 96       	adiw	r28, 0x06	; 6
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <MDIO_enTogglePinValue>:

ErrorState_t MDIO_enTogglePinValue(Pin_t copy_enPin) {
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	00 d0       	rcall	.+0      	; 0x196c <MDIO_enTogglePinValue+0x6>
    196c:	00 d0       	rcall	.+0      	; 0x196e <MDIO_enTogglePinValue+0x8>
    196e:	00 d0       	rcall	.+0      	; 0x1970 <MDIO_enTogglePinValue+0xa>
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	8c 83       	std	Y+4, r24	; 0x04
	ErrorState_t Local_enState = SUCCESS;
    1976:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8Port = copy_enPin / 10;
    1978:	8c 81       	ldd	r24, Y+4	; 0x04
    197a:	9a e0       	ldi	r25, 0x0A	; 10
    197c:	69 2f       	mov	r22, r25
    197e:	0e 94 00 41 	call	0x8200	; 0x8200 <__udivmodqi4>
    1982:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Pin = copy_enPin % 10;
    1984:	8c 81       	ldd	r24, Y+4	; 0x04
    1986:	9a e0       	ldi	r25, 0x0A	; 10
    1988:	69 2f       	mov	r22, r25
    198a:	0e 94 00 41 	call	0x8200	; 0x8200 <__udivmodqi4>
    198e:	89 2f       	mov	r24, r25
    1990:	89 83       	std	Y+1, r24	; 0x01
	switch (Local_u8Port) {
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	3e 83       	std	Y+6, r19	; 0x06
    199a:	2d 83       	std	Y+5, r18	; 0x05
    199c:	8d 81       	ldd	r24, Y+5	; 0x05
    199e:	9e 81       	ldd	r25, Y+6	; 0x06
    19a0:	82 30       	cpi	r24, 0x02	; 2
    19a2:	91 05       	cpc	r25, r1
    19a4:	51 f1       	breq	.+84     	; 0x19fa <MDIO_enTogglePinValue+0x94>
    19a6:	2d 81       	ldd	r18, Y+5	; 0x05
    19a8:	3e 81       	ldd	r19, Y+6	; 0x06
    19aa:	23 30       	cpi	r18, 0x03	; 3
    19ac:	31 05       	cpc	r19, r1
    19ae:	34 f4       	brge	.+12     	; 0x19bc <MDIO_enTogglePinValue+0x56>
    19b0:	8d 81       	ldd	r24, Y+5	; 0x05
    19b2:	9e 81       	ldd	r25, Y+6	; 0x06
    19b4:	81 30       	cpi	r24, 0x01	; 1
    19b6:	91 05       	cpc	r25, r1
    19b8:	61 f0       	breq	.+24     	; 0x19d2 <MDIO_enTogglePinValue+0x6c>
    19ba:	5b c0       	rjmp	.+182    	; 0x1a72 <MDIO_enTogglePinValue+0x10c>
    19bc:	2d 81       	ldd	r18, Y+5	; 0x05
    19be:	3e 81       	ldd	r19, Y+6	; 0x06
    19c0:	23 30       	cpi	r18, 0x03	; 3
    19c2:	31 05       	cpc	r19, r1
    19c4:	71 f1       	breq	.+92     	; 0x1a22 <MDIO_enTogglePinValue+0xbc>
    19c6:	8d 81       	ldd	r24, Y+5	; 0x05
    19c8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ca:	84 30       	cpi	r24, 0x04	; 4
    19cc:	91 05       	cpc	r25, r1
    19ce:	e9 f1       	breq	.+122    	; 0x1a4a <MDIO_enTogglePinValue+0xe4>
    19d0:	50 c0       	rjmp	.+160    	; 0x1a72 <MDIO_enTogglePinValue+0x10c>
	case PORTA:
		TOGG_BIT(REG_PORTA, Local_u8Pin);
    19d2:	ab e3       	ldi	r26, 0x3B	; 59
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	eb e3       	ldi	r30, 0x3B	; 59
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	48 2f       	mov	r20, r24
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	02 2e       	mov	r0, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <MDIO_enTogglePinValue+0x8a>
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	0a 94       	dec	r0
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <MDIO_enTogglePinValue+0x86>
    19f4:	84 27       	eor	r24, r20
    19f6:	8c 93       	st	X, r24
    19f8:	3e c0       	rjmp	.+124    	; 0x1a76 <MDIO_enTogglePinValue+0x110>
		break;
	case PORTB:
		TOGG_BIT(REG_PORTB, Local_u8Pin);
    19fa:	a8 e3       	ldi	r26, 0x38	; 56
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e8 e3       	ldi	r30, 0x38	; 56
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	48 2f       	mov	r20, r24
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	02 2e       	mov	r0, r18
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <MDIO_enTogglePinValue+0xb2>
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	0a 94       	dec	r0
    1a1a:	e2 f7       	brpl	.-8      	; 0x1a14 <MDIO_enTogglePinValue+0xae>
    1a1c:	84 27       	eor	r24, r20
    1a1e:	8c 93       	st	X, r24
    1a20:	2a c0       	rjmp	.+84     	; 0x1a76 <MDIO_enTogglePinValue+0x110>
		break;
	case PORTC:
		TOGG_BIT(REG_PORTC, Local_u8Pin);
    1a22:	a5 e3       	ldi	r26, 0x35	; 53
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e5 e3       	ldi	r30, 0x35	; 53
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	48 2f       	mov	r20, r24
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	02 2e       	mov	r0, r18
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <MDIO_enTogglePinValue+0xda>
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	0a 94       	dec	r0
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <MDIO_enTogglePinValue+0xd6>
    1a44:	84 27       	eor	r24, r20
    1a46:	8c 93       	st	X, r24
    1a48:	16 c0       	rjmp	.+44     	; 0x1a76 <MDIO_enTogglePinValue+0x110>
		break;
	case PORTD:
		TOGG_BIT(REG_PORTD, Local_u8Pin);
    1a4a:	a2 e3       	ldi	r26, 0x32	; 50
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e2 e3       	ldi	r30, 0x32	; 50
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	48 2f       	mov	r20, r24
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	02 2e       	mov	r0, r18
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <MDIO_enTogglePinValue+0x102>
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	0a 94       	dec	r0
    1a6a:	e2 f7       	brpl	.-8      	; 0x1a64 <MDIO_enTogglePinValue+0xfe>
    1a6c:	84 27       	eor	r24, r20
    1a6e:	8c 93       	st	X, r24
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <MDIO_enTogglePinValue+0x110>
		break;
	default:
		Local_enState = OUT_OF_RANGE;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	8b 83       	std	Y+3, r24	; 0x03
		break;
	} // switch
	return Local_enState;
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1a78:	26 96       	adiw	r28, 0x06	; 6
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	de bf       	out	0x3e, r29	; 62
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	cd bf       	out	0x3d, r28	; 61
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <MDIO_enTogglePortValue>:

ErrorState_t MDIO_enTogglePortValue(Port_t copy_enPort) {
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <MDIO_enTogglePortValue+0x6>
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <MDIO_enTogglePortValue+0x8>
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    1a98:	19 82       	std	Y+1, r1	; 0x01
	switch (copy_enPort) {
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	28 2f       	mov	r18, r24
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	3c 83       	std	Y+4, r19	; 0x04
    1aa2:	2b 83       	std	Y+3, r18	; 0x03
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	82 30       	cpi	r24, 0x02	; 2
    1aaa:	91 05       	cpc	r25, r1
    1aac:	f1 f0       	breq	.+60     	; 0x1aea <MDIO_enTogglePortValue+0x60>
    1aae:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab2:	23 30       	cpi	r18, 0x03	; 3
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	34 f4       	brge	.+12     	; 0x1ac4 <MDIO_enTogglePortValue+0x3a>
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	91 05       	cpc	r25, r1
    1ac0:	61 f0       	breq	.+24     	; 0x1ada <MDIO_enTogglePortValue+0x50>
    1ac2:	2b c0       	rjmp	.+86     	; 0x1b1a <MDIO_enTogglePortValue+0x90>
    1ac4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac8:	23 30       	cpi	r18, 0x03	; 3
    1aca:	31 05       	cpc	r19, r1
    1acc:	b1 f0       	breq	.+44     	; 0x1afa <MDIO_enTogglePortValue+0x70>
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad2:	84 30       	cpi	r24, 0x04	; 4
    1ad4:	91 05       	cpc	r25, r1
    1ad6:	c9 f0       	breq	.+50     	; 0x1b0a <MDIO_enTogglePortValue+0x80>
    1ad8:	20 c0       	rjmp	.+64     	; 0x1b1a <MDIO_enTogglePortValue+0x90>
	case PORTA:
		TOGG_REG(REG_PORTA);
    1ada:	ab e3       	ldi	r26, 0x3B	; 59
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	eb e3       	ldi	r30, 0x3B	; 59
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	80 95       	com	r24
    1ae6:	8c 93       	st	X, r24
    1ae8:	1a c0       	rjmp	.+52     	; 0x1b1e <MDIO_enTogglePortValue+0x94>
		break;
	case PORTB:
		TOGG_REG(REG_PORTB);
    1aea:	a8 e3       	ldi	r26, 0x38	; 56
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e8 e3       	ldi	r30, 0x38	; 56
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	80 95       	com	r24
    1af6:	8c 93       	st	X, r24
    1af8:	12 c0       	rjmp	.+36     	; 0x1b1e <MDIO_enTogglePortValue+0x94>
		break;
	case PORTC:
		TOGG_REG(REG_PORTC);
    1afa:	a5 e3       	ldi	r26, 0x35	; 53
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e5 e3       	ldi	r30, 0x35	; 53
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	80 95       	com	r24
    1b06:	8c 93       	st	X, r24
    1b08:	0a c0       	rjmp	.+20     	; 0x1b1e <MDIO_enTogglePortValue+0x94>
		break;
	case PORTD:
		TOGG_REG(REG_PORTD);
    1b0a:	a2 e3       	ldi	r26, 0x32	; 50
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e2 e3       	ldi	r30, 0x32	; 50
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	80 95       	com	r24
    1b16:	8c 93       	st	X, r24
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <MDIO_enTogglePortValue+0x94>
		break;
	default:
		Local_enState = OUT_OF_RANGE;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	89 83       	std	Y+1, r24	; 0x01
		break;
	} // switch
	return Local_enState;
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <MADC_enInit>:
static u16 *MADC_u16ReadVal = NULL;
static ADC_Chain_t *MADC_enChainStruct = NULL;
static u8 MADC_u8FunState = IDLE;
static u8 MADC_u8SelectISR = NONE;
static u8 MADC_u8ChainChannelIndex;
ErrorState_t MADC_enInit() {
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
	/******************** Adjust Reference Voltage ********************/
#if(MADC_REFERENCE_SELECTION == AREF)
	CLR_BIT(REG_ADMUX, ADMUX_REFS1);
    1b36:	a7 e2       	ldi	r26, 0x27	; 39
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e7 e2       	ldi	r30, 0x27	; 39
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	8f 77       	andi	r24, 0x7F	; 127
    1b42:	8c 93       	st	X, r24
	CLR_BIT(REG_ADMUX, ADMUX_REFS0);
    1b44:	a7 e2       	ldi	r26, 0x27	; 39
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e7 e2       	ldi	r30, 0x27	; 39
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	8f 7b       	andi	r24, 0xBF	; 191
    1b50:	8c 93       	st	X, r24
	/******************** Adjust Reference Voltage ********************/

	/************************** Adjust ADLAR **************************/
#if(MADC_RESOLUTION == _10BIT)
	/** Right Adjust **/
	CLR_BIT(REG_ADMUX, ADMUX_ADLAR);
    1b52:	a7 e2       	ldi	r26, 0x27	; 39
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	e7 e2       	ldi	r30, 0x27	; 39
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	8f 7d       	andi	r24, 0xDF	; 223
    1b5e:	8c 93       	st	X, r24

	/********************** Adjust Auto Trigger ***********************/
#if(MADC_AUTO_TRIGGER == AUTO_TRIGGER_ENABLE)
	SET_BIT(REG_ADCSRA, ADCSRA_ADATE);
#elif(MADC_AUTO_TRIGGER == AUTO_TRIGGER_DISABLE)
	CLR_BIT(REG_ADCSRA, ADCSRA_ADATE);
    1b60:	a6 e2       	ldi	r26, 0x26	; 38
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e6 e2       	ldi	r30, 0x26	; 38
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	8f 7d       	andi	r24, 0xDF	; 223
    1b6c:	8c 93       	st	X, r24

	/************************ Adjust Interrupt ************************/
#if(MADC_INTERRUPT == INTERRUPT_ENABLE)
	SET_BIT(REG_ADCSRA, ADCSRA_ADIE);
#elif(MADC_INTERRUPT == INTERRUPT_DISABLE)
	CLR_BIT(REG_ADCSRA, ADCSRA_ADIE);
    1b6e:	a6 e2       	ldi	r26, 0x26	; 38
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	e6 e2       	ldi	r30, 0x26	; 38
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	87 7f       	andi	r24, 0xF7	; 247
    1b7a:	8c 93       	st	X, r24
#endif
	/************************ Adjust Interrupt ************************/

	/************************ Adjust Prescaler ************************/
#if(MADC_PRESCALER == PRESCALER_128)
	REG_ADCSRA &= ADPS_MASK;
    1b7c:	a6 e2       	ldi	r26, 0x26	; 38
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e6 e2       	ldi	r30, 0x26	; 38
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	88 7f       	andi	r24, 0xF8	; 248
    1b88:	8c 93       	st	X, r24
	REG_ADCSRA |= PRESCALER_128;
    1b8a:	a6 e2       	ldi	r26, 0x26	; 38
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e6 e2       	ldi	r30, 0x26	; 38
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	87 60       	ori	r24, 0x07	; 7
    1b96:	8c 93       	st	X, r24
#error("Wrong Prescaler Configuration")
#endif
	/************************ Adjust Prescaler ************************/

	/*************************** Enable ADC ***************************/
	SET_BIT(REG_ADCSRA, ADCSRA_ADEN);
    1b98:	a6 e2       	ldi	r26, 0x26	; 38
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e6 e2       	ldi	r30, 0x26	; 38
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	80 68       	ori	r24, 0x80	; 128
    1ba4:	8c 93       	st	X, r24
	/*************************** Enable ADC ***************************/
	return SUCCESS;
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
}
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <MADC_enStartConversionSynch>:

ErrorState_t MADC_enStartConversionSynch(Channel_t copy_enChannel,
		u16 *PtrReadValue) {
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	28 97       	sbiw	r28, 0x08	; 8
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	de bf       	out	0x3e, r29	; 62
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	cd bf       	out	0x3d, r28	; 61
    1bc2:	8e 83       	std	Y+6, r24	; 0x06
    1bc4:	78 87       	std	Y+8, r23	; 0x08
    1bc6:	6f 83       	std	Y+7, r22	; 0x07
	ErrorState_t Local_enState = SUCCESS;
    1bc8:	1d 82       	std	Y+5, r1	; 0x05
	if (MADC_u8FunState == BUSY) {
    1bca:	80 91 94 01 	lds	r24, 0x0194
    1bce:	81 30       	cpi	r24, 0x01	; 1
    1bd0:	19 f4       	brne	.+6      	; 0x1bd8 <MADC_enStartConversionSynch+0x2a>
		Local_enState = BUSY_FUNCTION;
    1bd2:	84 e0       	ldi	r24, 0x04	; 4
    1bd4:	8d 83       	std	Y+5, r24	; 0x05
    1bd6:	6d c0       	rjmp	.+218    	; 0x1cb2 <MADC_enStartConversionSynch+0x104>
	} else {
		u32 Local_u32Counter = 0;
    1bd8:	19 82       	std	Y+1, r1	; 0x01
    1bda:	1a 82       	std	Y+2, r1	; 0x02
    1bdc:	1b 82       	std	Y+3, r1	; 0x03
    1bde:	1c 82       	std	Y+4, r1	; 0x04
		if (PtrReadValue == NULL) {
    1be0:	8f 81       	ldd	r24, Y+7	; 0x07
    1be2:	98 85       	ldd	r25, Y+8	; 0x08
    1be4:	00 97       	sbiw	r24, 0x00	; 0
    1be6:	19 f4       	brne	.+6      	; 0x1bee <MADC_enStartConversionSynch+0x40>
			Local_enState = NULL_POINTER;
    1be8:	82 e0       	ldi	r24, 0x02	; 2
    1bea:	8d 83       	std	Y+5, r24	; 0x05
    1bec:	62 c0       	rjmp	.+196    	; 0x1cb2 <MADC_enStartConversionSynch+0x104>
		} else {
			if (copy_enChannel < 0 || copy_enChannel > 7) {
    1bee:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf0:	88 30       	cpi	r24, 0x08	; 8
    1bf2:	18 f0       	brcs	.+6      	; 0x1bfa <MADC_enStartConversionSynch+0x4c>
				Local_enState = OUT_OF_RANGE;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	8d 83       	std	Y+5, r24	; 0x05
    1bf8:	5c c0       	rjmp	.+184    	; 0x1cb2 <MADC_enStartConversionSynch+0x104>
			} else {
				/************************ ADC is Busy Now *************************/
				MADC_u8FunState = BUSY;
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	80 93 94 01 	sts	0x0194, r24
				/************************ ADC is Busy Now *************************/

				/************************* Select Channel *************************/
				REG_ADMUX &= MUX_MASK;
    1c00:	a7 e2       	ldi	r26, 0x27	; 39
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e7 e2       	ldi	r30, 0x27	; 39
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	80 7e       	andi	r24, 0xE0	; 224
    1c0c:	8c 93       	st	X, r24
				REG_ADMUX |= copy_enChannel;
    1c0e:	a7 e2       	ldi	r26, 0x27	; 39
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e7 e2       	ldi	r30, 0x27	; 39
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	90 81       	ld	r25, Z
    1c18:	8e 81       	ldd	r24, Y+6	; 0x06
    1c1a:	89 2b       	or	r24, r25
    1c1c:	8c 93       	st	X, r24
				/************************* Select Channel *************************/

				/************************ Start Conversion ************************/
				SET_BIT(REG_ADCSRA, ADCSRA_ADSC);
    1c1e:	a6 e2       	ldi	r26, 0x26	; 38
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e6 e2       	ldi	r30, 0x26	; 38
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	80 64       	ori	r24, 0x40	; 64
    1c2a:	8c 93       	st	X, r24
    1c2c:	0b c0       	rjmp	.+22     	; 0x1c44 <MADC_enStartConversionSynch+0x96>
				/************************ Start Conversion ************************/

				/****** Busy Waiting Until Flag Raised or Exceeded Time Out ******/
				while (((GET_BIT(REG_ADCSRA, ADCSRA_ADIF)) == 0)
						&& (Local_u32Counter < MADC_TIME_OUT)) {
					Local_u32Counter++;
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	9a 81       	ldd	r25, Y+2	; 0x02
    1c32:	ab 81       	ldd	r26, Y+3	; 0x03
    1c34:	bc 81       	ldd	r27, Y+4	; 0x04
    1c36:	01 96       	adiw	r24, 0x01	; 1
    1c38:	a1 1d       	adc	r26, r1
    1c3a:	b1 1d       	adc	r27, r1
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    1c3e:	9a 83       	std	Y+2, r25	; 0x02
    1c40:	ab 83       	std	Y+3, r26	; 0x03
    1c42:	bc 83       	std	Y+4, r27	; 0x04
				/************************ Start Conversion ************************/
				SET_BIT(REG_ADCSRA, ADCSRA_ADSC);
				/************************ Start Conversion ************************/

				/****** Busy Waiting Until Flag Raised or Exceeded Time Out ******/
				while (((GET_BIT(REG_ADCSRA, ADCSRA_ADIF)) == 0)
    1c44:	e6 e2       	ldi	r30, 0x26	; 38
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	82 95       	swap	r24
    1c4c:	8f 70       	andi	r24, 0x0F	; 15
    1c4e:	88 2f       	mov	r24, r24
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	81 70       	andi	r24, 0x01	; 1
    1c54:	90 70       	andi	r25, 0x00	; 0
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	61 f4       	brne	.+24     	; 0x1c72 <MADC_enStartConversionSynch+0xc4>
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5e:	ab 81       	ldd	r26, Y+3	; 0x03
    1c60:	bc 81       	ldd	r27, Y+4	; 0x04
    1c62:	80 35       	cpi	r24, 0x50	; 80
    1c64:	23 ec       	ldi	r18, 0xC3	; 195
    1c66:	92 07       	cpc	r25, r18
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	a2 07       	cpc	r26, r18
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	b2 07       	cpc	r27, r18
    1c70:	f0 f2       	brcs	.-68     	; 0x1c2e <MADC_enStartConversionSynch+0x80>
						&& (Local_u32Counter < MADC_TIME_OUT)) {
					Local_u32Counter++;
				} // while
				/****** Busy Waiting Until Flag Raised or Exceeded Time Out ******/
				if (Local_u32Counter == MADC_TIME_OUT) {
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	9a 81       	ldd	r25, Y+2	; 0x02
    1c76:	ab 81       	ldd	r26, Y+3	; 0x03
    1c78:	bc 81       	ldd	r27, Y+4	; 0x04
    1c7a:	80 35       	cpi	r24, 0x50	; 80
    1c7c:	23 ec       	ldi	r18, 0xC3	; 195
    1c7e:	92 07       	cpc	r25, r18
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	a2 07       	cpc	r26, r18
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	b2 07       	cpc	r27, r18
    1c88:	19 f4       	brne	.+6      	; 0x1c90 <MADC_enStartConversionSynch+0xe2>
					Local_enState = TIME_OUT;
    1c8a:	83 e0       	ldi	r24, 0x03	; 3
    1c8c:	8d 83       	std	Y+5, r24	; 0x05
    1c8e:	11 c0       	rjmp	.+34     	; 0x1cb2 <MADC_enStartConversionSynch+0x104>
				} else {
					/************************** Clear Flag ***************************/
					SET_BIT(REG_ADCSRA, ADCSRA_ADIF);
    1c90:	a6 e2       	ldi	r26, 0x26	; 38
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	e6 e2       	ldi	r30, 0x26	; 38
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	80 61       	ori	r24, 0x10	; 16
    1c9c:	8c 93       	st	X, r24
					/************************** Clear Flag ***************************/

					/************************** Read Value ***************************/
#if(MADC_RESOLUTION == _10BIT)
					*PtrReadValue = (REG_ADC);
    1c9e:	e4 e2       	ldi	r30, 0x24	; 36
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	91 81       	ldd	r25, Z+1	; 0x01
    1ca6:	ef 81       	ldd	r30, Y+7	; 0x07
    1ca8:	f8 85       	ldd	r31, Y+8	; 0x08
    1caa:	91 83       	std	Z+1, r25	; 0x01
    1cac:	80 83       	st	Z, r24
				#error("Wrong Resolution Configuration")
				#endif
					/************************** Read Value ***************************/

					/****************** Return ADC State to Idle *********************/
					MADC_u8FunState = IDLE;
    1cae:	10 92 94 01 	sts	0x0194, r1
					/****************** Return ADC State to Idle *********************/
				} // else flag is Raised
			} // else In Range
		} // else PtrReadValue != NULL
	} // else Function Not Busy
	return Local_enState;
    1cb2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1cb4:	28 96       	adiw	r28, 0x08	; 8
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <MADC_enStartSingleConversionAsynch>:

ErrorState_t MADC_enStartSingleConversionAsynch(Channel_t copy_enChannel,
		u16 *PtrReadValue, void (*ptrNotificationFn)(void)) {
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <MADC_enStartSingleConversionAsynch+0x6>
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <MADC_enStartSingleConversionAsynch+0x8>
    1cce:	00 d0       	rcall	.+0      	; 0x1cd0 <MADC_enStartSingleConversionAsynch+0xa>
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	8a 83       	std	Y+2, r24	; 0x02
    1cd6:	7c 83       	std	Y+4, r23	; 0x04
    1cd8:	6b 83       	std	Y+3, r22	; 0x03
    1cda:	5e 83       	std	Y+6, r21	; 0x06
    1cdc:	4d 83       	std	Y+5, r20	; 0x05
	ErrorState_t Local_enState = SUCCESS;
    1cde:	19 82       	std	Y+1, r1	; 0x01
	if (MADC_u8FunState == BUSY) {
    1ce0:	80 91 94 01 	lds	r24, 0x0194
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	19 f4       	brne	.+6      	; 0x1cee <MADC_enStartSingleConversionAsynch+0x28>
		Local_enState = BUSY_FUNCTION;
    1ce8:	84 e0       	ldi	r24, 0x04	; 4
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	40 c0       	rjmp	.+128    	; 0x1d6e <MADC_enStartSingleConversionAsynch+0xa8>
	} else {
		if (PtrReadValue == NULL || ptrNotificationFn == NULL) {
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	21 f0       	breq	.+8      	; 0x1cfe <MADC_enStartSingleConversionAsynch+0x38>
    1cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	19 f4       	brne	.+6      	; 0x1d04 <MADC_enStartSingleConversionAsynch+0x3e>
			Local_enState = NULL_POINTER;
    1cfe:	82 e0       	ldi	r24, 0x02	; 2
    1d00:	89 83       	std	Y+1, r24	; 0x01
    1d02:	35 c0       	rjmp	.+106    	; 0x1d6e <MADC_enStartSingleConversionAsynch+0xa8>
		} else {
			if (copy_enChannel < 0 || copy_enChannel > 7) {
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	88 30       	cpi	r24, 0x08	; 8
    1d08:	18 f0       	brcs	.+6      	; 0x1d10 <MADC_enStartSingleConversionAsynch+0x4a>
				Local_enState = OUT_OF_RANGE;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	89 83       	std	Y+1, r24	; 0x01
    1d0e:	2f c0       	rjmp	.+94     	; 0x1d6e <MADC_enStartSingleConversionAsynch+0xa8>
			} else {
				/******************* ADC is Busy Now ********************/
				MADC_u8FunState = BUSY;
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	80 93 94 01 	sts	0x0194, r24
				/******************* ADC is Busy Now ********************/

				/****************** Select ISR Source *******************/
				MADC_u8SelectISR = SINGLE_CONVERSION;
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	80 93 95 01 	sts	0x0195, r24
				/****************** Select ISR Source *******************/

				/******************** Select Channel ********************/
				REG_ADMUX &= MUX_MASK;
    1d1c:	a7 e2       	ldi	r26, 0x27	; 39
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e7 e2       	ldi	r30, 0x27	; 39
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	80 7e       	andi	r24, 0xE0	; 224
    1d28:	8c 93       	st	X, r24
				REG_ADMUX |= copy_enChannel;
    1d2a:	a7 e2       	ldi	r26, 0x27	; 39
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	e7 e2       	ldi	r30, 0x27	; 39
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	90 81       	ld	r25, Z
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	89 2b       	or	r24, r25
    1d38:	8c 93       	st	X, r24
				/******************** Select Channel ********************/

				/******************* Enable Interrupt *******************/
				SET_BIT(REG_ADCSRA, ADCSRA_ADIE);
    1d3a:	a6 e2       	ldi	r26, 0x26	; 38
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e6 e2       	ldi	r30, 0x26	; 38
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	88 60       	ori	r24, 0x08	; 8
    1d46:	8c 93       	st	X, r24
				/******************* Enable Interrupt *******************/

				/***** Setting Notification Function and Read Value *****/
				MADC_voidNotificationFn = ptrNotificationFn;
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	90 93 8f 01 	sts	0x018F, r25
    1d50:	80 93 8e 01 	sts	0x018E, r24
				MADC_u16ReadVal = PtrReadValue;
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	9c 81       	ldd	r25, Y+4	; 0x04
    1d58:	90 93 91 01 	sts	0x0191, r25
    1d5c:	80 93 90 01 	sts	0x0190, r24
				/***** Setting Notification Function and Read Value *****/

				/******************* Start Conversion *******************/
				SET_BIT(REG_ADCSRA, ADCSRA_ADSC);
    1d60:	a6 e2       	ldi	r26, 0x26	; 38
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	e6 e2       	ldi	r30, 0x26	; 38
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	80 64       	ori	r24, 0x40	; 64
    1d6c:	8c 93       	st	X, r24
				/******************* Start Conversion *******************/
			} // else In Range
		} // else PtrReadValue != NULL || ptrNotificationFn != NULL
	} // else Function Not Busy
	return Local_enState;
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d70:	26 96       	adiw	r28, 0x06	; 6
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	f8 94       	cli
    1d76:	de bf       	out	0x3e, r29	; 62
    1d78:	0f be       	out	0x3f, r0	; 63
    1d7a:	cd bf       	out	0x3d, r28	; 61
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <MADC_enStartChainConversionAsynch>:

ErrorState_t MADC_enStartChainConversionAsynch(ADC_Chain_t *PtrChain) {
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <MADC_enStartChainConversionAsynch+0x6>
    1d88:	0f 92       	push	r0
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	9b 83       	std	Y+3, r25	; 0x03
    1d90:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    1d92:	19 82       	std	Y+1, r1	; 0x01
	if (MADC_u8FunState == BUSY) {
    1d94:	80 91 94 01 	lds	r24, 0x0194
    1d98:	81 30       	cpi	r24, 0x01	; 1
    1d9a:	19 f4       	brne	.+6      	; 0x1da2 <MADC_enStartChainConversionAsynch+0x20>
		Local_enState = BUSY_FUNCTION;
    1d9c:	84 e0       	ldi	r24, 0x04	; 4
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    1da0:	4f c0       	rjmp	.+158    	; 0x1e40 <MADC_enStartChainConversionAsynch+0xbe>
	} else {
		if (PtrChain == NULL || PtrChain->Ptr_Chain_Channels == NULL
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	9b 81       	ldd	r25, Y+3	; 0x03
    1da6:	00 97       	sbiw	r24, 0x00	; 0
    1da8:	91 f0       	breq	.+36     	; 0x1dce <MADC_enStartChainConversionAsynch+0x4c>
    1daa:	ea 81       	ldd	r30, Y+2	; 0x02
    1dac:	fb 81       	ldd	r31, Y+3	; 0x03
    1dae:	81 81       	ldd	r24, Z+1	; 0x01
    1db0:	92 81       	ldd	r25, Z+2	; 0x02
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	61 f0       	breq	.+24     	; 0x1dce <MADC_enStartChainConversionAsynch+0x4c>
    1db6:	ea 81       	ldd	r30, Y+2	; 0x02
    1db8:	fb 81       	ldd	r31, Y+3	; 0x03
    1dba:	83 81       	ldd	r24, Z+3	; 0x03
    1dbc:	94 81       	ldd	r25, Z+4	; 0x04
    1dbe:	00 97       	sbiw	r24, 0x00	; 0
    1dc0:	31 f0       	breq	.+12     	; 0x1dce <MADC_enStartChainConversionAsynch+0x4c>
    1dc2:	ea 81       	ldd	r30, Y+2	; 0x02
    1dc4:	fb 81       	ldd	r31, Y+3	; 0x03
    1dc6:	81 81       	ldd	r24, Z+1	; 0x01
    1dc8:	92 81       	ldd	r25, Z+2	; 0x02
    1dca:	00 97       	sbiw	r24, 0x00	; 0
    1dcc:	19 f4       	brne	.+6      	; 0x1dd4 <MADC_enStartChainConversionAsynch+0x52>
				|| PtrChain->Ptr_Chain_Readings == NULL
				|| PtrChain->Ptr_Chain_Channels == NULL) {
			Local_enState = NULL_POINTER;
    1dce:	82 e0       	ldi	r24, 0x02	; 2
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    1dd2:	36 c0       	rjmp	.+108    	; 0x1e40 <MADC_enStartChainConversionAsynch+0xbe>
		} else {
			/******************* ADC is Busy Now ********************/
			MADC_u8FunState = BUSY;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	80 93 94 01 	sts	0x0194, r24
			/******************* ADC is Busy Now ********************/

			/****************** Select ISR Source *******************/
			MADC_u8SelectISR = CHAIN_CONVERSION;
    1dda:	82 e0       	ldi	r24, 0x02	; 2
    1ddc:	80 93 95 01 	sts	0x0195, r24
			/****************** Select ISR Source *******************/

			/****************** Set Index to Zero *******************/
			MADC_u8ChainChannelIndex = 0;
    1de0:	10 92 96 01 	sts	0x0196, r1
			/****************** Set Index to Zero *******************/

			/*************** Passing Struct Globally ****************/
			MADC_enChainStruct = PtrChain;
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	9b 81       	ldd	r25, Y+3	; 0x03
    1de8:	90 93 93 01 	sts	0x0193, r25
    1dec:	80 93 92 01 	sts	0x0192, r24
			/*************** Passing Struct Globally ****************/

			/******************** Select Channel ********************/
			REG_ADMUX &= MUX_MASK;
    1df0:	a7 e2       	ldi	r26, 0x27	; 39
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e7 e2       	ldi	r30, 0x27	; 39
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	80 7e       	andi	r24, 0xE0	; 224
    1dfc:	8c 93       	st	X, r24
			REG_ADMUX |= PtrChain->Ptr_Chain_Channels[MADC_u8ChainChannelIndex];
    1dfe:	a7 e2       	ldi	r26, 0x27	; 39
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e7 e2       	ldi	r30, 0x27	; 39
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	40 81       	ld	r20, Z
    1e08:	ea 81       	ldd	r30, Y+2	; 0x02
    1e0a:	fb 81       	ldd	r31, Y+3	; 0x03
    1e0c:	21 81       	ldd	r18, Z+1	; 0x01
    1e0e:	32 81       	ldd	r19, Z+2	; 0x02
    1e10:	80 91 96 01 	lds	r24, 0x0196
    1e14:	88 2f       	mov	r24, r24
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	f9 01       	movw	r30, r18
    1e1a:	e8 0f       	add	r30, r24
    1e1c:	f9 1f       	adc	r31, r25
    1e1e:	80 81       	ld	r24, Z
    1e20:	84 2b       	or	r24, r20
    1e22:	8c 93       	st	X, r24
			/******************** Select Channel ********************/

			/******************* Enable Interrupt *******************/
			SET_BIT(REG_ADCSRA, ADCSRA_ADIE);
    1e24:	a6 e2       	ldi	r26, 0x26	; 38
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e6 e2       	ldi	r30, 0x26	; 38
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	88 60       	ori	r24, 0x08	; 8
    1e30:	8c 93       	st	X, r24
			/******************* Enable Interrupt *******************/

			/******************* Start Conversion *******************/
			SET_BIT(REG_ADCSRA, ADCSRA_ADSC);
    1e32:	a6 e2       	ldi	r26, 0x26	; 38
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e6 e2       	ldi	r30, 0x26	; 38
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	80 64       	ori	r24, 0x40	; 64
    1e3e:	8c 93       	st	X, r24
			/******************* Start Conversion *******************/
		} // else No Pointer == NULL
	} // else Function Not Busy
	return Local_enState;
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <__vector_16>:
/******************************************** ISR ********************************************/
ISR(ADC_vect) {
    1e4e:	1f 92       	push	r1
    1e50:	0f 92       	push	r0
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	0f 92       	push	r0
    1e56:	11 24       	eor	r1, r1
    1e58:	2f 93       	push	r18
    1e5a:	3f 93       	push	r19
    1e5c:	4f 93       	push	r20
    1e5e:	5f 93       	push	r21
    1e60:	6f 93       	push	r22
    1e62:	7f 93       	push	r23
    1e64:	8f 93       	push	r24
    1e66:	9f 93       	push	r25
    1e68:	af 93       	push	r26
    1e6a:	bf 93       	push	r27
    1e6c:	ef 93       	push	r30
    1e6e:	ff 93       	push	r31
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
	if (MADC_u8SelectISR == SINGLE_CONVERSION) {
    1e78:	80 91 95 01 	lds	r24, 0x0195
    1e7c:	81 30       	cpi	r24, 0x01	; 1
    1e7e:	d9 f4       	brne	.+54     	; 0x1eb6 <__vector_16+0x68>
		/********************** Read Value **********************/
#if(MADC_RESOLUTION == _10BIT)
		*MADC_u16ReadVal = REG_ADC;
    1e80:	a0 91 90 01 	lds	r26, 0x0190
    1e84:	b0 91 91 01 	lds	r27, 0x0191
    1e88:	e4 e2       	ldi	r30, 0x24	; 36
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	91 81       	ldd	r25, Z+1	; 0x01
    1e90:	8d 93       	st	X+, r24
    1e92:	9c 93       	st	X, r25
	#error("Wrong Resolution Configuration")
	#endif
		/********************** Read Value **********************/

		/************** Return ADC State to Idle ****************/
		MADC_u8FunState = IDLE;
    1e94:	10 92 94 01 	sts	0x0194, r1
		/************** Return ADC State to Idle ****************/

		/************ Return ISR Selection to None **************/
		MADC_u8SelectISR = NONE;
    1e98:	10 92 95 01 	sts	0x0195, r1
		/************ Return ISR Selection to None **************/

		/************** Call Notification Function **************/
		MADC_voidNotificationFn();
    1e9c:	e0 91 8e 01 	lds	r30, 0x018E
    1ea0:	f0 91 8f 01 	lds	r31, 0x018F
    1ea4:	09 95       	icall
		/************** Call Notification Function **************/

		/******************* Disable Interrupt ******************/
		CLR_BIT(REG_ADCSRA, ADCSRA_ADIE);
    1ea6:	a6 e2       	ldi	r26, 0x26	; 38
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e6 e2       	ldi	r30, 0x26	; 38
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	87 7f       	andi	r24, 0xF7	; 247
    1eb2:	8c 93       	st	X, r24
    1eb4:	60 c0       	rjmp	.+192    	; 0x1f76 <__vector_16+0x128>
		/******************* Disable Interrupt ******************/

	} else if (MADC_u8SelectISR == CHAIN_CONVERSION) {
    1eb6:	80 91 95 01 	lds	r24, 0x0195
    1eba:	82 30       	cpi	r24, 0x02	; 2
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <__vector_16+0x72>
    1ebe:	5b c0       	rjmp	.+182    	; 0x1f76 <__vector_16+0x128>
		/********************** Read Value **********************/
#if(MADC_RESOLUTION == _10BIT)
		MADC_enChainStruct->Ptr_Chain_Readings[MADC_u8ChainChannelIndex] =
    1ec0:	e0 91 92 01 	lds	r30, 0x0192
    1ec4:	f0 91 93 01 	lds	r31, 0x0193
    1ec8:	23 81       	ldd	r18, Z+3	; 0x03
    1eca:	34 81       	ldd	r19, Z+4	; 0x04
    1ecc:	80 91 96 01 	lds	r24, 0x0196
    1ed0:	88 2f       	mov	r24, r24
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	d9 01       	movw	r26, r18
    1eda:	a8 0f       	add	r26, r24
    1edc:	b9 1f       	adc	r27, r25
    1ede:	e4 e2       	ldi	r30, 0x24	; 36
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	91 81       	ldd	r25, Z+1	; 0x01
    1ee6:	11 96       	adiw	r26, 0x01	; 1
    1ee8:	9c 93       	st	X, r25
    1eea:	8e 93       	st	-X, r24
#error("Wrong Resolution Configuration")
#endif
		/********************** Read Value **********************/

		/******************** Increment Index *******************/
		MADC_u8ChainChannelIndex++;
    1eec:	80 91 96 01 	lds	r24, 0x0196
    1ef0:	8f 5f       	subi	r24, 0xFF	; 255
    1ef2:	80 93 96 01 	sts	0x0196, r24
		/******************** Increment Index *******************/

		if (MADC_u8ChainChannelIndex == MADC_enChainStruct->Chain_Size) {
    1ef6:	e0 91 92 01 	lds	r30, 0x0192
    1efa:	f0 91 93 01 	lds	r31, 0x0193
    1efe:	90 81       	ld	r25, Z
    1f00:	80 91 96 01 	lds	r24, 0x0196
    1f04:	98 17       	cp	r25, r24
    1f06:	a1 f4       	brne	.+40     	; 0x1f30 <__vector_16+0xe2>
			/************** Return ADC State to Idle ****************/
			MADC_u8FunState = IDLE;
    1f08:	10 92 94 01 	sts	0x0194, r1
			/************** Return ADC State to Idle ****************/

			/************ Return ISR Selection to None **************/
			MADC_u8SelectISR = NONE;
    1f0c:	10 92 95 01 	sts	0x0195, r1
			/************ Return ISR Selection to None **************/

			/************** Call Notification Function **************/
			MADC_enChainStruct->PtrNotificationFN();
    1f10:	e0 91 92 01 	lds	r30, 0x0192
    1f14:	f0 91 93 01 	lds	r31, 0x0193
    1f18:	05 80       	ldd	r0, Z+5	; 0x05
    1f1a:	f6 81       	ldd	r31, Z+6	; 0x06
    1f1c:	e0 2d       	mov	r30, r0
    1f1e:	09 95       	icall
			/************** Call Notification Function **************/

			/******************* Disable Interrupt ******************/
			CLR_BIT(REG_ADCSRA, ADCSRA_ADIE);
    1f20:	a6 e2       	ldi	r26, 0x26	; 38
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	e6 e2       	ldi	r30, 0x26	; 38
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	87 7f       	andi	r24, 0xF7	; 247
    1f2c:	8c 93       	st	X, r24
    1f2e:	23 c0       	rjmp	.+70     	; 0x1f76 <__vector_16+0x128>
			/******************* Disable Interrupt ******************/
		} else {
			/***************** Select Next Channel ******************/
			REG_ADMUX &= MUX_MASK;
    1f30:	a7 e2       	ldi	r26, 0x27	; 39
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e7 e2       	ldi	r30, 0x27	; 39
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	80 7e       	andi	r24, 0xE0	; 224
    1f3c:	8c 93       	st	X, r24
			REG_ADMUX |=
    1f3e:	a7 e2       	ldi	r26, 0x27	; 39
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	e7 e2       	ldi	r30, 0x27	; 39
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	40 81       	ld	r20, Z
    1f48:	e0 91 92 01 	lds	r30, 0x0192
    1f4c:	f0 91 93 01 	lds	r31, 0x0193
    1f50:	21 81       	ldd	r18, Z+1	; 0x01
    1f52:	32 81       	ldd	r19, Z+2	; 0x02
    1f54:	80 91 96 01 	lds	r24, 0x0196
    1f58:	88 2f       	mov	r24, r24
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	f9 01       	movw	r30, r18
    1f5e:	e8 0f       	add	r30, r24
    1f60:	f9 1f       	adc	r31, r25
    1f62:	80 81       	ld	r24, Z
    1f64:	84 2b       	or	r24, r20
    1f66:	8c 93       	st	X, r24
					MADC_enChainStruct->Ptr_Chain_Channels[MADC_u8ChainChannelIndex];
			/***************** Select Next Channel ******************/

			/******************* Start Conversion *******************/
			SET_BIT(REG_ADCSRA, ADCSRA_ADSC);
    1f68:	a6 e2       	ldi	r26, 0x26	; 38
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	e6 e2       	ldi	r30, 0x26	; 38
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	80 64       	ori	r24, 0x40	; 64
    1f74:	8c 93       	st	X, r24
			/******************* Start Conversion *******************/
		}
	} else {
		// Do Nothing
	}
}
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	ff 91       	pop	r31
    1f7c:	ef 91       	pop	r30
    1f7e:	bf 91       	pop	r27
    1f80:	af 91       	pop	r26
    1f82:	9f 91       	pop	r25
    1f84:	8f 91       	pop	r24
    1f86:	7f 91       	pop	r23
    1f88:	6f 91       	pop	r22
    1f8a:	5f 91       	pop	r21
    1f8c:	4f 91       	pop	r20
    1f8e:	3f 91       	pop	r19
    1f90:	2f 91       	pop	r18
    1f92:	0f 90       	pop	r0
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	0f 90       	pop	r0
    1f98:	1f 90       	pop	r1
    1f9a:	18 95       	reti

00001f9c <MATH_s32Map>:
/**********************************************************************/

#include <STD_TYPES.h>
#include <MATH_HELPER.h>

s32 MATH_s32Map(s32 Copy_s32InputMin, s32 Copy_s32InputMax, s32 Copy_s32OutputMin, s32 Copy_s32OutputMax, s32 Copy_s32InputVal) {
    1f9c:	af 92       	push	r10
    1f9e:	bf 92       	push	r11
    1fa0:	cf 92       	push	r12
    1fa2:	df 92       	push	r13
    1fa4:	ef 92       	push	r14
    1fa6:	ff 92       	push	r15
    1fa8:	0f 93       	push	r16
    1faa:	1f 93       	push	r17
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	60 97       	sbiw	r28, 0x10	; 16
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	69 83       	std	Y+1, r22	; 0x01
    1fc2:	7a 83       	std	Y+2, r23	; 0x02
    1fc4:	8b 83       	std	Y+3, r24	; 0x03
    1fc6:	9c 83       	std	Y+4, r25	; 0x04
    1fc8:	2d 83       	std	Y+5, r18	; 0x05
    1fca:	3e 83       	std	Y+6, r19	; 0x06
    1fcc:	4f 83       	std	Y+7, r20	; 0x07
    1fce:	58 87       	std	Y+8, r21	; 0x08
    1fd0:	e9 86       	std	Y+9, r14	; 0x09
    1fd2:	fa 86       	std	Y+10, r15	; 0x0a
    1fd4:	0b 87       	std	Y+11, r16	; 0x0b
    1fd6:	1c 87       	std	Y+12, r17	; 0x0c
    1fd8:	ad 86       	std	Y+13, r10	; 0x0d
    1fda:	be 86       	std	Y+14, r11	; 0x0e
    1fdc:	cf 86       	std	Y+15, r12	; 0x0f
    1fde:	d8 8a       	std	Y+16, r13	; 0x10
	return ((((Copy_s32OutputMax - Copy_s32OutputMin)
    1fe0:	2d 85       	ldd	r18, Y+13	; 0x0d
    1fe2:	3e 85       	ldd	r19, Y+14	; 0x0e
    1fe4:	4f 85       	ldd	r20, Y+15	; 0x0f
    1fe6:	58 89       	ldd	r21, Y+16	; 0x10
    1fe8:	89 85       	ldd	r24, Y+9	; 0x09
    1fea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fec:	ab 85       	ldd	r26, Y+11	; 0x0b
    1fee:	bc 85       	ldd	r27, Y+12	; 0x0c
    1ff0:	79 01       	movw	r14, r18
    1ff2:	8a 01       	movw	r16, r20
    1ff4:	e8 1a       	sub	r14, r24
    1ff6:	f9 0a       	sbc	r15, r25
    1ff8:	0a 0b       	sbc	r16, r26
    1ffa:	1b 0b       	sbc	r17, r27
    1ffc:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1ffe:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2000:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2002:	58 a1       	ldd	r21, Y+32	; 0x20
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	9a 81       	ldd	r25, Y+2	; 0x02
    2008:	ab 81       	ldd	r26, Y+3	; 0x03
    200a:	bc 81       	ldd	r27, Y+4	; 0x04
    200c:	28 1b       	sub	r18, r24
    200e:	39 0b       	sbc	r19, r25
    2010:	4a 0b       	sbc	r20, r26
    2012:	5b 0b       	sbc	r21, r27
    2014:	c8 01       	movw	r24, r16
    2016:	b7 01       	movw	r22, r14
    2018:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__mulsi3>
    201c:	7b 01       	movw	r14, r22
    201e:	8c 01       	movw	r16, r24
    2020:	2d 81       	ldd	r18, Y+5	; 0x05
    2022:	3e 81       	ldd	r19, Y+6	; 0x06
    2024:	4f 81       	ldd	r20, Y+7	; 0x07
    2026:	58 85       	ldd	r21, Y+8	; 0x08
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	9a 81       	ldd	r25, Y+2	; 0x02
    202c:	ab 81       	ldd	r26, Y+3	; 0x03
    202e:	bc 81       	ldd	r27, Y+4	; 0x04
    2030:	28 1b       	sub	r18, r24
    2032:	39 0b       	sbc	r19, r25
    2034:	4a 0b       	sbc	r20, r26
    2036:	5b 0b       	sbc	r21, r27
    2038:	c8 01       	movw	r24, r16
    203a:	b7 01       	movw	r22, r14
    203c:	0e 94 42 41 	call	0x8284	; 0x8284 <__divmodsi4>
    2040:	da 01       	movw	r26, r20
    2042:	c9 01       	movw	r24, r18
    2044:	9c 01       	movw	r18, r24
    2046:	ad 01       	movw	r20, r26
    2048:	89 85       	ldd	r24, Y+9	; 0x09
    204a:	9a 85       	ldd	r25, Y+10	; 0x0a
    204c:	ab 85       	ldd	r26, Y+11	; 0x0b
    204e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2050:	82 0f       	add	r24, r18
    2052:	93 1f       	adc	r25, r19
    2054:	a4 1f       	adc	r26, r20
    2056:	b5 1f       	adc	r27, r21
			* (Copy_s32InputVal - Copy_s32InputMin))
			/ (Copy_s32InputMax - Copy_s32InputMin)) + Copy_s32OutputMin);
}
    2058:	bc 01       	movw	r22, r24
    205a:	cd 01       	movw	r24, r26
    205c:	60 96       	adiw	r28, 0x10	; 16
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	ff 90       	pop	r15
    2072:	ef 90       	pop	r14
    2074:	df 90       	pop	r13
    2076:	cf 90       	pop	r12
    2078:	bf 90       	pop	r11
    207a:	af 90       	pop	r10
    207c:	08 95       	ret

0000207e <MATH_u32ReverseNum>:

u32 MATH_u32ReverseNum(u32 copy_u32Num) {
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	28 97       	sbiw	r28, 0x08	; 8
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	cd bf       	out	0x3d, r28	; 61
    2092:	6d 83       	std	Y+5, r22	; 0x05
    2094:	7e 83       	std	Y+6, r23	; 0x06
    2096:	8f 83       	std	Y+7, r24	; 0x07
    2098:	98 87       	std	Y+8, r25	; 0x08
	u32 Local_u32ReversedNum = 0;
    209a:	19 82       	std	Y+1, r1	; 0x01
    209c:	1a 82       	std	Y+2, r1	; 0x02
    209e:	1b 82       	std	Y+3, r1	; 0x03
    20a0:	1c 82       	std	Y+4, r1	; 0x04
    20a2:	40 c0       	rjmp	.+128    	; 0x2124 <MATH_u32ReverseNum+0xa6>
	while (copy_u32Num != 0) {
		Local_u32ReversedNum *= 10;
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	9a 81       	ldd	r25, Y+2	; 0x02
    20a8:	ab 81       	ldd	r26, Y+3	; 0x03
    20aa:	bc 81       	ldd	r27, Y+4	; 0x04
    20ac:	2a e0       	ldi	r18, 0x0A	; 10
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e0       	ldi	r20, 0x00	; 0
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	bc 01       	movw	r22, r24
    20b6:	cd 01       	movw	r24, r26
    20b8:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__mulsi3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	89 83       	std	Y+1, r24	; 0x01
    20c2:	9a 83       	std	Y+2, r25	; 0x02
    20c4:	ab 83       	std	Y+3, r26	; 0x03
    20c6:	bc 83       	std	Y+4, r27	; 0x04
		Local_u32ReversedNum += copy_u32Num % 10;
    20c8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ca:	9e 81       	ldd	r25, Y+6	; 0x06
    20cc:	af 81       	ldd	r26, Y+7	; 0x07
    20ce:	b8 85       	ldd	r27, Y+8	; 0x08
    20d0:	2a e0       	ldi	r18, 0x0A	; 10
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e0       	ldi	r20, 0x00	; 0
    20d6:	50 e0       	ldi	r21, 0x00	; 0
    20d8:	bc 01       	movw	r22, r24
    20da:	cd 01       	movw	r24, r26
    20dc:	0e 94 20 41 	call	0x8240	; 0x8240 <__udivmodsi4>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9c 01       	movw	r18, r24
    20e6:	ad 01       	movw	r20, r26
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	9a 81       	ldd	r25, Y+2	; 0x02
    20ec:	ab 81       	ldd	r26, Y+3	; 0x03
    20ee:	bc 81       	ldd	r27, Y+4	; 0x04
    20f0:	82 0f       	add	r24, r18
    20f2:	93 1f       	adc	r25, r19
    20f4:	a4 1f       	adc	r26, r20
    20f6:	b5 1f       	adc	r27, r21
    20f8:	89 83       	std	Y+1, r24	; 0x01
    20fa:	9a 83       	std	Y+2, r25	; 0x02
    20fc:	ab 83       	std	Y+3, r26	; 0x03
    20fe:	bc 83       	std	Y+4, r27	; 0x04
		copy_u32Num /= 10;
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
    2104:	af 81       	ldd	r26, Y+7	; 0x07
    2106:	b8 85       	ldd	r27, Y+8	; 0x08
    2108:	2a e0       	ldi	r18, 0x0A	; 10
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	50 e0       	ldi	r21, 0x00	; 0
    2110:	bc 01       	movw	r22, r24
    2112:	cd 01       	movw	r24, r26
    2114:	0e 94 20 41 	call	0x8240	; 0x8240 <__udivmodsi4>
    2118:	da 01       	movw	r26, r20
    211a:	c9 01       	movw	r24, r18
    211c:	8d 83       	std	Y+5, r24	; 0x05
    211e:	9e 83       	std	Y+6, r25	; 0x06
    2120:	af 83       	std	Y+7, r26	; 0x07
    2122:	b8 87       	std	Y+8, r27	; 0x08
			/ (Copy_s32InputMax - Copy_s32InputMin)) + Copy_s32OutputMin);
}

u32 MATH_u32ReverseNum(u32 copy_u32Num) {
	u32 Local_u32ReversedNum = 0;
	while (copy_u32Num != 0) {
    2124:	8d 81       	ldd	r24, Y+5	; 0x05
    2126:	9e 81       	ldd	r25, Y+6	; 0x06
    2128:	af 81       	ldd	r26, Y+7	; 0x07
    212a:	b8 85       	ldd	r27, Y+8	; 0x08
    212c:	00 97       	sbiw	r24, 0x00	; 0
    212e:	a1 05       	cpc	r26, r1
    2130:	b1 05       	cpc	r27, r1
    2132:	09 f0       	breq	.+2      	; 0x2136 <MATH_u32ReverseNum+0xb8>
    2134:	b7 cf       	rjmp	.-146    	; 0x20a4 <MATH_u32ReverseNum+0x26>
		Local_u32ReversedNum *= 10;
		Local_u32ReversedNum += copy_u32Num % 10;
		copy_u32Num /= 10;
	}
	return Local_u32ReversedNum;
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	9a 81       	ldd	r25, Y+2	; 0x02
    213a:	ab 81       	ldd	r26, Y+3	; 0x03
    213c:	bc 81       	ldd	r27, Y+4	; 0x04
}
    213e:	bc 01       	movw	r22, r24
    2140:	cd 01       	movw	r24, r26
    2142:	28 96       	adiw	r28, 0x08	; 8
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	f8 94       	cli
    2148:	de bf       	out	0x3e, r29	; 62
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	cd bf       	out	0x3d, r28	; 61
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <MATH_voidConcatNum>:

void MATH_voidConcatNum(u8 copy_u8Num, u32 *PtrConcatedNum) {
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	00 d0       	rcall	.+0      	; 0x215a <MATH_voidConcatNum+0x6>
    215a:	0f 92       	push	r0
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	89 83       	std	Y+1, r24	; 0x01
    2162:	7b 83       	std	Y+3, r23	; 0x03
    2164:	6a 83       	std	Y+2, r22	; 0x02
	(*PtrConcatedNum) *= 10;
    2166:	ea 81       	ldd	r30, Y+2	; 0x02
    2168:	fb 81       	ldd	r31, Y+3	; 0x03
    216a:	80 81       	ld	r24, Z
    216c:	91 81       	ldd	r25, Z+1	; 0x01
    216e:	a2 81       	ldd	r26, Z+2	; 0x02
    2170:	b3 81       	ldd	r27, Z+3	; 0x03
    2172:	2a e0       	ldi	r18, 0x0A	; 10
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 e0       	ldi	r20, 0x00	; 0
    2178:	50 e0       	ldi	r21, 0x00	; 0
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__mulsi3>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	ea 81       	ldd	r30, Y+2	; 0x02
    2188:	fb 81       	ldd	r31, Y+3	; 0x03
    218a:	80 83       	st	Z, r24
    218c:	91 83       	std	Z+1, r25	; 0x01
    218e:	a2 83       	std	Z+2, r26	; 0x02
    2190:	b3 83       	std	Z+3, r27	; 0x03
	(*PtrConcatedNum) += copy_u8Num;
    2192:	ea 81       	ldd	r30, Y+2	; 0x02
    2194:	fb 81       	ldd	r31, Y+3	; 0x03
    2196:	20 81       	ld	r18, Z
    2198:	31 81       	ldd	r19, Z+1	; 0x01
    219a:	42 81       	ldd	r20, Z+2	; 0x02
    219c:	53 81       	ldd	r21, Z+3	; 0x03
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	88 2f       	mov	r24, r24
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	a0 e0       	ldi	r26, 0x00	; 0
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	82 0f       	add	r24, r18
    21aa:	93 1f       	adc	r25, r19
    21ac:	a4 1f       	adc	r26, r20
    21ae:	b5 1f       	adc	r27, r21
    21b0:	ea 81       	ldd	r30, Y+2	; 0x02
    21b2:	fb 81       	ldd	r31, Y+3	; 0x03
    21b4:	80 83       	st	Z, r24
    21b6:	91 83       	std	Z+1, r25	; 0x01
    21b8:	a2 83       	std	Z+2, r26	; 0x02
    21ba:	b3 83       	std	Z+3, r27	; 0x03
}
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	08 95       	ret

000021c8 <HSSD_enInit>:
#include <MDIO_interface.h>
#include <HSSD_private.h>
#include <HSSD_config.h>
#include <HSSD_interface.h>

ErrorState_t HSSD_enInit(SSD_t *PtrSSD) {
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	00 d0       	rcall	.+0      	; 0x21ce <HSSD_enInit+0x6>
    21ce:	0f 92       	push	r0
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	9b 83       	std	Y+3, r25	; 0x03
    21d6:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    21d8:	19 82       	std	Y+1, r1	; 0x01
	if (PtrSSD != NULL) {
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	9b 81       	ldd	r25, Y+3	; 0x03
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	09 f4       	brne	.+2      	; 0x21e4 <HSSD_enInit+0x1c>
    21e2:	4b c0       	rjmp	.+150    	; 0x227a <HSSD_enInit+0xb2>
		MDIO_enSetPinDirection(PtrSSD->SSD_Pin_A, OUTPUT);
    21e4:	ea 81       	ldd	r30, Y+2	; 0x02
    21e6:	fb 81       	ldd	r31, Y+3	; 0x03
    21e8:	81 81       	ldd	r24, Z+1	; 0x01
    21ea:	61 e0       	ldi	r22, 0x01	; 1
    21ec:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
		MDIO_enSetPinDirection(PtrSSD->SSD_Pin_B, OUTPUT);
    21f0:	ea 81       	ldd	r30, Y+2	; 0x02
    21f2:	fb 81       	ldd	r31, Y+3	; 0x03
    21f4:	82 81       	ldd	r24, Z+2	; 0x02
    21f6:	61 e0       	ldi	r22, 0x01	; 1
    21f8:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
		MDIO_enSetPinDirection(PtrSSD->SSD_Pin_C, OUTPUT);
    21fc:	ea 81       	ldd	r30, Y+2	; 0x02
    21fe:	fb 81       	ldd	r31, Y+3	; 0x03
    2200:	83 81       	ldd	r24, Z+3	; 0x03
    2202:	61 e0       	ldi	r22, 0x01	; 1
    2204:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
		MDIO_enSetPinDirection(PtrSSD->SSD_Pin_D, OUTPUT);
    2208:	ea 81       	ldd	r30, Y+2	; 0x02
    220a:	fb 81       	ldd	r31, Y+3	; 0x03
    220c:	84 81       	ldd	r24, Z+4	; 0x04
    220e:	61 e0       	ldi	r22, 0x01	; 1
    2210:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
		MDIO_enSetPinDirection(PtrSSD->SSD_Pin_E, OUTPUT);
    2214:	ea 81       	ldd	r30, Y+2	; 0x02
    2216:	fb 81       	ldd	r31, Y+3	; 0x03
    2218:	85 81       	ldd	r24, Z+5	; 0x05
    221a:	61 e0       	ldi	r22, 0x01	; 1
    221c:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
		MDIO_enSetPinDirection(PtrSSD->SSD_Pin_F, OUTPUT);
    2220:	ea 81       	ldd	r30, Y+2	; 0x02
    2222:	fb 81       	ldd	r31, Y+3	; 0x03
    2224:	86 81       	ldd	r24, Z+6	; 0x06
    2226:	61 e0       	ldi	r22, 0x01	; 1
    2228:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
		MDIO_enSetPinDirection(PtrSSD->SSD_Pin_G, OUTPUT);
    222c:	ea 81       	ldd	r30, Y+2	; 0x02
    222e:	fb 81       	ldd	r31, Y+3	; 0x03
    2230:	87 81       	ldd	r24, Z+7	; 0x07
    2232:	61 e0       	ldi	r22, 0x01	; 1
    2234:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
		MDIO_enSetPinDirection(PtrSSD->SSD_Pin_EN, OUTPUT);
    2238:	ea 81       	ldd	r30, Y+2	; 0x02
    223a:	fb 81       	ldd	r31, Y+3	; 0x03
    223c:	80 85       	ldd	r24, Z+8	; 0x08
    223e:	61 e0       	ldi	r22, 0x01	; 1
    2240:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
		if (PtrSSD->SSD_Type == CC) {
    2244:	ea 81       	ldd	r30, Y+2	; 0x02
    2246:	fb 81       	ldd	r31, Y+3	; 0x03
    2248:	80 81       	ld	r24, Z
    224a:	88 23       	and	r24, r24
    224c:	39 f4       	brne	.+14     	; 0x225c <HSSD_enInit+0x94>
			// Initial Value for Enable in CC --> High
			MDIO_enSetPinValue(PtrSSD->SSD_Pin_EN, HIGH);
    224e:	ea 81       	ldd	r30, Y+2	; 0x02
    2250:	fb 81       	ldd	r31, Y+3	; 0x03
    2252:	80 85       	ldd	r24, Z+8	; 0x08
    2254:	61 e0       	ldi	r22, 0x01	; 1
    2256:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    225a:	11 c0       	rjmp	.+34     	; 0x227e <HSSD_enInit+0xb6>
		} else if (PtrSSD->SSD_Type == CA) {
    225c:	ea 81       	ldd	r30, Y+2	; 0x02
    225e:	fb 81       	ldd	r31, Y+3	; 0x03
    2260:	80 81       	ld	r24, Z
    2262:	81 30       	cpi	r24, 0x01	; 1
    2264:	39 f4       	brne	.+14     	; 0x2274 <HSSD_enInit+0xac>
			// Initial Value for Enable in CA --> Low
			MDIO_enSetPinValue(PtrSSD->SSD_Pin_EN, LOW);
    2266:	ea 81       	ldd	r30, Y+2	; 0x02
    2268:	fb 81       	ldd	r31, Y+3	; 0x03
    226a:	80 85       	ldd	r24, Z+8	; 0x08
    226c:	60 e0       	ldi	r22, 0x00	; 0
    226e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    2272:	05 c0       	rjmp	.+10     	; 0x227e <HSSD_enInit+0xb6>
		} else {
			Local_enState = OUT_OF_RANGE;
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	02 c0       	rjmp	.+4      	; 0x227e <HSSD_enInit+0xb6>
		}
	} else {
		Local_enState = NULL_POINTER;
    227a:	82 e0       	ldi	r24, 0x02	; 2
    227c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enState;
    227e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <HSSD_enEnable>:

ErrorState_t HSSD_enEnable(SSD_t *PtrSSD) {
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	00 d0       	rcall	.+0      	; 0x2292 <HSSD_enEnable+0x6>
    2292:	0f 92       	push	r0
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	9b 83       	std	Y+3, r25	; 0x03
    229a:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    229c:	19 82       	std	Y+1, r1	; 0x01
	if (PtrSSD != NULL) {
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	9b 81       	ldd	r25, Y+3	; 0x03
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	d9 f0       	breq	.+54     	; 0x22dc <HSSD_enEnable+0x50>
		if (PtrSSD->SSD_Type == CC) {
    22a6:	ea 81       	ldd	r30, Y+2	; 0x02
    22a8:	fb 81       	ldd	r31, Y+3	; 0x03
    22aa:	80 81       	ld	r24, Z
    22ac:	88 23       	and	r24, r24
    22ae:	39 f4       	brne	.+14     	; 0x22be <HSSD_enEnable+0x32>
			MDIO_enSetPinValue(PtrSSD->SSD_Pin_EN, LOW);
    22b0:	ea 81       	ldd	r30, Y+2	; 0x02
    22b2:	fb 81       	ldd	r31, Y+3	; 0x03
    22b4:	80 85       	ldd	r24, Z+8	; 0x08
    22b6:	60 e0       	ldi	r22, 0x00	; 0
    22b8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    22bc:	11 c0       	rjmp	.+34     	; 0x22e0 <HSSD_enEnable+0x54>
		} else if (PtrSSD->SSD_Type == CA) {
    22be:	ea 81       	ldd	r30, Y+2	; 0x02
    22c0:	fb 81       	ldd	r31, Y+3	; 0x03
    22c2:	80 81       	ld	r24, Z
    22c4:	81 30       	cpi	r24, 0x01	; 1
    22c6:	39 f4       	brne	.+14     	; 0x22d6 <HSSD_enEnable+0x4a>
			MDIO_enSetPinValue(PtrSSD->SSD_Pin_EN, HIGH);
    22c8:	ea 81       	ldd	r30, Y+2	; 0x02
    22ca:	fb 81       	ldd	r31, Y+3	; 0x03
    22cc:	80 85       	ldd	r24, Z+8	; 0x08
    22ce:	61 e0       	ldi	r22, 0x01	; 1
    22d0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    22d4:	05 c0       	rjmp	.+10     	; 0x22e0 <HSSD_enEnable+0x54>
		} else {
			Local_enState = OUT_OF_RANGE;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	89 83       	std	Y+1, r24	; 0x01
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <HSSD_enEnable+0x54>
		}
	} // if --> PtrSSD != NULL
	else {
		Local_enState = NULL_POINTER;
    22dc:	82 e0       	ldi	r24, 0x02	; 2
    22de:	89 83       	std	Y+1, r24	; 0x01
	} // else --> PtrSSD == NULL
	return Local_enState;
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	0f 90       	pop	r0
    22e8:	cf 91       	pop	r28
    22ea:	df 91       	pop	r29
    22ec:	08 95       	ret

000022ee <HSSD_enDisable>:

ErrorState_t HSSD_enDisable(SSD_t *PtrSSD) {
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	00 d0       	rcall	.+0      	; 0x22f4 <HSSD_enDisable+0x6>
    22f4:	0f 92       	push	r0
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
    22fa:	9b 83       	std	Y+3, r25	; 0x03
    22fc:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    22fe:	19 82       	std	Y+1, r1	; 0x01
	if (PtrSSD != NULL) {
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	9b 81       	ldd	r25, Y+3	; 0x03
    2304:	00 97       	sbiw	r24, 0x00	; 0
    2306:	d9 f0       	breq	.+54     	; 0x233e <HSSD_enDisable+0x50>
		if (PtrSSD->SSD_Type == CC) {
    2308:	ea 81       	ldd	r30, Y+2	; 0x02
    230a:	fb 81       	ldd	r31, Y+3	; 0x03
    230c:	80 81       	ld	r24, Z
    230e:	88 23       	and	r24, r24
    2310:	39 f4       	brne	.+14     	; 0x2320 <HSSD_enDisable+0x32>
			MDIO_enSetPinValue(PtrSSD->SSD_Pin_EN, HIGH);
    2312:	ea 81       	ldd	r30, Y+2	; 0x02
    2314:	fb 81       	ldd	r31, Y+3	; 0x03
    2316:	80 85       	ldd	r24, Z+8	; 0x08
    2318:	61 e0       	ldi	r22, 0x01	; 1
    231a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    231e:	11 c0       	rjmp	.+34     	; 0x2342 <HSSD_enDisable+0x54>
		} else if (PtrSSD->SSD_Type == CA) {
    2320:	ea 81       	ldd	r30, Y+2	; 0x02
    2322:	fb 81       	ldd	r31, Y+3	; 0x03
    2324:	80 81       	ld	r24, Z
    2326:	81 30       	cpi	r24, 0x01	; 1
    2328:	39 f4       	brne	.+14     	; 0x2338 <HSSD_enDisable+0x4a>
			MDIO_enSetPinValue(PtrSSD->SSD_Pin_EN, LOW);
    232a:	ea 81       	ldd	r30, Y+2	; 0x02
    232c:	fb 81       	ldd	r31, Y+3	; 0x03
    232e:	80 85       	ldd	r24, Z+8	; 0x08
    2330:	60 e0       	ldi	r22, 0x00	; 0
    2332:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    2336:	05 c0       	rjmp	.+10     	; 0x2342 <HSSD_enDisable+0x54>
		} else {
			Local_enState = OUT_OF_RANGE;
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	89 83       	std	Y+1, r24	; 0x01
    233c:	02 c0       	rjmp	.+4      	; 0x2342 <HSSD_enDisable+0x54>
		}
	} // if --> PtrSSD != NULL
	else {
		Local_enState = NULL_POINTER;
    233e:	82 e0       	ldi	r24, 0x02	; 2
    2340:	89 83       	std	Y+1, r24	; 0x01
	} // else --> PtrSSD == NULL
	return Local_enState;
    2342:	89 81       	ldd	r24, Y+1	; 0x01
}
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <HSSD_enDisplayNumber>:

ErrorState_t HSSD_enDisplayNumber(u8 copy_u8Number, SSD_t *PtrSSD) {
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	2a 97       	sbiw	r28, 0x0a	; 10
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	8a 83       	std	Y+2, r24	; 0x02
    2366:	7c 83       	std	Y+4, r23	; 0x04
    2368:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_enState = SUCCESS;
    236a:	19 82       	std	Y+1, r1	; 0x01
	if (copy_u8Number < 0 || copy_u8Number > 9) {
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
    236e:	8a 30       	cpi	r24, 0x0A	; 10
    2370:	18 f0       	brcs	.+6      	; 0x2378 <HSSD_enDisplayNumber+0x28>
		Local_enState = OUT_OF_RANGE;
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	89 83       	std	Y+1, r24	; 0x01
    2376:	1c c4       	rjmp	.+2104   	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
	} else {
		if (PtrSSD != NULL) {
    2378:	8b 81       	ldd	r24, Y+3	; 0x03
    237a:	9c 81       	ldd	r25, Y+4	; 0x04
    237c:	00 97       	sbiw	r24, 0x00	; 0
    237e:	09 f4       	brne	.+2      	; 0x2382 <HSSD_enDisplayNumber+0x32>
    2380:	15 c4       	rjmp	.+2090   	; 0x2bac <HSSD_enDisplayNumber+0x85c>
			switch (PtrSSD->SSD_Type) {
    2382:	eb 81       	ldd	r30, Y+3	; 0x03
    2384:	fc 81       	ldd	r31, Y+4	; 0x04
    2386:	80 81       	ld	r24, Z
    2388:	28 2f       	mov	r18, r24
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	3a 87       	std	Y+10, r19	; 0x0a
    238e:	29 87       	std	Y+9, r18	; 0x09
    2390:	89 85       	ldd	r24, Y+9	; 0x09
    2392:	9a 85       	ldd	r25, Y+10	; 0x0a
    2394:	00 97       	sbiw	r24, 0x00	; 0
    2396:	39 f0       	breq	.+14     	; 0x23a6 <HSSD_enDisplayNumber+0x56>
    2398:	29 85       	ldd	r18, Y+9	; 0x09
    239a:	3a 85       	ldd	r19, Y+10	; 0x0a
    239c:	21 30       	cpi	r18, 0x01	; 1
    239e:	31 05       	cpc	r19, r1
    23a0:	09 f4       	brne	.+2      	; 0x23a4 <HSSD_enDisplayNumber+0x54>
    23a2:	01 c2       	rjmp	.+1026   	; 0x27a6 <HSSD_enDisplayNumber+0x456>
    23a4:	00 c4       	rjmp	.+2048   	; 0x2ba6 <HSSD_enDisplayNumber+0x856>
			case CC:
				switch (copy_u8Number) {
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	38 87       	std	Y+8, r19	; 0x08
    23ae:	2f 83       	std	Y+7, r18	; 0x07
    23b0:	8f 81       	ldd	r24, Y+7	; 0x07
    23b2:	98 85       	ldd	r25, Y+8	; 0x08
    23b4:	84 30       	cpi	r24, 0x04	; 4
    23b6:	91 05       	cpc	r25, r1
    23b8:	09 f4       	brne	.+2      	; 0x23bc <HSSD_enDisplayNumber+0x6c>
    23ba:	f3 c0       	rjmp	.+486    	; 0x25a2 <HSSD_enDisplayNumber+0x252>
    23bc:	2f 81       	ldd	r18, Y+7	; 0x07
    23be:	38 85       	ldd	r19, Y+8	; 0x08
    23c0:	25 30       	cpi	r18, 0x05	; 5
    23c2:	31 05       	cpc	r19, r1
    23c4:	ec f4       	brge	.+58     	; 0x2400 <HSSD_enDisplayNumber+0xb0>
    23c6:	8f 81       	ldd	r24, Y+7	; 0x07
    23c8:	98 85       	ldd	r25, Y+8	; 0x08
    23ca:	81 30       	cpi	r24, 0x01	; 1
    23cc:	91 05       	cpc	r25, r1
    23ce:	09 f4       	brne	.+2      	; 0x23d2 <HSSD_enDisplayNumber+0x82>
    23d0:	67 c0       	rjmp	.+206    	; 0x24a0 <HSSD_enDisplayNumber+0x150>
    23d2:	2f 81       	ldd	r18, Y+7	; 0x07
    23d4:	38 85       	ldd	r19, Y+8	; 0x08
    23d6:	22 30       	cpi	r18, 0x02	; 2
    23d8:	31 05       	cpc	r19, r1
    23da:	2c f4       	brge	.+10     	; 0x23e6 <HSSD_enDisplayNumber+0x96>
    23dc:	8f 81       	ldd	r24, Y+7	; 0x07
    23de:	98 85       	ldd	r25, Y+8	; 0x08
    23e0:	00 97       	sbiw	r24, 0x00	; 0
    23e2:	99 f1       	breq	.+102    	; 0x244a <HSSD_enDisplayNumber+0xfa>
    23e4:	e5 c3       	rjmp	.+1994   	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
    23e6:	2f 81       	ldd	r18, Y+7	; 0x07
    23e8:	38 85       	ldd	r19, Y+8	; 0x08
    23ea:	22 30       	cpi	r18, 0x02	; 2
    23ec:	31 05       	cpc	r19, r1
    23ee:	09 f4       	brne	.+2      	; 0x23f2 <HSSD_enDisplayNumber+0xa2>
    23f0:	82 c0       	rjmp	.+260    	; 0x24f6 <HSSD_enDisplayNumber+0x1a6>
    23f2:	8f 81       	ldd	r24, Y+7	; 0x07
    23f4:	98 85       	ldd	r25, Y+8	; 0x08
    23f6:	83 30       	cpi	r24, 0x03	; 3
    23f8:	91 05       	cpc	r25, r1
    23fa:	09 f4       	brne	.+2      	; 0x23fe <HSSD_enDisplayNumber+0xae>
    23fc:	a7 c0       	rjmp	.+334    	; 0x254c <HSSD_enDisplayNumber+0x1fc>
    23fe:	d8 c3       	rjmp	.+1968   	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
    2400:	2f 81       	ldd	r18, Y+7	; 0x07
    2402:	38 85       	ldd	r19, Y+8	; 0x08
    2404:	27 30       	cpi	r18, 0x07	; 7
    2406:	31 05       	cpc	r19, r1
    2408:	09 f4       	brne	.+2      	; 0x240c <HSSD_enDisplayNumber+0xbc>
    240a:	4c c1       	rjmp	.+664    	; 0x26a4 <HSSD_enDisplayNumber+0x354>
    240c:	8f 81       	ldd	r24, Y+7	; 0x07
    240e:	98 85       	ldd	r25, Y+8	; 0x08
    2410:	88 30       	cpi	r24, 0x08	; 8
    2412:	91 05       	cpc	r25, r1
    2414:	6c f4       	brge	.+26     	; 0x2430 <HSSD_enDisplayNumber+0xe0>
    2416:	2f 81       	ldd	r18, Y+7	; 0x07
    2418:	38 85       	ldd	r19, Y+8	; 0x08
    241a:	25 30       	cpi	r18, 0x05	; 5
    241c:	31 05       	cpc	r19, r1
    241e:	09 f4       	brne	.+2      	; 0x2422 <HSSD_enDisplayNumber+0xd2>
    2420:	eb c0       	rjmp	.+470    	; 0x25f8 <HSSD_enDisplayNumber+0x2a8>
    2422:	8f 81       	ldd	r24, Y+7	; 0x07
    2424:	98 85       	ldd	r25, Y+8	; 0x08
    2426:	86 30       	cpi	r24, 0x06	; 6
    2428:	91 05       	cpc	r25, r1
    242a:	09 f4       	brne	.+2      	; 0x242e <HSSD_enDisplayNumber+0xde>
    242c:	10 c1       	rjmp	.+544    	; 0x264e <HSSD_enDisplayNumber+0x2fe>
    242e:	c0 c3       	rjmp	.+1920   	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
    2430:	2f 81       	ldd	r18, Y+7	; 0x07
    2432:	38 85       	ldd	r19, Y+8	; 0x08
    2434:	28 30       	cpi	r18, 0x08	; 8
    2436:	31 05       	cpc	r19, r1
    2438:	09 f4       	brne	.+2      	; 0x243c <HSSD_enDisplayNumber+0xec>
    243a:	5f c1       	rjmp	.+702    	; 0x26fa <HSSD_enDisplayNumber+0x3aa>
    243c:	8f 81       	ldd	r24, Y+7	; 0x07
    243e:	98 85       	ldd	r25, Y+8	; 0x08
    2440:	89 30       	cpi	r24, 0x09	; 9
    2442:	91 05       	cpc	r25, r1
    2444:	09 f4       	brne	.+2      	; 0x2448 <HSSD_enDisplayNumber+0xf8>
    2446:	84 c1       	rjmp	.+776    	; 0x2750 <HSSD_enDisplayNumber+0x400>
    2448:	b3 c3       	rjmp	.+1894   	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
				case 0:
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_A, HIGH);
    244a:	eb 81       	ldd	r30, Y+3	; 0x03
    244c:	fc 81       	ldd	r31, Y+4	; 0x04
    244e:	81 81       	ldd	r24, Z+1	; 0x01
    2450:	61 e0       	ldi	r22, 0x01	; 1
    2452:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_B, HIGH);
    2456:	eb 81       	ldd	r30, Y+3	; 0x03
    2458:	fc 81       	ldd	r31, Y+4	; 0x04
    245a:	82 81       	ldd	r24, Z+2	; 0x02
    245c:	61 e0       	ldi	r22, 0x01	; 1
    245e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_C, HIGH);
    2462:	eb 81       	ldd	r30, Y+3	; 0x03
    2464:	fc 81       	ldd	r31, Y+4	; 0x04
    2466:	83 81       	ldd	r24, Z+3	; 0x03
    2468:	61 e0       	ldi	r22, 0x01	; 1
    246a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_D, HIGH);
    246e:	eb 81       	ldd	r30, Y+3	; 0x03
    2470:	fc 81       	ldd	r31, Y+4	; 0x04
    2472:	84 81       	ldd	r24, Z+4	; 0x04
    2474:	61 e0       	ldi	r22, 0x01	; 1
    2476:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_E, HIGH);
    247a:	eb 81       	ldd	r30, Y+3	; 0x03
    247c:	fc 81       	ldd	r31, Y+4	; 0x04
    247e:	85 81       	ldd	r24, Z+5	; 0x05
    2480:	61 e0       	ldi	r22, 0x01	; 1
    2482:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_F, HIGH);
    2486:	eb 81       	ldd	r30, Y+3	; 0x03
    2488:	fc 81       	ldd	r31, Y+4	; 0x04
    248a:	86 81       	ldd	r24, Z+6	; 0x06
    248c:	61 e0       	ldi	r22, 0x01	; 1
    248e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_G, LOW);
    2492:	eb 81       	ldd	r30, Y+3	; 0x03
    2494:	fc 81       	ldd	r31, Y+4	; 0x04
    2496:	87 81       	ldd	r24, Z+7	; 0x07
    2498:	60 e0       	ldi	r22, 0x00	; 0
    249a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    249e:	88 c3       	rjmp	.+1808   	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
					break;
				case 1:
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_A, LOW);
    24a0:	eb 81       	ldd	r30, Y+3	; 0x03
    24a2:	fc 81       	ldd	r31, Y+4	; 0x04
    24a4:	81 81       	ldd	r24, Z+1	; 0x01
    24a6:	60 e0       	ldi	r22, 0x00	; 0
    24a8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_B, HIGH);
    24ac:	eb 81       	ldd	r30, Y+3	; 0x03
    24ae:	fc 81       	ldd	r31, Y+4	; 0x04
    24b0:	82 81       	ldd	r24, Z+2	; 0x02
    24b2:	61 e0       	ldi	r22, 0x01	; 1
    24b4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_C, HIGH);
    24b8:	eb 81       	ldd	r30, Y+3	; 0x03
    24ba:	fc 81       	ldd	r31, Y+4	; 0x04
    24bc:	83 81       	ldd	r24, Z+3	; 0x03
    24be:	61 e0       	ldi	r22, 0x01	; 1
    24c0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_D, LOW);
    24c4:	eb 81       	ldd	r30, Y+3	; 0x03
    24c6:	fc 81       	ldd	r31, Y+4	; 0x04
    24c8:	84 81       	ldd	r24, Z+4	; 0x04
    24ca:	60 e0       	ldi	r22, 0x00	; 0
    24cc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_E, LOW);
    24d0:	eb 81       	ldd	r30, Y+3	; 0x03
    24d2:	fc 81       	ldd	r31, Y+4	; 0x04
    24d4:	85 81       	ldd	r24, Z+5	; 0x05
    24d6:	60 e0       	ldi	r22, 0x00	; 0
    24d8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_F, LOW);
    24dc:	eb 81       	ldd	r30, Y+3	; 0x03
    24de:	fc 81       	ldd	r31, Y+4	; 0x04
    24e0:	86 81       	ldd	r24, Z+6	; 0x06
    24e2:	60 e0       	ldi	r22, 0x00	; 0
    24e4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_G, LOW);
    24e8:	eb 81       	ldd	r30, Y+3	; 0x03
    24ea:	fc 81       	ldd	r31, Y+4	; 0x04
    24ec:	87 81       	ldd	r24, Z+7	; 0x07
    24ee:	60 e0       	ldi	r22, 0x00	; 0
    24f0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    24f4:	5d c3       	rjmp	.+1722   	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
					break;
				case 2:
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_A, HIGH);
    24f6:	eb 81       	ldd	r30, Y+3	; 0x03
    24f8:	fc 81       	ldd	r31, Y+4	; 0x04
    24fa:	81 81       	ldd	r24, Z+1	; 0x01
    24fc:	61 e0       	ldi	r22, 0x01	; 1
    24fe:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_B, HIGH);
    2502:	eb 81       	ldd	r30, Y+3	; 0x03
    2504:	fc 81       	ldd	r31, Y+4	; 0x04
    2506:	82 81       	ldd	r24, Z+2	; 0x02
    2508:	61 e0       	ldi	r22, 0x01	; 1
    250a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_C, LOW);
    250e:	eb 81       	ldd	r30, Y+3	; 0x03
    2510:	fc 81       	ldd	r31, Y+4	; 0x04
    2512:	83 81       	ldd	r24, Z+3	; 0x03
    2514:	60 e0       	ldi	r22, 0x00	; 0
    2516:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_D, HIGH);
    251a:	eb 81       	ldd	r30, Y+3	; 0x03
    251c:	fc 81       	ldd	r31, Y+4	; 0x04
    251e:	84 81       	ldd	r24, Z+4	; 0x04
    2520:	61 e0       	ldi	r22, 0x01	; 1
    2522:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_E, HIGH);
    2526:	eb 81       	ldd	r30, Y+3	; 0x03
    2528:	fc 81       	ldd	r31, Y+4	; 0x04
    252a:	85 81       	ldd	r24, Z+5	; 0x05
    252c:	61 e0       	ldi	r22, 0x01	; 1
    252e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_F, LOW);
    2532:	eb 81       	ldd	r30, Y+3	; 0x03
    2534:	fc 81       	ldd	r31, Y+4	; 0x04
    2536:	86 81       	ldd	r24, Z+6	; 0x06
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_G, HIGH);
    253e:	eb 81       	ldd	r30, Y+3	; 0x03
    2540:	fc 81       	ldd	r31, Y+4	; 0x04
    2542:	87 81       	ldd	r24, Z+7	; 0x07
    2544:	61 e0       	ldi	r22, 0x01	; 1
    2546:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    254a:	32 c3       	rjmp	.+1636   	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
					break;
				case 3:
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_A, HIGH);
    254c:	eb 81       	ldd	r30, Y+3	; 0x03
    254e:	fc 81       	ldd	r31, Y+4	; 0x04
    2550:	81 81       	ldd	r24, Z+1	; 0x01
    2552:	61 e0       	ldi	r22, 0x01	; 1
    2554:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_B, HIGH);
    2558:	eb 81       	ldd	r30, Y+3	; 0x03
    255a:	fc 81       	ldd	r31, Y+4	; 0x04
    255c:	82 81       	ldd	r24, Z+2	; 0x02
    255e:	61 e0       	ldi	r22, 0x01	; 1
    2560:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_C, HIGH);
    2564:	eb 81       	ldd	r30, Y+3	; 0x03
    2566:	fc 81       	ldd	r31, Y+4	; 0x04
    2568:	83 81       	ldd	r24, Z+3	; 0x03
    256a:	61 e0       	ldi	r22, 0x01	; 1
    256c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_D, HIGH);
    2570:	eb 81       	ldd	r30, Y+3	; 0x03
    2572:	fc 81       	ldd	r31, Y+4	; 0x04
    2574:	84 81       	ldd	r24, Z+4	; 0x04
    2576:	61 e0       	ldi	r22, 0x01	; 1
    2578:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_E, LOW);
    257c:	eb 81       	ldd	r30, Y+3	; 0x03
    257e:	fc 81       	ldd	r31, Y+4	; 0x04
    2580:	85 81       	ldd	r24, Z+5	; 0x05
    2582:	60 e0       	ldi	r22, 0x00	; 0
    2584:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_F, LOW);
    2588:	eb 81       	ldd	r30, Y+3	; 0x03
    258a:	fc 81       	ldd	r31, Y+4	; 0x04
    258c:	86 81       	ldd	r24, Z+6	; 0x06
    258e:	60 e0       	ldi	r22, 0x00	; 0
    2590:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_G, HIGH);
    2594:	eb 81       	ldd	r30, Y+3	; 0x03
    2596:	fc 81       	ldd	r31, Y+4	; 0x04
    2598:	87 81       	ldd	r24, Z+7	; 0x07
    259a:	61 e0       	ldi	r22, 0x01	; 1
    259c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    25a0:	07 c3       	rjmp	.+1550   	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
					break;
				case 4:
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_A, LOW);
    25a2:	eb 81       	ldd	r30, Y+3	; 0x03
    25a4:	fc 81       	ldd	r31, Y+4	; 0x04
    25a6:	81 81       	ldd	r24, Z+1	; 0x01
    25a8:	60 e0       	ldi	r22, 0x00	; 0
    25aa:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_B, HIGH);
    25ae:	eb 81       	ldd	r30, Y+3	; 0x03
    25b0:	fc 81       	ldd	r31, Y+4	; 0x04
    25b2:	82 81       	ldd	r24, Z+2	; 0x02
    25b4:	61 e0       	ldi	r22, 0x01	; 1
    25b6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_C, HIGH);
    25ba:	eb 81       	ldd	r30, Y+3	; 0x03
    25bc:	fc 81       	ldd	r31, Y+4	; 0x04
    25be:	83 81       	ldd	r24, Z+3	; 0x03
    25c0:	61 e0       	ldi	r22, 0x01	; 1
    25c2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_D, LOW);
    25c6:	eb 81       	ldd	r30, Y+3	; 0x03
    25c8:	fc 81       	ldd	r31, Y+4	; 0x04
    25ca:	84 81       	ldd	r24, Z+4	; 0x04
    25cc:	60 e0       	ldi	r22, 0x00	; 0
    25ce:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_E, LOW);
    25d2:	eb 81       	ldd	r30, Y+3	; 0x03
    25d4:	fc 81       	ldd	r31, Y+4	; 0x04
    25d6:	85 81       	ldd	r24, Z+5	; 0x05
    25d8:	60 e0       	ldi	r22, 0x00	; 0
    25da:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_F, HIGH);
    25de:	eb 81       	ldd	r30, Y+3	; 0x03
    25e0:	fc 81       	ldd	r31, Y+4	; 0x04
    25e2:	86 81       	ldd	r24, Z+6	; 0x06
    25e4:	61 e0       	ldi	r22, 0x01	; 1
    25e6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_G, HIGH);
    25ea:	eb 81       	ldd	r30, Y+3	; 0x03
    25ec:	fc 81       	ldd	r31, Y+4	; 0x04
    25ee:	87 81       	ldd	r24, Z+7	; 0x07
    25f0:	61 e0       	ldi	r22, 0x01	; 1
    25f2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    25f6:	dc c2       	rjmp	.+1464   	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
					break;
				case 5:
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_A, HIGH);
    25f8:	eb 81       	ldd	r30, Y+3	; 0x03
    25fa:	fc 81       	ldd	r31, Y+4	; 0x04
    25fc:	81 81       	ldd	r24, Z+1	; 0x01
    25fe:	61 e0       	ldi	r22, 0x01	; 1
    2600:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_B, LOW);
    2604:	eb 81       	ldd	r30, Y+3	; 0x03
    2606:	fc 81       	ldd	r31, Y+4	; 0x04
    2608:	82 81       	ldd	r24, Z+2	; 0x02
    260a:	60 e0       	ldi	r22, 0x00	; 0
    260c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_C, HIGH);
    2610:	eb 81       	ldd	r30, Y+3	; 0x03
    2612:	fc 81       	ldd	r31, Y+4	; 0x04
    2614:	83 81       	ldd	r24, Z+3	; 0x03
    2616:	61 e0       	ldi	r22, 0x01	; 1
    2618:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_D, HIGH);
    261c:	eb 81       	ldd	r30, Y+3	; 0x03
    261e:	fc 81       	ldd	r31, Y+4	; 0x04
    2620:	84 81       	ldd	r24, Z+4	; 0x04
    2622:	61 e0       	ldi	r22, 0x01	; 1
    2624:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_E, LOW);
    2628:	eb 81       	ldd	r30, Y+3	; 0x03
    262a:	fc 81       	ldd	r31, Y+4	; 0x04
    262c:	85 81       	ldd	r24, Z+5	; 0x05
    262e:	60 e0       	ldi	r22, 0x00	; 0
    2630:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_F, HIGH);
    2634:	eb 81       	ldd	r30, Y+3	; 0x03
    2636:	fc 81       	ldd	r31, Y+4	; 0x04
    2638:	86 81       	ldd	r24, Z+6	; 0x06
    263a:	61 e0       	ldi	r22, 0x01	; 1
    263c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_G, HIGH);
    2640:	eb 81       	ldd	r30, Y+3	; 0x03
    2642:	fc 81       	ldd	r31, Y+4	; 0x04
    2644:	87 81       	ldd	r24, Z+7	; 0x07
    2646:	61 e0       	ldi	r22, 0x01	; 1
    2648:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    264c:	b1 c2       	rjmp	.+1378   	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
					break;
				case 6:
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_A, HIGH);
    264e:	eb 81       	ldd	r30, Y+3	; 0x03
    2650:	fc 81       	ldd	r31, Y+4	; 0x04
    2652:	81 81       	ldd	r24, Z+1	; 0x01
    2654:	61 e0       	ldi	r22, 0x01	; 1
    2656:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_B, LOW);
    265a:	eb 81       	ldd	r30, Y+3	; 0x03
    265c:	fc 81       	ldd	r31, Y+4	; 0x04
    265e:	82 81       	ldd	r24, Z+2	; 0x02
    2660:	60 e0       	ldi	r22, 0x00	; 0
    2662:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_C, HIGH);
    2666:	eb 81       	ldd	r30, Y+3	; 0x03
    2668:	fc 81       	ldd	r31, Y+4	; 0x04
    266a:	83 81       	ldd	r24, Z+3	; 0x03
    266c:	61 e0       	ldi	r22, 0x01	; 1
    266e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_D, HIGH);
    2672:	eb 81       	ldd	r30, Y+3	; 0x03
    2674:	fc 81       	ldd	r31, Y+4	; 0x04
    2676:	84 81       	ldd	r24, Z+4	; 0x04
    2678:	61 e0       	ldi	r22, 0x01	; 1
    267a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_E, HIGH);
    267e:	eb 81       	ldd	r30, Y+3	; 0x03
    2680:	fc 81       	ldd	r31, Y+4	; 0x04
    2682:	85 81       	ldd	r24, Z+5	; 0x05
    2684:	61 e0       	ldi	r22, 0x01	; 1
    2686:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_F, HIGH);
    268a:	eb 81       	ldd	r30, Y+3	; 0x03
    268c:	fc 81       	ldd	r31, Y+4	; 0x04
    268e:	86 81       	ldd	r24, Z+6	; 0x06
    2690:	61 e0       	ldi	r22, 0x01	; 1
    2692:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_G, HIGH);
    2696:	eb 81       	ldd	r30, Y+3	; 0x03
    2698:	fc 81       	ldd	r31, Y+4	; 0x04
    269a:	87 81       	ldd	r24, Z+7	; 0x07
    269c:	61 e0       	ldi	r22, 0x01	; 1
    269e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    26a2:	86 c2       	rjmp	.+1292   	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
					break;
				case 7:
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_A, HIGH);
    26a4:	eb 81       	ldd	r30, Y+3	; 0x03
    26a6:	fc 81       	ldd	r31, Y+4	; 0x04
    26a8:	81 81       	ldd	r24, Z+1	; 0x01
    26aa:	61 e0       	ldi	r22, 0x01	; 1
    26ac:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_B, HIGH);
    26b0:	eb 81       	ldd	r30, Y+3	; 0x03
    26b2:	fc 81       	ldd	r31, Y+4	; 0x04
    26b4:	82 81       	ldd	r24, Z+2	; 0x02
    26b6:	61 e0       	ldi	r22, 0x01	; 1
    26b8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_C, HIGH);
    26bc:	eb 81       	ldd	r30, Y+3	; 0x03
    26be:	fc 81       	ldd	r31, Y+4	; 0x04
    26c0:	83 81       	ldd	r24, Z+3	; 0x03
    26c2:	61 e0       	ldi	r22, 0x01	; 1
    26c4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_D, LOW);
    26c8:	eb 81       	ldd	r30, Y+3	; 0x03
    26ca:	fc 81       	ldd	r31, Y+4	; 0x04
    26cc:	84 81       	ldd	r24, Z+4	; 0x04
    26ce:	60 e0       	ldi	r22, 0x00	; 0
    26d0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_E, LOW);
    26d4:	eb 81       	ldd	r30, Y+3	; 0x03
    26d6:	fc 81       	ldd	r31, Y+4	; 0x04
    26d8:	85 81       	ldd	r24, Z+5	; 0x05
    26da:	60 e0       	ldi	r22, 0x00	; 0
    26dc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_F, LOW);
    26e0:	eb 81       	ldd	r30, Y+3	; 0x03
    26e2:	fc 81       	ldd	r31, Y+4	; 0x04
    26e4:	86 81       	ldd	r24, Z+6	; 0x06
    26e6:	60 e0       	ldi	r22, 0x00	; 0
    26e8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_G, LOW);
    26ec:	eb 81       	ldd	r30, Y+3	; 0x03
    26ee:	fc 81       	ldd	r31, Y+4	; 0x04
    26f0:	87 81       	ldd	r24, Z+7	; 0x07
    26f2:	60 e0       	ldi	r22, 0x00	; 0
    26f4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    26f8:	5b c2       	rjmp	.+1206   	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
					break;
				case 8:
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_A, HIGH);
    26fa:	eb 81       	ldd	r30, Y+3	; 0x03
    26fc:	fc 81       	ldd	r31, Y+4	; 0x04
    26fe:	81 81       	ldd	r24, Z+1	; 0x01
    2700:	61 e0       	ldi	r22, 0x01	; 1
    2702:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_B, HIGH);
    2706:	eb 81       	ldd	r30, Y+3	; 0x03
    2708:	fc 81       	ldd	r31, Y+4	; 0x04
    270a:	82 81       	ldd	r24, Z+2	; 0x02
    270c:	61 e0       	ldi	r22, 0x01	; 1
    270e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_C, HIGH);
    2712:	eb 81       	ldd	r30, Y+3	; 0x03
    2714:	fc 81       	ldd	r31, Y+4	; 0x04
    2716:	83 81       	ldd	r24, Z+3	; 0x03
    2718:	61 e0       	ldi	r22, 0x01	; 1
    271a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_D, HIGH);
    271e:	eb 81       	ldd	r30, Y+3	; 0x03
    2720:	fc 81       	ldd	r31, Y+4	; 0x04
    2722:	84 81       	ldd	r24, Z+4	; 0x04
    2724:	61 e0       	ldi	r22, 0x01	; 1
    2726:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_E, HIGH);
    272a:	eb 81       	ldd	r30, Y+3	; 0x03
    272c:	fc 81       	ldd	r31, Y+4	; 0x04
    272e:	85 81       	ldd	r24, Z+5	; 0x05
    2730:	61 e0       	ldi	r22, 0x01	; 1
    2732:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_F, HIGH);
    2736:	eb 81       	ldd	r30, Y+3	; 0x03
    2738:	fc 81       	ldd	r31, Y+4	; 0x04
    273a:	86 81       	ldd	r24, Z+6	; 0x06
    273c:	61 e0       	ldi	r22, 0x01	; 1
    273e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_G, HIGH);
    2742:	eb 81       	ldd	r30, Y+3	; 0x03
    2744:	fc 81       	ldd	r31, Y+4	; 0x04
    2746:	87 81       	ldd	r24, Z+7	; 0x07
    2748:	61 e0       	ldi	r22, 0x01	; 1
    274a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    274e:	30 c2       	rjmp	.+1120   	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
					break;
				case 9:
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_A, HIGH);
    2750:	eb 81       	ldd	r30, Y+3	; 0x03
    2752:	fc 81       	ldd	r31, Y+4	; 0x04
    2754:	81 81       	ldd	r24, Z+1	; 0x01
    2756:	61 e0       	ldi	r22, 0x01	; 1
    2758:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_B, HIGH);
    275c:	eb 81       	ldd	r30, Y+3	; 0x03
    275e:	fc 81       	ldd	r31, Y+4	; 0x04
    2760:	82 81       	ldd	r24, Z+2	; 0x02
    2762:	61 e0       	ldi	r22, 0x01	; 1
    2764:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_C, HIGH);
    2768:	eb 81       	ldd	r30, Y+3	; 0x03
    276a:	fc 81       	ldd	r31, Y+4	; 0x04
    276c:	83 81       	ldd	r24, Z+3	; 0x03
    276e:	61 e0       	ldi	r22, 0x01	; 1
    2770:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_D, HIGH);
    2774:	eb 81       	ldd	r30, Y+3	; 0x03
    2776:	fc 81       	ldd	r31, Y+4	; 0x04
    2778:	84 81       	ldd	r24, Z+4	; 0x04
    277a:	61 e0       	ldi	r22, 0x01	; 1
    277c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_E, LOW);
    2780:	eb 81       	ldd	r30, Y+3	; 0x03
    2782:	fc 81       	ldd	r31, Y+4	; 0x04
    2784:	85 81       	ldd	r24, Z+5	; 0x05
    2786:	60 e0       	ldi	r22, 0x00	; 0
    2788:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_F, HIGH);
    278c:	eb 81       	ldd	r30, Y+3	; 0x03
    278e:	fc 81       	ldd	r31, Y+4	; 0x04
    2790:	86 81       	ldd	r24, Z+6	; 0x06
    2792:	61 e0       	ldi	r22, 0x01	; 1
    2794:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_G, HIGH);
    2798:	eb 81       	ldd	r30, Y+3	; 0x03
    279a:	fc 81       	ldd	r31, Y+4	; 0x04
    279c:	87 81       	ldd	r24, Z+7	; 0x07
    279e:	61 e0       	ldi	r22, 0x01	; 1
    27a0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    27a4:	05 c2       	rjmp	.+1034   	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
					break;
				} // switch --> CC
				break;
			case CA:
				switch (copy_u8Number) {
    27a6:	8a 81       	ldd	r24, Y+2	; 0x02
    27a8:	28 2f       	mov	r18, r24
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	3e 83       	std	Y+6, r19	; 0x06
    27ae:	2d 83       	std	Y+5, r18	; 0x05
    27b0:	8d 81       	ldd	r24, Y+5	; 0x05
    27b2:	9e 81       	ldd	r25, Y+6	; 0x06
    27b4:	84 30       	cpi	r24, 0x04	; 4
    27b6:	91 05       	cpc	r25, r1
    27b8:	09 f4       	brne	.+2      	; 0x27bc <HSSD_enDisplayNumber+0x46c>
    27ba:	f3 c0       	rjmp	.+486    	; 0x29a2 <HSSD_enDisplayNumber+0x652>
    27bc:	2d 81       	ldd	r18, Y+5	; 0x05
    27be:	3e 81       	ldd	r19, Y+6	; 0x06
    27c0:	25 30       	cpi	r18, 0x05	; 5
    27c2:	31 05       	cpc	r19, r1
    27c4:	ec f4       	brge	.+58     	; 0x2800 <HSSD_enDisplayNumber+0x4b0>
    27c6:	8d 81       	ldd	r24, Y+5	; 0x05
    27c8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ca:	81 30       	cpi	r24, 0x01	; 1
    27cc:	91 05       	cpc	r25, r1
    27ce:	09 f4       	brne	.+2      	; 0x27d2 <HSSD_enDisplayNumber+0x482>
    27d0:	67 c0       	rjmp	.+206    	; 0x28a0 <HSSD_enDisplayNumber+0x550>
    27d2:	2d 81       	ldd	r18, Y+5	; 0x05
    27d4:	3e 81       	ldd	r19, Y+6	; 0x06
    27d6:	22 30       	cpi	r18, 0x02	; 2
    27d8:	31 05       	cpc	r19, r1
    27da:	2c f4       	brge	.+10     	; 0x27e6 <HSSD_enDisplayNumber+0x496>
    27dc:	8d 81       	ldd	r24, Y+5	; 0x05
    27de:	9e 81       	ldd	r25, Y+6	; 0x06
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	99 f1       	breq	.+102    	; 0x284a <HSSD_enDisplayNumber+0x4fa>
    27e4:	e5 c1       	rjmp	.+970    	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
    27e6:	2d 81       	ldd	r18, Y+5	; 0x05
    27e8:	3e 81       	ldd	r19, Y+6	; 0x06
    27ea:	22 30       	cpi	r18, 0x02	; 2
    27ec:	31 05       	cpc	r19, r1
    27ee:	09 f4       	brne	.+2      	; 0x27f2 <HSSD_enDisplayNumber+0x4a2>
    27f0:	82 c0       	rjmp	.+260    	; 0x28f6 <HSSD_enDisplayNumber+0x5a6>
    27f2:	8d 81       	ldd	r24, Y+5	; 0x05
    27f4:	9e 81       	ldd	r25, Y+6	; 0x06
    27f6:	83 30       	cpi	r24, 0x03	; 3
    27f8:	91 05       	cpc	r25, r1
    27fa:	09 f4       	brne	.+2      	; 0x27fe <HSSD_enDisplayNumber+0x4ae>
    27fc:	a7 c0       	rjmp	.+334    	; 0x294c <HSSD_enDisplayNumber+0x5fc>
    27fe:	d8 c1       	rjmp	.+944    	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
    2800:	2d 81       	ldd	r18, Y+5	; 0x05
    2802:	3e 81       	ldd	r19, Y+6	; 0x06
    2804:	27 30       	cpi	r18, 0x07	; 7
    2806:	31 05       	cpc	r19, r1
    2808:	09 f4       	brne	.+2      	; 0x280c <HSSD_enDisplayNumber+0x4bc>
    280a:	4c c1       	rjmp	.+664    	; 0x2aa4 <HSSD_enDisplayNumber+0x754>
    280c:	8d 81       	ldd	r24, Y+5	; 0x05
    280e:	9e 81       	ldd	r25, Y+6	; 0x06
    2810:	88 30       	cpi	r24, 0x08	; 8
    2812:	91 05       	cpc	r25, r1
    2814:	6c f4       	brge	.+26     	; 0x2830 <HSSD_enDisplayNumber+0x4e0>
    2816:	2d 81       	ldd	r18, Y+5	; 0x05
    2818:	3e 81       	ldd	r19, Y+6	; 0x06
    281a:	25 30       	cpi	r18, 0x05	; 5
    281c:	31 05       	cpc	r19, r1
    281e:	09 f4       	brne	.+2      	; 0x2822 <HSSD_enDisplayNumber+0x4d2>
    2820:	eb c0       	rjmp	.+470    	; 0x29f8 <HSSD_enDisplayNumber+0x6a8>
    2822:	8d 81       	ldd	r24, Y+5	; 0x05
    2824:	9e 81       	ldd	r25, Y+6	; 0x06
    2826:	86 30       	cpi	r24, 0x06	; 6
    2828:	91 05       	cpc	r25, r1
    282a:	09 f4       	brne	.+2      	; 0x282e <HSSD_enDisplayNumber+0x4de>
    282c:	10 c1       	rjmp	.+544    	; 0x2a4e <HSSD_enDisplayNumber+0x6fe>
    282e:	c0 c1       	rjmp	.+896    	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
    2830:	2d 81       	ldd	r18, Y+5	; 0x05
    2832:	3e 81       	ldd	r19, Y+6	; 0x06
    2834:	28 30       	cpi	r18, 0x08	; 8
    2836:	31 05       	cpc	r19, r1
    2838:	09 f4       	brne	.+2      	; 0x283c <HSSD_enDisplayNumber+0x4ec>
    283a:	5f c1       	rjmp	.+702    	; 0x2afa <HSSD_enDisplayNumber+0x7aa>
    283c:	8d 81       	ldd	r24, Y+5	; 0x05
    283e:	9e 81       	ldd	r25, Y+6	; 0x06
    2840:	89 30       	cpi	r24, 0x09	; 9
    2842:	91 05       	cpc	r25, r1
    2844:	09 f4       	brne	.+2      	; 0x2848 <HSSD_enDisplayNumber+0x4f8>
    2846:	84 c1       	rjmp	.+776    	; 0x2b50 <HSSD_enDisplayNumber+0x800>
    2848:	b3 c1       	rjmp	.+870    	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
				case 0:
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_A, LOW);
    284a:	eb 81       	ldd	r30, Y+3	; 0x03
    284c:	fc 81       	ldd	r31, Y+4	; 0x04
    284e:	81 81       	ldd	r24, Z+1	; 0x01
    2850:	60 e0       	ldi	r22, 0x00	; 0
    2852:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_B, LOW);
    2856:	eb 81       	ldd	r30, Y+3	; 0x03
    2858:	fc 81       	ldd	r31, Y+4	; 0x04
    285a:	82 81       	ldd	r24, Z+2	; 0x02
    285c:	60 e0       	ldi	r22, 0x00	; 0
    285e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_C, LOW);
    2862:	eb 81       	ldd	r30, Y+3	; 0x03
    2864:	fc 81       	ldd	r31, Y+4	; 0x04
    2866:	83 81       	ldd	r24, Z+3	; 0x03
    2868:	60 e0       	ldi	r22, 0x00	; 0
    286a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_D, LOW);
    286e:	eb 81       	ldd	r30, Y+3	; 0x03
    2870:	fc 81       	ldd	r31, Y+4	; 0x04
    2872:	84 81       	ldd	r24, Z+4	; 0x04
    2874:	60 e0       	ldi	r22, 0x00	; 0
    2876:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_E, LOW);
    287a:	eb 81       	ldd	r30, Y+3	; 0x03
    287c:	fc 81       	ldd	r31, Y+4	; 0x04
    287e:	85 81       	ldd	r24, Z+5	; 0x05
    2880:	60 e0       	ldi	r22, 0x00	; 0
    2882:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_F, LOW);
    2886:	eb 81       	ldd	r30, Y+3	; 0x03
    2888:	fc 81       	ldd	r31, Y+4	; 0x04
    288a:	86 81       	ldd	r24, Z+6	; 0x06
    288c:	60 e0       	ldi	r22, 0x00	; 0
    288e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_G, HIGH);
    2892:	eb 81       	ldd	r30, Y+3	; 0x03
    2894:	fc 81       	ldd	r31, Y+4	; 0x04
    2896:	87 81       	ldd	r24, Z+7	; 0x07
    2898:	61 e0       	ldi	r22, 0x01	; 1
    289a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    289e:	88 c1       	rjmp	.+784    	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
					break;
				case 1:
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_A, HIGH);
    28a0:	eb 81       	ldd	r30, Y+3	; 0x03
    28a2:	fc 81       	ldd	r31, Y+4	; 0x04
    28a4:	81 81       	ldd	r24, Z+1	; 0x01
    28a6:	61 e0       	ldi	r22, 0x01	; 1
    28a8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_B, LOW);
    28ac:	eb 81       	ldd	r30, Y+3	; 0x03
    28ae:	fc 81       	ldd	r31, Y+4	; 0x04
    28b0:	82 81       	ldd	r24, Z+2	; 0x02
    28b2:	60 e0       	ldi	r22, 0x00	; 0
    28b4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_C, LOW);
    28b8:	eb 81       	ldd	r30, Y+3	; 0x03
    28ba:	fc 81       	ldd	r31, Y+4	; 0x04
    28bc:	83 81       	ldd	r24, Z+3	; 0x03
    28be:	60 e0       	ldi	r22, 0x00	; 0
    28c0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_D, HIGH);
    28c4:	eb 81       	ldd	r30, Y+3	; 0x03
    28c6:	fc 81       	ldd	r31, Y+4	; 0x04
    28c8:	84 81       	ldd	r24, Z+4	; 0x04
    28ca:	61 e0       	ldi	r22, 0x01	; 1
    28cc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_E, HIGH);
    28d0:	eb 81       	ldd	r30, Y+3	; 0x03
    28d2:	fc 81       	ldd	r31, Y+4	; 0x04
    28d4:	85 81       	ldd	r24, Z+5	; 0x05
    28d6:	61 e0       	ldi	r22, 0x01	; 1
    28d8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_F, HIGH);
    28dc:	eb 81       	ldd	r30, Y+3	; 0x03
    28de:	fc 81       	ldd	r31, Y+4	; 0x04
    28e0:	86 81       	ldd	r24, Z+6	; 0x06
    28e2:	61 e0       	ldi	r22, 0x01	; 1
    28e4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_G, HIGH);
    28e8:	eb 81       	ldd	r30, Y+3	; 0x03
    28ea:	fc 81       	ldd	r31, Y+4	; 0x04
    28ec:	87 81       	ldd	r24, Z+7	; 0x07
    28ee:	61 e0       	ldi	r22, 0x01	; 1
    28f0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    28f4:	5d c1       	rjmp	.+698    	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
					break;
				case 2:
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_A, LOW);
    28f6:	eb 81       	ldd	r30, Y+3	; 0x03
    28f8:	fc 81       	ldd	r31, Y+4	; 0x04
    28fa:	81 81       	ldd	r24, Z+1	; 0x01
    28fc:	60 e0       	ldi	r22, 0x00	; 0
    28fe:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_B, LOW);
    2902:	eb 81       	ldd	r30, Y+3	; 0x03
    2904:	fc 81       	ldd	r31, Y+4	; 0x04
    2906:	82 81       	ldd	r24, Z+2	; 0x02
    2908:	60 e0       	ldi	r22, 0x00	; 0
    290a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_C, HIGH);
    290e:	eb 81       	ldd	r30, Y+3	; 0x03
    2910:	fc 81       	ldd	r31, Y+4	; 0x04
    2912:	83 81       	ldd	r24, Z+3	; 0x03
    2914:	61 e0       	ldi	r22, 0x01	; 1
    2916:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_D, LOW);
    291a:	eb 81       	ldd	r30, Y+3	; 0x03
    291c:	fc 81       	ldd	r31, Y+4	; 0x04
    291e:	84 81       	ldd	r24, Z+4	; 0x04
    2920:	60 e0       	ldi	r22, 0x00	; 0
    2922:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_E, LOW);
    2926:	eb 81       	ldd	r30, Y+3	; 0x03
    2928:	fc 81       	ldd	r31, Y+4	; 0x04
    292a:	85 81       	ldd	r24, Z+5	; 0x05
    292c:	60 e0       	ldi	r22, 0x00	; 0
    292e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_F, HIGH);
    2932:	eb 81       	ldd	r30, Y+3	; 0x03
    2934:	fc 81       	ldd	r31, Y+4	; 0x04
    2936:	86 81       	ldd	r24, Z+6	; 0x06
    2938:	61 e0       	ldi	r22, 0x01	; 1
    293a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_G, LOW);
    293e:	eb 81       	ldd	r30, Y+3	; 0x03
    2940:	fc 81       	ldd	r31, Y+4	; 0x04
    2942:	87 81       	ldd	r24, Z+7	; 0x07
    2944:	60 e0       	ldi	r22, 0x00	; 0
    2946:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    294a:	32 c1       	rjmp	.+612    	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
					break;
				case 3:
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_A, LOW);
    294c:	eb 81       	ldd	r30, Y+3	; 0x03
    294e:	fc 81       	ldd	r31, Y+4	; 0x04
    2950:	81 81       	ldd	r24, Z+1	; 0x01
    2952:	60 e0       	ldi	r22, 0x00	; 0
    2954:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_B, LOW);
    2958:	eb 81       	ldd	r30, Y+3	; 0x03
    295a:	fc 81       	ldd	r31, Y+4	; 0x04
    295c:	82 81       	ldd	r24, Z+2	; 0x02
    295e:	60 e0       	ldi	r22, 0x00	; 0
    2960:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_C, LOW);
    2964:	eb 81       	ldd	r30, Y+3	; 0x03
    2966:	fc 81       	ldd	r31, Y+4	; 0x04
    2968:	83 81       	ldd	r24, Z+3	; 0x03
    296a:	60 e0       	ldi	r22, 0x00	; 0
    296c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_D, LOW);
    2970:	eb 81       	ldd	r30, Y+3	; 0x03
    2972:	fc 81       	ldd	r31, Y+4	; 0x04
    2974:	84 81       	ldd	r24, Z+4	; 0x04
    2976:	60 e0       	ldi	r22, 0x00	; 0
    2978:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_E, HIGH);
    297c:	eb 81       	ldd	r30, Y+3	; 0x03
    297e:	fc 81       	ldd	r31, Y+4	; 0x04
    2980:	85 81       	ldd	r24, Z+5	; 0x05
    2982:	61 e0       	ldi	r22, 0x01	; 1
    2984:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_F, HIGH);
    2988:	eb 81       	ldd	r30, Y+3	; 0x03
    298a:	fc 81       	ldd	r31, Y+4	; 0x04
    298c:	86 81       	ldd	r24, Z+6	; 0x06
    298e:	61 e0       	ldi	r22, 0x01	; 1
    2990:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_G, LOW);
    2994:	eb 81       	ldd	r30, Y+3	; 0x03
    2996:	fc 81       	ldd	r31, Y+4	; 0x04
    2998:	87 81       	ldd	r24, Z+7	; 0x07
    299a:	60 e0       	ldi	r22, 0x00	; 0
    299c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    29a0:	07 c1       	rjmp	.+526    	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
					break;
				case 4:
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_A, HIGH);
    29a2:	eb 81       	ldd	r30, Y+3	; 0x03
    29a4:	fc 81       	ldd	r31, Y+4	; 0x04
    29a6:	81 81       	ldd	r24, Z+1	; 0x01
    29a8:	61 e0       	ldi	r22, 0x01	; 1
    29aa:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_B, LOW);
    29ae:	eb 81       	ldd	r30, Y+3	; 0x03
    29b0:	fc 81       	ldd	r31, Y+4	; 0x04
    29b2:	82 81       	ldd	r24, Z+2	; 0x02
    29b4:	60 e0       	ldi	r22, 0x00	; 0
    29b6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_C, LOW);
    29ba:	eb 81       	ldd	r30, Y+3	; 0x03
    29bc:	fc 81       	ldd	r31, Y+4	; 0x04
    29be:	83 81       	ldd	r24, Z+3	; 0x03
    29c0:	60 e0       	ldi	r22, 0x00	; 0
    29c2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_D, HIGH);
    29c6:	eb 81       	ldd	r30, Y+3	; 0x03
    29c8:	fc 81       	ldd	r31, Y+4	; 0x04
    29ca:	84 81       	ldd	r24, Z+4	; 0x04
    29cc:	61 e0       	ldi	r22, 0x01	; 1
    29ce:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_E, HIGH);
    29d2:	eb 81       	ldd	r30, Y+3	; 0x03
    29d4:	fc 81       	ldd	r31, Y+4	; 0x04
    29d6:	85 81       	ldd	r24, Z+5	; 0x05
    29d8:	61 e0       	ldi	r22, 0x01	; 1
    29da:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_F, LOW);
    29de:	eb 81       	ldd	r30, Y+3	; 0x03
    29e0:	fc 81       	ldd	r31, Y+4	; 0x04
    29e2:	86 81       	ldd	r24, Z+6	; 0x06
    29e4:	60 e0       	ldi	r22, 0x00	; 0
    29e6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_G, LOW);
    29ea:	eb 81       	ldd	r30, Y+3	; 0x03
    29ec:	fc 81       	ldd	r31, Y+4	; 0x04
    29ee:	87 81       	ldd	r24, Z+7	; 0x07
    29f0:	60 e0       	ldi	r22, 0x00	; 0
    29f2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    29f6:	dc c0       	rjmp	.+440    	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
					break;
				case 5:
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_A, LOW);
    29f8:	eb 81       	ldd	r30, Y+3	; 0x03
    29fa:	fc 81       	ldd	r31, Y+4	; 0x04
    29fc:	81 81       	ldd	r24, Z+1	; 0x01
    29fe:	60 e0       	ldi	r22, 0x00	; 0
    2a00:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_B, HIGH);
    2a04:	eb 81       	ldd	r30, Y+3	; 0x03
    2a06:	fc 81       	ldd	r31, Y+4	; 0x04
    2a08:	82 81       	ldd	r24, Z+2	; 0x02
    2a0a:	61 e0       	ldi	r22, 0x01	; 1
    2a0c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_C, LOW);
    2a10:	eb 81       	ldd	r30, Y+3	; 0x03
    2a12:	fc 81       	ldd	r31, Y+4	; 0x04
    2a14:	83 81       	ldd	r24, Z+3	; 0x03
    2a16:	60 e0       	ldi	r22, 0x00	; 0
    2a18:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_D, LOW);
    2a1c:	eb 81       	ldd	r30, Y+3	; 0x03
    2a1e:	fc 81       	ldd	r31, Y+4	; 0x04
    2a20:	84 81       	ldd	r24, Z+4	; 0x04
    2a22:	60 e0       	ldi	r22, 0x00	; 0
    2a24:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_E, HIGH);
    2a28:	eb 81       	ldd	r30, Y+3	; 0x03
    2a2a:	fc 81       	ldd	r31, Y+4	; 0x04
    2a2c:	85 81       	ldd	r24, Z+5	; 0x05
    2a2e:	61 e0       	ldi	r22, 0x01	; 1
    2a30:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_F, LOW);
    2a34:	eb 81       	ldd	r30, Y+3	; 0x03
    2a36:	fc 81       	ldd	r31, Y+4	; 0x04
    2a38:	86 81       	ldd	r24, Z+6	; 0x06
    2a3a:	60 e0       	ldi	r22, 0x00	; 0
    2a3c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_G, LOW);
    2a40:	eb 81       	ldd	r30, Y+3	; 0x03
    2a42:	fc 81       	ldd	r31, Y+4	; 0x04
    2a44:	87 81       	ldd	r24, Z+7	; 0x07
    2a46:	60 e0       	ldi	r22, 0x00	; 0
    2a48:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    2a4c:	b1 c0       	rjmp	.+354    	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
					break;
				case 6:
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_A, LOW);
    2a4e:	eb 81       	ldd	r30, Y+3	; 0x03
    2a50:	fc 81       	ldd	r31, Y+4	; 0x04
    2a52:	81 81       	ldd	r24, Z+1	; 0x01
    2a54:	60 e0       	ldi	r22, 0x00	; 0
    2a56:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_B, HIGH);
    2a5a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a5c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a5e:	82 81       	ldd	r24, Z+2	; 0x02
    2a60:	61 e0       	ldi	r22, 0x01	; 1
    2a62:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_C, LOW);
    2a66:	eb 81       	ldd	r30, Y+3	; 0x03
    2a68:	fc 81       	ldd	r31, Y+4	; 0x04
    2a6a:	83 81       	ldd	r24, Z+3	; 0x03
    2a6c:	60 e0       	ldi	r22, 0x00	; 0
    2a6e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_D, LOW);
    2a72:	eb 81       	ldd	r30, Y+3	; 0x03
    2a74:	fc 81       	ldd	r31, Y+4	; 0x04
    2a76:	84 81       	ldd	r24, Z+4	; 0x04
    2a78:	60 e0       	ldi	r22, 0x00	; 0
    2a7a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_E, LOW);
    2a7e:	eb 81       	ldd	r30, Y+3	; 0x03
    2a80:	fc 81       	ldd	r31, Y+4	; 0x04
    2a82:	85 81       	ldd	r24, Z+5	; 0x05
    2a84:	60 e0       	ldi	r22, 0x00	; 0
    2a86:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_F, LOW);
    2a8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a8e:	86 81       	ldd	r24, Z+6	; 0x06
    2a90:	60 e0       	ldi	r22, 0x00	; 0
    2a92:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_G, LOW);
    2a96:	eb 81       	ldd	r30, Y+3	; 0x03
    2a98:	fc 81       	ldd	r31, Y+4	; 0x04
    2a9a:	87 81       	ldd	r24, Z+7	; 0x07
    2a9c:	60 e0       	ldi	r22, 0x00	; 0
    2a9e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    2aa2:	86 c0       	rjmp	.+268    	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
					break;
				case 7:
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_A, LOW);
    2aa4:	eb 81       	ldd	r30, Y+3	; 0x03
    2aa6:	fc 81       	ldd	r31, Y+4	; 0x04
    2aa8:	81 81       	ldd	r24, Z+1	; 0x01
    2aaa:	60 e0       	ldi	r22, 0x00	; 0
    2aac:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_B, LOW);
    2ab0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ab2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ab4:	82 81       	ldd	r24, Z+2	; 0x02
    2ab6:	60 e0       	ldi	r22, 0x00	; 0
    2ab8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_C, LOW);
    2abc:	eb 81       	ldd	r30, Y+3	; 0x03
    2abe:	fc 81       	ldd	r31, Y+4	; 0x04
    2ac0:	83 81       	ldd	r24, Z+3	; 0x03
    2ac2:	60 e0       	ldi	r22, 0x00	; 0
    2ac4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_D, HIGH);
    2ac8:	eb 81       	ldd	r30, Y+3	; 0x03
    2aca:	fc 81       	ldd	r31, Y+4	; 0x04
    2acc:	84 81       	ldd	r24, Z+4	; 0x04
    2ace:	61 e0       	ldi	r22, 0x01	; 1
    2ad0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_E, HIGH);
    2ad4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ad6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ad8:	85 81       	ldd	r24, Z+5	; 0x05
    2ada:	61 e0       	ldi	r22, 0x01	; 1
    2adc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_F, HIGH);
    2ae0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ae2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ae4:	86 81       	ldd	r24, Z+6	; 0x06
    2ae6:	61 e0       	ldi	r22, 0x01	; 1
    2ae8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_G, HIGH);
    2aec:	eb 81       	ldd	r30, Y+3	; 0x03
    2aee:	fc 81       	ldd	r31, Y+4	; 0x04
    2af0:	87 81       	ldd	r24, Z+7	; 0x07
    2af2:	61 e0       	ldi	r22, 0x01	; 1
    2af4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    2af8:	5b c0       	rjmp	.+182    	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
					break;
				case 8:
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_A, LOW);
    2afa:	eb 81       	ldd	r30, Y+3	; 0x03
    2afc:	fc 81       	ldd	r31, Y+4	; 0x04
    2afe:	81 81       	ldd	r24, Z+1	; 0x01
    2b00:	60 e0       	ldi	r22, 0x00	; 0
    2b02:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_B, LOW);
    2b06:	eb 81       	ldd	r30, Y+3	; 0x03
    2b08:	fc 81       	ldd	r31, Y+4	; 0x04
    2b0a:	82 81       	ldd	r24, Z+2	; 0x02
    2b0c:	60 e0       	ldi	r22, 0x00	; 0
    2b0e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_C, LOW);
    2b12:	eb 81       	ldd	r30, Y+3	; 0x03
    2b14:	fc 81       	ldd	r31, Y+4	; 0x04
    2b16:	83 81       	ldd	r24, Z+3	; 0x03
    2b18:	60 e0       	ldi	r22, 0x00	; 0
    2b1a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_D, LOW);
    2b1e:	eb 81       	ldd	r30, Y+3	; 0x03
    2b20:	fc 81       	ldd	r31, Y+4	; 0x04
    2b22:	84 81       	ldd	r24, Z+4	; 0x04
    2b24:	60 e0       	ldi	r22, 0x00	; 0
    2b26:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_E, LOW);
    2b2a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b2c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b2e:	85 81       	ldd	r24, Z+5	; 0x05
    2b30:	60 e0       	ldi	r22, 0x00	; 0
    2b32:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_F, LOW);
    2b36:	eb 81       	ldd	r30, Y+3	; 0x03
    2b38:	fc 81       	ldd	r31, Y+4	; 0x04
    2b3a:	86 81       	ldd	r24, Z+6	; 0x06
    2b3c:	60 e0       	ldi	r22, 0x00	; 0
    2b3e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_G, LOW);
    2b42:	eb 81       	ldd	r30, Y+3	; 0x03
    2b44:	fc 81       	ldd	r31, Y+4	; 0x04
    2b46:	87 81       	ldd	r24, Z+7	; 0x07
    2b48:	60 e0       	ldi	r22, 0x00	; 0
    2b4a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    2b4e:	30 c0       	rjmp	.+96     	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
					break;
				case 9:
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_A, LOW);
    2b50:	eb 81       	ldd	r30, Y+3	; 0x03
    2b52:	fc 81       	ldd	r31, Y+4	; 0x04
    2b54:	81 81       	ldd	r24, Z+1	; 0x01
    2b56:	60 e0       	ldi	r22, 0x00	; 0
    2b58:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_B, LOW);
    2b5c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b5e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b60:	82 81       	ldd	r24, Z+2	; 0x02
    2b62:	60 e0       	ldi	r22, 0x00	; 0
    2b64:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_C, LOW);
    2b68:	eb 81       	ldd	r30, Y+3	; 0x03
    2b6a:	fc 81       	ldd	r31, Y+4	; 0x04
    2b6c:	83 81       	ldd	r24, Z+3	; 0x03
    2b6e:	60 e0       	ldi	r22, 0x00	; 0
    2b70:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_D, LOW);
    2b74:	eb 81       	ldd	r30, Y+3	; 0x03
    2b76:	fc 81       	ldd	r31, Y+4	; 0x04
    2b78:	84 81       	ldd	r24, Z+4	; 0x04
    2b7a:	60 e0       	ldi	r22, 0x00	; 0
    2b7c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_E, HIGH);
    2b80:	eb 81       	ldd	r30, Y+3	; 0x03
    2b82:	fc 81       	ldd	r31, Y+4	; 0x04
    2b84:	85 81       	ldd	r24, Z+5	; 0x05
    2b86:	61 e0       	ldi	r22, 0x01	; 1
    2b88:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_F, LOW);
    2b8c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b8e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b90:	86 81       	ldd	r24, Z+6	; 0x06
    2b92:	60 e0       	ldi	r22, 0x00	; 0
    2b94:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrSSD->SSD_Pin_G, LOW);
    2b98:	eb 81       	ldd	r30, Y+3	; 0x03
    2b9a:	fc 81       	ldd	r31, Y+4	; 0x04
    2b9c:	87 81       	ldd	r24, Z+7	; 0x07
    2b9e:	60 e0       	ldi	r22, 0x00	; 0
    2ba0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    2ba4:	05 c0       	rjmp	.+10     	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
					break;
				} // switch --> CA
				break;
			default:
				Local_enState = OUT_OF_RANGE;
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	89 83       	std	Y+1, r24	; 0x01
    2baa:	02 c0       	rjmp	.+4      	; 0x2bb0 <HSSD_enDisplayNumber+0x860>
				break;
			} // switch --> SSD Type
		} // if --> PtrSSD != NULL
		else {
			Local_enState = NULL_POINTER;
    2bac:	82 e0       	ldi	r24, 0x02	; 2
    2bae:	89 83       	std	Y+1, r24	; 0x01
		} // else --> PtrSSD == NULL
	}
	return Local_enState;
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bb2:	2a 96       	adiw	r28, 0x0a	; 10
    2bb4:	0f b6       	in	r0, 0x3f	; 63
    2bb6:	f8 94       	cli
    2bb8:	de bf       	out	0x3e, r29	; 62
    2bba:	0f be       	out	0x3f, r0	; 63
    2bbc:	cd bf       	out	0x3d, r28	; 61
    2bbe:	cf 91       	pop	r28
    2bc0:	df 91       	pop	r29
    2bc2:	08 95       	ret

00002bc4 <HPB_enInit>:
#include <MDIO_interface.h>
#include <HPB_private.h>
#include <HPB_config.h>
#include <HPB_interface.h>

ErrorState_t HPB_enInit(PB_t *PtrPB) {
    2bc4:	df 93       	push	r29
    2bc6:	cf 93       	push	r28
    2bc8:	00 d0       	rcall	.+0      	; 0x2bca <HPB_enInit+0x6>
    2bca:	0f 92       	push	r0
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
    2bd0:	9b 83       	std	Y+3, r25	; 0x03
    2bd2:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    2bd4:	19 82       	std	Y+1, r1	; 0x01
	if (NULL != PtrPB) {
    2bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bda:	00 97       	sbiw	r24, 0x00	; 0
    2bdc:	91 f0       	breq	.+36     	; 0x2c02 <HPB_enInit+0x3e>
		MDIO_enSetPinDirection(PtrPB->PB_Pin, INPUT);
    2bde:	ea 81       	ldd	r30, Y+2	; 0x02
    2be0:	fb 81       	ldd	r31, Y+3	; 0x03
    2be2:	80 81       	ld	r24, Z
    2be4:	60 e0       	ldi	r22, 0x00	; 0
    2be6:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
		if (PtrPB->PB_Connection == PULL_UP) {
    2bea:	ea 81       	ldd	r30, Y+2	; 0x02
    2bec:	fb 81       	ldd	r31, Y+3	; 0x03
    2bee:	82 81       	ldd	r24, Z+2	; 0x02
    2bf0:	88 23       	and	r24, r24
    2bf2:	49 f4       	brne	.+18     	; 0x2c06 <HPB_enInit+0x42>
			MDIO_enSetPinValue(PtrPB->PB_Pin, HIGH); // Activation for Internal Pull-Up
    2bf4:	ea 81       	ldd	r30, Y+2	; 0x02
    2bf6:	fb 81       	ldd	r31, Y+3	; 0x03
    2bf8:	80 81       	ld	r24, Z
    2bfa:	61 e0       	ldi	r22, 0x01	; 1
    2bfc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    2c00:	02 c0       	rjmp	.+4      	; 0x2c06 <HPB_enInit+0x42>
		}
	} else {
		Local_enState = NULL_POINTER;
    2c02:	82 e0       	ldi	r24, 0x02	; 2
    2c04:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enState;
    2c06:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	cf 91       	pop	r28
    2c10:	df 91       	pop	r29
    2c12:	08 95       	ret

00002c14 <HPB_enGetState>:

ErrorState_t HPB_enGetState(PB_t *PtrPB, PB_STATE_t *PtrState) {
    2c14:	df 93       	push	r29
    2c16:	cf 93       	push	r28
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
    2c1c:	a4 97       	sbiw	r28, 0x24	; 36
    2c1e:	0f b6       	in	r0, 0x3f	; 63
    2c20:	f8 94       	cli
    2c22:	de bf       	out	0x3e, r29	; 62
    2c24:	0f be       	out	0x3f, r0	; 63
    2c26:	cd bf       	out	0x3d, r28	; 61
    2c28:	98 a3       	std	Y+32, r25	; 0x20
    2c2a:	8f 8f       	std	Y+31, r24	; 0x1f
    2c2c:	7a a3       	std	Y+34, r23	; 0x22
    2c2e:	69 a3       	std	Y+33, r22	; 0x21
	ErrorState_t Local_enState = SUCCESS;
    2c30:	1d 8e       	std	Y+29, r1	; 0x1d
	if ((NULL != PtrPB) && (NULL != PtrState)) {
    2c32:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c34:	98 a1       	ldd	r25, Y+32	; 0x20
    2c36:	00 97       	sbiw	r24, 0x00	; 0
    2c38:	09 f4       	brne	.+2      	; 0x2c3c <HPB_enGetState+0x28>
    2c3a:	2d c1       	rjmp	.+602    	; 0x2e96 <HPB_enGetState+0x282>
    2c3c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c3e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c40:	00 97       	sbiw	r24, 0x00	; 0
    2c42:	09 f4       	brne	.+2      	; 0x2c46 <HPB_enGetState+0x32>
    2c44:	28 c1       	rjmp	.+592    	; 0x2e96 <HPB_enGetState+0x282>
		u8 Local_u8PBState;
		MDIO_enGetPinValue(PtrPB->PB_Pin, &Local_u8PBState);
    2c46:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2c48:	f8 a1       	ldd	r31, Y+32	; 0x20
    2c4a:	80 81       	ld	r24, Z
    2c4c:	9e 01       	movw	r18, r28
    2c4e:	22 5e       	subi	r18, 0xE2	; 226
    2c50:	3f 4f       	sbci	r19, 0xFF	; 255
    2c52:	b9 01       	movw	r22, r18
    2c54:	0e 94 b8 0b 	call	0x1770	; 0x1770 <MDIO_enGetPinValue>
		switch (PtrPB->PB_Connection) {
    2c58:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2c5a:	f8 a1       	ldd	r31, Y+32	; 0x20
    2c5c:	82 81       	ldd	r24, Z+2	; 0x02
    2c5e:	28 2f       	mov	r18, r24
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	3c a3       	std	Y+36, r19	; 0x24
    2c64:	2b a3       	std	Y+35, r18	; 0x23
    2c66:	8b a1       	ldd	r24, Y+35	; 0x23
    2c68:	9c a1       	ldd	r25, Y+36	; 0x24
    2c6a:	00 97       	sbiw	r24, 0x00	; 0
    2c6c:	39 f0       	breq	.+14     	; 0x2c7c <HPB_enGetState+0x68>
    2c6e:	2b a1       	ldd	r18, Y+35	; 0x23
    2c70:	3c a1       	ldd	r19, Y+36	; 0x24
    2c72:	21 30       	cpi	r18, 0x01	; 1
    2c74:	31 05       	cpc	r19, r1
    2c76:	09 f4       	brne	.+2      	; 0x2c7a <HPB_enGetState+0x66>
    2c78:	86 c0       	rjmp	.+268    	; 0x2d86 <HPB_enGetState+0x172>
    2c7a:	0a c1       	rjmp	.+532    	; 0x2e90 <HPB_enGetState+0x27c>
		case PULL_UP:
			if (0 == Local_u8PBState) {
    2c7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c7e:	88 23       	and	r24, r24
    2c80:	09 f0       	breq	.+2      	; 0x2c84 <HPB_enGetState+0x70>
    2c82:	7c c0       	rjmp	.+248    	; 0x2d7c <HPB_enGetState+0x168>
				*PtrState = PRESSED;
    2c84:	e9 a1       	ldd	r30, Y+33	; 0x21
    2c86:	fa a1       	ldd	r31, Y+34	; 0x22
    2c88:	10 82       	st	Z, r1
				if (PtrPB->PB_Type == TEMP_PB) {
    2c8a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2c8c:	f8 a1       	ldd	r31, Y+32	; 0x20
    2c8e:	81 81       	ldd	r24, Z+1	; 0x01
    2c90:	88 23       	and	r24, r24
    2c92:	09 f0       	breq	.+2      	; 0x2c96 <HPB_enGetState+0x82>
    2c94:	02 c1       	rjmp	.+516    	; 0x2e9a <HPB_enGetState+0x286>
    2c96:	80 e0       	ldi	r24, 0x00	; 0
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	a8 e4       	ldi	r26, 0x48	; 72
    2c9c:	b3 e4       	ldi	r27, 0x43	; 67
    2c9e:	89 8f       	std	Y+25, r24	; 0x19
    2ca0:	9a 8f       	std	Y+26, r25	; 0x1a
    2ca2:	ab 8f       	std	Y+27, r26	; 0x1b
    2ca4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ca8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2caa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	4a e7       	ldi	r20, 0x7A	; 122
    2cb4:	55 e4       	ldi	r21, 0x45	; 69
    2cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	8d 8b       	std	Y+21, r24	; 0x15
    2cc0:	9e 8b       	std	Y+22, r25	; 0x16
    2cc2:	af 8b       	std	Y+23, r26	; 0x17
    2cc4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cc6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cc8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cca:	8f 89       	ldd	r24, Y+23	; 0x17
    2ccc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	40 e8       	ldi	r20, 0x80	; 128
    2cd4:	5f e3       	ldi	r21, 0x3F	; 63
    2cd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cda:	88 23       	and	r24, r24
    2cdc:	2c f4       	brge	.+10     	; 0x2ce8 <HPB_enGetState+0xd4>
		__ticks = 1;
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	9c 8b       	std	Y+20, r25	; 0x14
    2ce4:	8b 8b       	std	Y+19, r24	; 0x13
    2ce6:	3f c0       	rjmp	.+126    	; 0x2d66 <HPB_enGetState+0x152>
	else if (__tmp > 65535)
    2ce8:	6d 89       	ldd	r22, Y+21	; 0x15
    2cea:	7e 89       	ldd	r23, Y+22	; 0x16
    2cec:	8f 89       	ldd	r24, Y+23	; 0x17
    2cee:	98 8d       	ldd	r25, Y+24	; 0x18
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	3f ef       	ldi	r19, 0xFF	; 255
    2cf4:	4f e7       	ldi	r20, 0x7F	; 127
    2cf6:	57 e4       	ldi	r21, 0x47	; 71
    2cf8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cfc:	18 16       	cp	r1, r24
    2cfe:	4c f5       	brge	.+82     	; 0x2d52 <HPB_enGetState+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d00:	69 8d       	ldd	r22, Y+25	; 0x19
    2d02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	40 e2       	ldi	r20, 0x20	; 32
    2d0e:	51 e4       	ldi	r21, 0x41	; 65
    2d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	bc 01       	movw	r22, r24
    2d1a:	cd 01       	movw	r24, r26
    2d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	9c 8b       	std	Y+20, r25	; 0x14
    2d26:	8b 8b       	std	Y+19, r24	; 0x13
    2d28:	0f c0       	rjmp	.+30     	; 0x2d48 <HPB_enGetState+0x134>
    2d2a:	80 e9       	ldi	r24, 0x90	; 144
    2d2c:	91 e0       	ldi	r25, 0x01	; 1
    2d2e:	9a 8b       	std	Y+18, r25	; 0x12
    2d30:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d32:	89 89       	ldd	r24, Y+17	; 0x11
    2d34:	9a 89       	ldd	r25, Y+18	; 0x12
    2d36:	01 97       	sbiw	r24, 0x01	; 1
    2d38:	f1 f7       	brne	.-4      	; 0x2d36 <HPB_enGetState+0x122>
    2d3a:	9a 8b       	std	Y+18, r25	; 0x12
    2d3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d40:	9c 89       	ldd	r25, Y+20	; 0x14
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	9c 8b       	std	Y+20, r25	; 0x14
    2d46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d48:	8b 89       	ldd	r24, Y+19	; 0x13
    2d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d4c:	00 97       	sbiw	r24, 0x00	; 0
    2d4e:	69 f7       	brne	.-38     	; 0x2d2a <HPB_enGetState+0x116>
    2d50:	a4 c0       	rjmp	.+328    	; 0x2e9a <HPB_enGetState+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d52:	6d 89       	ldd	r22, Y+21	; 0x15
    2d54:	7e 89       	ldd	r23, Y+22	; 0x16
    2d56:	8f 89       	ldd	r24, Y+23	; 0x17
    2d58:	98 8d       	ldd	r25, Y+24	; 0x18
    2d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	9c 8b       	std	Y+20, r25	; 0x14
    2d64:	8b 8b       	std	Y+19, r24	; 0x13
    2d66:	8b 89       	ldd	r24, Y+19	; 0x13
    2d68:	9c 89       	ldd	r25, Y+20	; 0x14
    2d6a:	98 8b       	std	Y+16, r25	; 0x10
    2d6c:	8f 87       	std	Y+15, r24	; 0x0f
    2d6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d70:	98 89       	ldd	r25, Y+16	; 0x10
    2d72:	01 97       	sbiw	r24, 0x01	; 1
    2d74:	f1 f7       	brne	.-4      	; 0x2d72 <HPB_enGetState+0x15e>
    2d76:	98 8b       	std	Y+16, r25	; 0x10
    2d78:	8f 87       	std	Y+15, r24	; 0x0f
    2d7a:	8f c0       	rjmp	.+286    	; 0x2e9a <HPB_enGetState+0x286>
					_delay_ms(200); // De-Bouncing
				}
			} else {
				*PtrState = NOT_PRESSED;
    2d7c:	e9 a1       	ldd	r30, Y+33	; 0x21
    2d7e:	fa a1       	ldd	r31, Y+34	; 0x22
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	80 83       	st	Z, r24
    2d84:	8a c0       	rjmp	.+276    	; 0x2e9a <HPB_enGetState+0x286>
			}
			break;
		case PULL_DOWN:
			if (1 == Local_u8PBState) {
    2d86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d88:	81 30       	cpi	r24, 0x01	; 1
    2d8a:	09 f0       	breq	.+2      	; 0x2d8e <HPB_enGetState+0x17a>
    2d8c:	7c c0       	rjmp	.+248    	; 0x2e86 <HPB_enGetState+0x272>
				*PtrState = PRESSED;
    2d8e:	e9 a1       	ldd	r30, Y+33	; 0x21
    2d90:	fa a1       	ldd	r31, Y+34	; 0x22
    2d92:	10 82       	st	Z, r1
				if (PtrPB->PB_Type == TEMP_PB) {
    2d94:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2d96:	f8 a1       	ldd	r31, Y+32	; 0x20
    2d98:	81 81       	ldd	r24, Z+1	; 0x01
    2d9a:	88 23       	and	r24, r24
    2d9c:	09 f0       	breq	.+2      	; 0x2da0 <HPB_enGetState+0x18c>
    2d9e:	7d c0       	rjmp	.+250    	; 0x2e9a <HPB_enGetState+0x286>
    2da0:	80 e0       	ldi	r24, 0x00	; 0
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	a8 e4       	ldi	r26, 0x48	; 72
    2da6:	b3 e4       	ldi	r27, 0x43	; 67
    2da8:	8b 87       	std	Y+11, r24	; 0x0b
    2daa:	9c 87       	std	Y+12, r25	; 0x0c
    2dac:	ad 87       	std	Y+13, r26	; 0x0d
    2dae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2db0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2db2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	4a e7       	ldi	r20, 0x7A	; 122
    2dbe:	55 e4       	ldi	r21, 0x45	; 69
    2dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	8f 83       	std	Y+7, r24	; 0x07
    2dca:	98 87       	std	Y+8, r25	; 0x08
    2dcc:	a9 87       	std	Y+9, r26	; 0x09
    2dce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd2:	78 85       	ldd	r23, Y+8	; 0x08
    2dd4:	89 85       	ldd	r24, Y+9	; 0x09
    2dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd8:	20 e0       	ldi	r18, 0x00	; 0
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	40 e8       	ldi	r20, 0x80	; 128
    2dde:	5f e3       	ldi	r21, 0x3F	; 63
    2de0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2de4:	88 23       	and	r24, r24
    2de6:	2c f4       	brge	.+10     	; 0x2df2 <HPB_enGetState+0x1de>
		__ticks = 1;
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	9e 83       	std	Y+6, r25	; 0x06
    2dee:	8d 83       	std	Y+5, r24	; 0x05
    2df0:	3f c0       	rjmp	.+126    	; 0x2e70 <HPB_enGetState+0x25c>
	else if (__tmp > 65535)
    2df2:	6f 81       	ldd	r22, Y+7	; 0x07
    2df4:	78 85       	ldd	r23, Y+8	; 0x08
    2df6:	89 85       	ldd	r24, Y+9	; 0x09
    2df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	3f ef       	ldi	r19, 0xFF	; 255
    2dfe:	4f e7       	ldi	r20, 0x7F	; 127
    2e00:	57 e4       	ldi	r21, 0x47	; 71
    2e02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e06:	18 16       	cp	r1, r24
    2e08:	4c f5       	brge	.+82     	; 0x2e5c <HPB_enGetState+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	40 e2       	ldi	r20, 0x20	; 32
    2e18:	51 e4       	ldi	r21, 0x41	; 65
    2e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	bc 01       	movw	r22, r24
    2e24:	cd 01       	movw	r24, r26
    2e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	9e 83       	std	Y+6, r25	; 0x06
    2e30:	8d 83       	std	Y+5, r24	; 0x05
    2e32:	0f c0       	rjmp	.+30     	; 0x2e52 <HPB_enGetState+0x23e>
    2e34:	80 e9       	ldi	r24, 0x90	; 144
    2e36:	91 e0       	ldi	r25, 0x01	; 1
    2e38:	9c 83       	std	Y+4, r25	; 0x04
    2e3a:	8b 83       	std	Y+3, r24	; 0x03
    2e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e40:	01 97       	sbiw	r24, 0x01	; 1
    2e42:	f1 f7       	brne	.-4      	; 0x2e40 <HPB_enGetState+0x22c>
    2e44:	9c 83       	std	Y+4, r25	; 0x04
    2e46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e48:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4c:	01 97       	sbiw	r24, 0x01	; 1
    2e4e:	9e 83       	std	Y+6, r25	; 0x06
    2e50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e52:	8d 81       	ldd	r24, Y+5	; 0x05
    2e54:	9e 81       	ldd	r25, Y+6	; 0x06
    2e56:	00 97       	sbiw	r24, 0x00	; 0
    2e58:	69 f7       	brne	.-38     	; 0x2e34 <HPB_enGetState+0x220>
    2e5a:	1f c0       	rjmp	.+62     	; 0x2e9a <HPB_enGetState+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e5e:	78 85       	ldd	r23, Y+8	; 0x08
    2e60:	89 85       	ldd	r24, Y+9	; 0x09
    2e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	9e 83       	std	Y+6, r25	; 0x06
    2e6e:	8d 83       	std	Y+5, r24	; 0x05
    2e70:	8d 81       	ldd	r24, Y+5	; 0x05
    2e72:	9e 81       	ldd	r25, Y+6	; 0x06
    2e74:	9a 83       	std	Y+2, r25	; 0x02
    2e76:	89 83       	std	Y+1, r24	; 0x01
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	f1 f7       	brne	.-4      	; 0x2e7c <HPB_enGetState+0x268>
    2e80:	9a 83       	std	Y+2, r25	; 0x02
    2e82:	89 83       	std	Y+1, r24	; 0x01
    2e84:	0a c0       	rjmp	.+20     	; 0x2e9a <HPB_enGetState+0x286>
					_delay_ms(200); // De-Bouncing
				}
			} else {
				*PtrState = NOT_PRESSED;
    2e86:	e9 a1       	ldd	r30, Y+33	; 0x21
    2e88:	fa a1       	ldd	r31, Y+34	; 0x22
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	80 83       	st	Z, r24
    2e8e:	05 c0       	rjmp	.+10     	; 0x2e9a <HPB_enGetState+0x286>
			}
			break;
		default:
			Local_enState = OUT_OF_RANGE;
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	8d 8f       	std	Y+29, r24	; 0x1d
    2e94:	02 c0       	rjmp	.+4      	; 0x2e9a <HPB_enGetState+0x286>
			break;
		}
	} else {
		Local_enState = NULL_POINTER;
    2e96:	82 e0       	ldi	r24, 0x02	; 2
    2e98:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	return Local_enState;
    2e9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    2e9c:	a4 96       	adiw	r28, 0x24	; 36
    2e9e:	0f b6       	in	r0, 0x3f	; 63
    2ea0:	f8 94       	cli
    2ea2:	de bf       	out	0x3e, r29	; 62
    2ea4:	0f be       	out	0x3f, r0	; 63
    2ea6:	cd bf       	out	0x3d, r28	; 61
    2ea8:	cf 91       	pop	r28
    2eaa:	df 91       	pop	r29
    2eac:	08 95       	ret

00002eae <HMSSD_enInit>:
#include <MDIO_interface.h>
#include <HMSSD_private.h>
#include <HMSSD_config.h>
#include <HMSSD_interface.h>

ErrorState_t HMSSD_enInit(MSSD_t *PtrMSSD) {
    2eae:	df 93       	push	r29
    2eb0:	cf 93       	push	r28
    2eb2:	00 d0       	rcall	.+0      	; 0x2eb4 <HMSSD_enInit+0x6>
    2eb4:	0f 92       	push	r0
    2eb6:	cd b7       	in	r28, 0x3d	; 61
    2eb8:	de b7       	in	r29, 0x3e	; 62
    2eba:	9b 83       	std	Y+3, r25	; 0x03
    2ebc:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    2ebe:	19 82       	std	Y+1, r1	; 0x01
	if (PtrMSSD != NULL) {
    2ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ec4:	00 97       	sbiw	r24, 0x00	; 0
    2ec6:	09 f4       	brne	.+2      	; 0x2eca <HMSSD_enInit+0x1c>
    2ec8:	6f c0       	rjmp	.+222    	; 0x2fa8 <HMSSD_enInit+0xfa>
		MDIO_enSetPinDirection(PtrMSSD->MSSD_Pin_A, OUTPUT);
    2eca:	ea 81       	ldd	r30, Y+2	; 0x02
    2ecc:	fb 81       	ldd	r31, Y+3	; 0x03
    2ece:	81 81       	ldd	r24, Z+1	; 0x01
    2ed0:	61 e0       	ldi	r22, 0x01	; 1
    2ed2:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
		MDIO_enSetPinDirection(PtrMSSD->MSSD_Pin_B, OUTPUT);
    2ed6:	ea 81       	ldd	r30, Y+2	; 0x02
    2ed8:	fb 81       	ldd	r31, Y+3	; 0x03
    2eda:	82 81       	ldd	r24, Z+2	; 0x02
    2edc:	61 e0       	ldi	r22, 0x01	; 1
    2ede:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
		MDIO_enSetPinDirection(PtrMSSD->MSSD_Pin_C, OUTPUT);
    2ee2:	ea 81       	ldd	r30, Y+2	; 0x02
    2ee4:	fb 81       	ldd	r31, Y+3	; 0x03
    2ee6:	83 81       	ldd	r24, Z+3	; 0x03
    2ee8:	61 e0       	ldi	r22, 0x01	; 1
    2eea:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
		MDIO_enSetPinDirection(PtrMSSD->MSSD_Pin_D, OUTPUT);
    2eee:	ea 81       	ldd	r30, Y+2	; 0x02
    2ef0:	fb 81       	ldd	r31, Y+3	; 0x03
    2ef2:	84 81       	ldd	r24, Z+4	; 0x04
    2ef4:	61 e0       	ldi	r22, 0x01	; 1
    2ef6:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
		MDIO_enSetPinDirection(PtrMSSD->MSSD_Pin_E, OUTPUT);
    2efa:	ea 81       	ldd	r30, Y+2	; 0x02
    2efc:	fb 81       	ldd	r31, Y+3	; 0x03
    2efe:	85 81       	ldd	r24, Z+5	; 0x05
    2f00:	61 e0       	ldi	r22, 0x01	; 1
    2f02:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
		MDIO_enSetPinDirection(PtrMSSD->MSSD_Pin_F, OUTPUT);
    2f06:	ea 81       	ldd	r30, Y+2	; 0x02
    2f08:	fb 81       	ldd	r31, Y+3	; 0x03
    2f0a:	86 81       	ldd	r24, Z+6	; 0x06
    2f0c:	61 e0       	ldi	r22, 0x01	; 1
    2f0e:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
		MDIO_enSetPinDirection(PtrMSSD->MSSD_Pin_G, OUTPUT);
    2f12:	ea 81       	ldd	r30, Y+2	; 0x02
    2f14:	fb 81       	ldd	r31, Y+3	; 0x03
    2f16:	87 81       	ldd	r24, Z+7	; 0x07
    2f18:	61 e0       	ldi	r22, 0x01	; 1
    2f1a:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
		MDIO_enSetPinDirection(PtrMSSD->MSSD_Pin_DP, OUTPUT);
    2f1e:	ea 81       	ldd	r30, Y+2	; 0x02
    2f20:	fb 81       	ldd	r31, Y+3	; 0x03
    2f22:	80 85       	ldd	r24, Z+8	; 0x08
    2f24:	61 e0       	ldi	r22, 0x01	; 1
    2f26:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
		MDIO_enSetPinDirection(PtrMSSD->MSSD_Pin_EN1, OUTPUT);
    2f2a:	ea 81       	ldd	r30, Y+2	; 0x02
    2f2c:	fb 81       	ldd	r31, Y+3	; 0x03
    2f2e:	81 85       	ldd	r24, Z+9	; 0x09
    2f30:	61 e0       	ldi	r22, 0x01	; 1
    2f32:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
		MDIO_enSetPinDirection(PtrMSSD->MSSD_Pin_EN2, OUTPUT);
    2f36:	ea 81       	ldd	r30, Y+2	; 0x02
    2f38:	fb 81       	ldd	r31, Y+3	; 0x03
    2f3a:	82 85       	ldd	r24, Z+10	; 0x0a
    2f3c:	61 e0       	ldi	r22, 0x01	; 1
    2f3e:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
		if (PtrMSSD->MSSD_Type == C_CATHODE) {
    2f42:	ea 81       	ldd	r30, Y+2	; 0x02
    2f44:	fb 81       	ldd	r31, Y+3	; 0x03
    2f46:	80 81       	ld	r24, Z
    2f48:	88 23       	and	r24, r24
    2f4a:	99 f4       	brne	.+38     	; 0x2f72 <HMSSD_enInit+0xc4>
			// Initial Value for Enable in CC --> High
			MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN1, HIGH);
    2f4c:	ea 81       	ldd	r30, Y+2	; 0x02
    2f4e:	fb 81       	ldd	r31, Y+3	; 0x03
    2f50:	81 85       	ldd	r24, Z+9	; 0x09
    2f52:	61 e0       	ldi	r22, 0x01	; 1
    2f54:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
			MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN2, HIGH);
    2f58:	ea 81       	ldd	r30, Y+2	; 0x02
    2f5a:	fb 81       	ldd	r31, Y+3	; 0x03
    2f5c:	82 85       	ldd	r24, Z+10	; 0x0a
    2f5e:	61 e0       	ldi	r22, 0x01	; 1
    2f60:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
			MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_DP, LOW);
    2f64:	ea 81       	ldd	r30, Y+2	; 0x02
    2f66:	fb 81       	ldd	r31, Y+3	; 0x03
    2f68:	80 85       	ldd	r24, Z+8	; 0x08
    2f6a:	60 e0       	ldi	r22, 0x00	; 0
    2f6c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    2f70:	1d c0       	rjmp	.+58     	; 0x2fac <HMSSD_enInit+0xfe>
		} else if (PtrMSSD->MSSD_Type == C_ANODE) {
    2f72:	ea 81       	ldd	r30, Y+2	; 0x02
    2f74:	fb 81       	ldd	r31, Y+3	; 0x03
    2f76:	80 81       	ld	r24, Z
    2f78:	81 30       	cpi	r24, 0x01	; 1
    2f7a:	99 f4       	brne	.+38     	; 0x2fa2 <HMSSD_enInit+0xf4>
			// Initial Value for Enable in CA --> Low
			MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN1, LOW);
    2f7c:	ea 81       	ldd	r30, Y+2	; 0x02
    2f7e:	fb 81       	ldd	r31, Y+3	; 0x03
    2f80:	81 85       	ldd	r24, Z+9	; 0x09
    2f82:	60 e0       	ldi	r22, 0x00	; 0
    2f84:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
			MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN2, LOW);
    2f88:	ea 81       	ldd	r30, Y+2	; 0x02
    2f8a:	fb 81       	ldd	r31, Y+3	; 0x03
    2f8c:	82 85       	ldd	r24, Z+10	; 0x0a
    2f8e:	60 e0       	ldi	r22, 0x00	; 0
    2f90:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
			MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_DP, HIGH);
    2f94:	ea 81       	ldd	r30, Y+2	; 0x02
    2f96:	fb 81       	ldd	r31, Y+3	; 0x03
    2f98:	80 85       	ldd	r24, Z+8	; 0x08
    2f9a:	61 e0       	ldi	r22, 0x01	; 1
    2f9c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    2fa0:	05 c0       	rjmp	.+10     	; 0x2fac <HMSSD_enInit+0xfe>
		} else {
			Local_enState = OUT_OF_RANGE;
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	89 83       	std	Y+1, r24	; 0x01
    2fa6:	02 c0       	rjmp	.+4      	; 0x2fac <HMSSD_enInit+0xfe>
		}
	} else {
		Local_enState = NULL_POINTER;
    2fa8:	82 e0       	ldi	r24, 0x02	; 2
    2faa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enState;
    2fac:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fae:	0f 90       	pop	r0
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	cf 91       	pop	r28
    2fb6:	df 91       	pop	r29
    2fb8:	08 95       	ret

00002fba <HMSSD_enDisplayIntegerNumber>:

ErrorState_t HMSSD_enDisplayIntegerNumber(u8 copy_u8Number, MSSD_t *PtrMSSD) {
    2fba:	df 93       	push	r29
    2fbc:	cf 93       	push	r28
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
    2fc2:	c8 54       	subi	r28, 0x48	; 72
    2fc4:	d0 40       	sbci	r29, 0x00	; 0
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	de bf       	out	0x3e, r29	; 62
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	cd bf       	out	0x3d, r28	; 61
    2fd0:	8e af       	std	Y+62, r24	; 0x3e
    2fd2:	fe 01       	movw	r30, r28
    2fd4:	ff 96       	adiw	r30, 0x3f	; 63
    2fd6:	71 83       	std	Z+1, r23	; 0x01
    2fd8:	60 83       	st	Z, r22
	ErrorState_t Local_enState = SUCCESS;
    2fda:	1d ae       	std	Y+61, r1	; 0x3d
	if (copy_u8Number < 0 || copy_u8Number > 99) {
    2fdc:	8e ad       	ldd	r24, Y+62	; 0x3e
    2fde:	84 36       	cpi	r24, 0x64	; 100
    2fe0:	20 f0       	brcs	.+8      	; 0x2fea <HMSSD_enDisplayIntegerNumber+0x30>
		Local_enState = OUT_OF_RANGE;
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	8d af       	std	Y+61, r24	; 0x3d
    2fe6:	0c 94 15 26 	jmp	0x4c2a	; 0x4c2a <HMSSD_enDisplayIntegerNumber+0x1c70>
	} else {
		if (PtrMSSD != NULL) {
    2fea:	fe 01       	movw	r30, r28
    2fec:	ff 96       	adiw	r30, 0x3f	; 63
    2fee:	80 81       	ld	r24, Z
    2ff0:	91 81       	ldd	r25, Z+1	; 0x01
    2ff2:	00 97       	sbiw	r24, 0x00	; 0
    2ff4:	11 f4       	brne	.+4      	; 0x2ffa <HMSSD_enDisplayIntegerNumber+0x40>
    2ff6:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <HMSSD_enDisplayIntegerNumber+0x1c6c>
			u8 Local_u8Tens = copy_u8Number / 10;
    2ffa:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ffc:	9a e0       	ldi	r25, 0x0A	; 10
    2ffe:	69 2f       	mov	r22, r25
    3000:	0e 94 00 41 	call	0x8200	; 0x8200 <__udivmodqi4>
    3004:	8c af       	std	Y+60, r24	; 0x3c
			u8 Local_u8Units = copy_u8Number % 10;
    3006:	8e ad       	ldd	r24, Y+62	; 0x3e
    3008:	9a e0       	ldi	r25, 0x0A	; 10
    300a:	69 2f       	mov	r22, r25
    300c:	0e 94 00 41 	call	0x8200	; 0x8200 <__udivmodqi4>
    3010:	89 2f       	mov	r24, r25
    3012:	8b af       	std	Y+59, r24	; 0x3b
			u16 i;
			if (PtrMSSD->MSSD_Type == C_CATHODE) {
    3014:	fe 01       	movw	r30, r28
    3016:	ff 96       	adiw	r30, 0x3f	; 63
    3018:	01 90       	ld	r0, Z+
    301a:	f0 81       	ld	r31, Z
    301c:	e0 2d       	mov	r30, r0
    301e:	80 81       	ld	r24, Z
    3020:	88 23       	and	r24, r24
    3022:	09 f0       	breq	.+2      	; 0x3026 <HMSSD_enDisplayIntegerNumber+0x6c>
    3024:	fa c6       	rjmp	.+3572   	; 0x3e1a <HMSSD_enDisplayIntegerNumber+0xe60>
				for (i = 0; i < PtrMSSD->MSSD_Duration; i++) {
    3026:	1a ae       	std	Y+58, r1	; 0x3a
    3028:	19 ae       	std	Y+57, r1	; 0x39
    302a:	e9 c6       	rjmp	.+3538   	; 0x3dfe <HMSSD_enDisplayIntegerNumber+0xe44>
					// Enable SSD1
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN1, LOW);
    302c:	fe 01       	movw	r30, r28
    302e:	ff 96       	adiw	r30, 0x3f	; 63
    3030:	01 90       	ld	r0, Z+
    3032:	f0 81       	ld	r31, Z
    3034:	e0 2d       	mov	r30, r0
    3036:	81 85       	ldd	r24, Z+9	; 0x09
    3038:	60 e0       	ldi	r22, 0x00	; 0
    303a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					switch (Local_u8Tens) {
    303e:	8c ad       	ldd	r24, Y+60	; 0x3c
    3040:	28 2f       	mov	r18, r24
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	29 96       	adiw	r28, 0x09	; 9
    3046:	3f af       	std	Y+63, r19	; 0x3f
    3048:	2e af       	std	Y+62, r18	; 0x3e
    304a:	29 97       	sbiw	r28, 0x09	; 9
    304c:	29 96       	adiw	r28, 0x09	; 9
    304e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3050:	9f ad       	ldd	r25, Y+63	; 0x3f
    3052:	29 97       	sbiw	r28, 0x09	; 9
    3054:	84 30       	cpi	r24, 0x04	; 4
    3056:	91 05       	cpc	r25, r1
    3058:	09 f4       	brne	.+2      	; 0x305c <HMSSD_enDisplayIntegerNumber+0xa2>
    305a:	60 c1       	rjmp	.+704    	; 0x331c <HMSSD_enDisplayIntegerNumber+0x362>
    305c:	29 96       	adiw	r28, 0x09	; 9
    305e:	2e ad       	ldd	r18, Y+62	; 0x3e
    3060:	3f ad       	ldd	r19, Y+63	; 0x3f
    3062:	29 97       	sbiw	r28, 0x09	; 9
    3064:	25 30       	cpi	r18, 0x05	; 5
    3066:	31 05       	cpc	r19, r1
    3068:	44 f5       	brge	.+80     	; 0x30ba <HMSSD_enDisplayIntegerNumber+0x100>
    306a:	29 96       	adiw	r28, 0x09	; 9
    306c:	8e ad       	ldd	r24, Y+62	; 0x3e
    306e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3070:	29 97       	sbiw	r28, 0x09	; 9
    3072:	81 30       	cpi	r24, 0x01	; 1
    3074:	91 05       	cpc	r25, r1
    3076:	09 f4       	brne	.+2      	; 0x307a <HMSSD_enDisplayIntegerNumber+0xc0>
    3078:	91 c0       	rjmp	.+290    	; 0x319c <HMSSD_enDisplayIntegerNumber+0x1e2>
    307a:	29 96       	adiw	r28, 0x09	; 9
    307c:	2e ad       	ldd	r18, Y+62	; 0x3e
    307e:	3f ad       	ldd	r19, Y+63	; 0x3f
    3080:	29 97       	sbiw	r28, 0x09	; 9
    3082:	22 30       	cpi	r18, 0x02	; 2
    3084:	31 05       	cpc	r19, r1
    3086:	44 f4       	brge	.+16     	; 0x3098 <HMSSD_enDisplayIntegerNumber+0xde>
    3088:	29 96       	adiw	r28, 0x09	; 9
    308a:	8e ad       	ldd	r24, Y+62	; 0x3e
    308c:	9f ad       	ldd	r25, Y+63	; 0x3f
    308e:	29 97       	sbiw	r28, 0x09	; 9
    3090:	00 97       	sbiw	r24, 0x00	; 0
    3092:	09 f4       	brne	.+2      	; 0x3096 <HMSSD_enDisplayIntegerNumber+0xdc>
    3094:	43 c0       	rjmp	.+134    	; 0x311c <HMSSD_enDisplayIntegerNumber+0x162>
    3096:	c1 c2       	rjmp	.+1410   	; 0x361a <HMSSD_enDisplayIntegerNumber+0x660>
    3098:	29 96       	adiw	r28, 0x09	; 9
    309a:	2e ad       	ldd	r18, Y+62	; 0x3e
    309c:	3f ad       	ldd	r19, Y+63	; 0x3f
    309e:	29 97       	sbiw	r28, 0x09	; 9
    30a0:	22 30       	cpi	r18, 0x02	; 2
    30a2:	31 05       	cpc	r19, r1
    30a4:	09 f4       	brne	.+2      	; 0x30a8 <HMSSD_enDisplayIntegerNumber+0xee>
    30a6:	ba c0       	rjmp	.+372    	; 0x321c <HMSSD_enDisplayIntegerNumber+0x262>
    30a8:	29 96       	adiw	r28, 0x09	; 9
    30aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    30ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    30ae:	29 97       	sbiw	r28, 0x09	; 9
    30b0:	83 30       	cpi	r24, 0x03	; 3
    30b2:	91 05       	cpc	r25, r1
    30b4:	09 f4       	brne	.+2      	; 0x30b8 <HMSSD_enDisplayIntegerNumber+0xfe>
    30b6:	f2 c0       	rjmp	.+484    	; 0x329c <HMSSD_enDisplayIntegerNumber+0x2e2>
    30b8:	b0 c2       	rjmp	.+1376   	; 0x361a <HMSSD_enDisplayIntegerNumber+0x660>
    30ba:	29 96       	adiw	r28, 0x09	; 9
    30bc:	2e ad       	ldd	r18, Y+62	; 0x3e
    30be:	3f ad       	ldd	r19, Y+63	; 0x3f
    30c0:	29 97       	sbiw	r28, 0x09	; 9
    30c2:	27 30       	cpi	r18, 0x07	; 7
    30c4:	31 05       	cpc	r19, r1
    30c6:	09 f4       	brne	.+2      	; 0x30ca <HMSSD_enDisplayIntegerNumber+0x110>
    30c8:	e9 c1       	rjmp	.+978    	; 0x349c <HMSSD_enDisplayIntegerNumber+0x4e2>
    30ca:	29 96       	adiw	r28, 0x09	; 9
    30cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    30ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    30d0:	29 97       	sbiw	r28, 0x09	; 9
    30d2:	88 30       	cpi	r24, 0x08	; 8
    30d4:	91 05       	cpc	r25, r1
    30d6:	8c f4       	brge	.+34     	; 0x30fa <HMSSD_enDisplayIntegerNumber+0x140>
    30d8:	29 96       	adiw	r28, 0x09	; 9
    30da:	2e ad       	ldd	r18, Y+62	; 0x3e
    30dc:	3f ad       	ldd	r19, Y+63	; 0x3f
    30de:	29 97       	sbiw	r28, 0x09	; 9
    30e0:	25 30       	cpi	r18, 0x05	; 5
    30e2:	31 05       	cpc	r19, r1
    30e4:	09 f4       	brne	.+2      	; 0x30e8 <HMSSD_enDisplayIntegerNumber+0x12e>
    30e6:	5a c1       	rjmp	.+692    	; 0x339c <HMSSD_enDisplayIntegerNumber+0x3e2>
    30e8:	29 96       	adiw	r28, 0x09	; 9
    30ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    30ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    30ee:	29 97       	sbiw	r28, 0x09	; 9
    30f0:	86 30       	cpi	r24, 0x06	; 6
    30f2:	91 05       	cpc	r25, r1
    30f4:	09 f4       	brne	.+2      	; 0x30f8 <HMSSD_enDisplayIntegerNumber+0x13e>
    30f6:	92 c1       	rjmp	.+804    	; 0x341c <HMSSD_enDisplayIntegerNumber+0x462>
    30f8:	90 c2       	rjmp	.+1312   	; 0x361a <HMSSD_enDisplayIntegerNumber+0x660>
    30fa:	29 96       	adiw	r28, 0x09	; 9
    30fc:	2e ad       	ldd	r18, Y+62	; 0x3e
    30fe:	3f ad       	ldd	r19, Y+63	; 0x3f
    3100:	29 97       	sbiw	r28, 0x09	; 9
    3102:	28 30       	cpi	r18, 0x08	; 8
    3104:	31 05       	cpc	r19, r1
    3106:	09 f4       	brne	.+2      	; 0x310a <HMSSD_enDisplayIntegerNumber+0x150>
    3108:	09 c2       	rjmp	.+1042   	; 0x351c <HMSSD_enDisplayIntegerNumber+0x562>
    310a:	29 96       	adiw	r28, 0x09	; 9
    310c:	8e ad       	ldd	r24, Y+62	; 0x3e
    310e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3110:	29 97       	sbiw	r28, 0x09	; 9
    3112:	89 30       	cpi	r24, 0x09	; 9
    3114:	91 05       	cpc	r25, r1
    3116:	09 f4       	brne	.+2      	; 0x311a <HMSSD_enDisplayIntegerNumber+0x160>
    3118:	41 c2       	rjmp	.+1154   	; 0x359c <HMSSD_enDisplayIntegerNumber+0x5e2>
    311a:	7f c2       	rjmp	.+1278   	; 0x361a <HMSSD_enDisplayIntegerNumber+0x660>
					case 0:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    311c:	fe 01       	movw	r30, r28
    311e:	ff 96       	adiw	r30, 0x3f	; 63
    3120:	01 90       	ld	r0, Z+
    3122:	f0 81       	ld	r31, Z
    3124:	e0 2d       	mov	r30, r0
    3126:	81 81       	ldd	r24, Z+1	; 0x01
    3128:	61 e0       	ldi	r22, 0x01	; 1
    312a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    312e:	fe 01       	movw	r30, r28
    3130:	ff 96       	adiw	r30, 0x3f	; 63
    3132:	01 90       	ld	r0, Z+
    3134:	f0 81       	ld	r31, Z
    3136:	e0 2d       	mov	r30, r0
    3138:	82 81       	ldd	r24, Z+2	; 0x02
    313a:	61 e0       	ldi	r22, 0x01	; 1
    313c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    3140:	fe 01       	movw	r30, r28
    3142:	ff 96       	adiw	r30, 0x3f	; 63
    3144:	01 90       	ld	r0, Z+
    3146:	f0 81       	ld	r31, Z
    3148:	e0 2d       	mov	r30, r0
    314a:	83 81       	ldd	r24, Z+3	; 0x03
    314c:	61 e0       	ldi	r22, 0x01	; 1
    314e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    3152:	fe 01       	movw	r30, r28
    3154:	ff 96       	adiw	r30, 0x3f	; 63
    3156:	01 90       	ld	r0, Z+
    3158:	f0 81       	ld	r31, Z
    315a:	e0 2d       	mov	r30, r0
    315c:	84 81       	ldd	r24, Z+4	; 0x04
    315e:	61 e0       	ldi	r22, 0x01	; 1
    3160:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    3164:	fe 01       	movw	r30, r28
    3166:	ff 96       	adiw	r30, 0x3f	; 63
    3168:	01 90       	ld	r0, Z+
    316a:	f0 81       	ld	r31, Z
    316c:	e0 2d       	mov	r30, r0
    316e:	85 81       	ldd	r24, Z+5	; 0x05
    3170:	61 e0       	ldi	r22, 0x01	; 1
    3172:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    3176:	fe 01       	movw	r30, r28
    3178:	ff 96       	adiw	r30, 0x3f	; 63
    317a:	01 90       	ld	r0, Z+
    317c:	f0 81       	ld	r31, Z
    317e:	e0 2d       	mov	r30, r0
    3180:	86 81       	ldd	r24, Z+6	; 0x06
    3182:	61 e0       	ldi	r22, 0x01	; 1
    3184:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    3188:	fe 01       	movw	r30, r28
    318a:	ff 96       	adiw	r30, 0x3f	; 63
    318c:	01 90       	ld	r0, Z+
    318e:	f0 81       	ld	r31, Z
    3190:	e0 2d       	mov	r30, r0
    3192:	87 81       	ldd	r24, Z+7	; 0x07
    3194:	60 e0       	ldi	r22, 0x00	; 0
    3196:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    319a:	3f c2       	rjmp	.+1150   	; 0x361a <HMSSD_enDisplayIntegerNumber+0x660>
						break;
					case 1:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    319c:	fe 01       	movw	r30, r28
    319e:	ff 96       	adiw	r30, 0x3f	; 63
    31a0:	01 90       	ld	r0, Z+
    31a2:	f0 81       	ld	r31, Z
    31a4:	e0 2d       	mov	r30, r0
    31a6:	81 81       	ldd	r24, Z+1	; 0x01
    31a8:	60 e0       	ldi	r22, 0x00	; 0
    31aa:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    31ae:	fe 01       	movw	r30, r28
    31b0:	ff 96       	adiw	r30, 0x3f	; 63
    31b2:	01 90       	ld	r0, Z+
    31b4:	f0 81       	ld	r31, Z
    31b6:	e0 2d       	mov	r30, r0
    31b8:	82 81       	ldd	r24, Z+2	; 0x02
    31ba:	61 e0       	ldi	r22, 0x01	; 1
    31bc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    31c0:	fe 01       	movw	r30, r28
    31c2:	ff 96       	adiw	r30, 0x3f	; 63
    31c4:	01 90       	ld	r0, Z+
    31c6:	f0 81       	ld	r31, Z
    31c8:	e0 2d       	mov	r30, r0
    31ca:	83 81       	ldd	r24, Z+3	; 0x03
    31cc:	61 e0       	ldi	r22, 0x01	; 1
    31ce:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    31d2:	fe 01       	movw	r30, r28
    31d4:	ff 96       	adiw	r30, 0x3f	; 63
    31d6:	01 90       	ld	r0, Z+
    31d8:	f0 81       	ld	r31, Z
    31da:	e0 2d       	mov	r30, r0
    31dc:	84 81       	ldd	r24, Z+4	; 0x04
    31de:	60 e0       	ldi	r22, 0x00	; 0
    31e0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    31e4:	fe 01       	movw	r30, r28
    31e6:	ff 96       	adiw	r30, 0x3f	; 63
    31e8:	01 90       	ld	r0, Z+
    31ea:	f0 81       	ld	r31, Z
    31ec:	e0 2d       	mov	r30, r0
    31ee:	85 81       	ldd	r24, Z+5	; 0x05
    31f0:	60 e0       	ldi	r22, 0x00	; 0
    31f2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    31f6:	fe 01       	movw	r30, r28
    31f8:	ff 96       	adiw	r30, 0x3f	; 63
    31fa:	01 90       	ld	r0, Z+
    31fc:	f0 81       	ld	r31, Z
    31fe:	e0 2d       	mov	r30, r0
    3200:	86 81       	ldd	r24, Z+6	; 0x06
    3202:	60 e0       	ldi	r22, 0x00	; 0
    3204:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    3208:	fe 01       	movw	r30, r28
    320a:	ff 96       	adiw	r30, 0x3f	; 63
    320c:	01 90       	ld	r0, Z+
    320e:	f0 81       	ld	r31, Z
    3210:	e0 2d       	mov	r30, r0
    3212:	87 81       	ldd	r24, Z+7	; 0x07
    3214:	60 e0       	ldi	r22, 0x00	; 0
    3216:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    321a:	ff c1       	rjmp	.+1022   	; 0x361a <HMSSD_enDisplayIntegerNumber+0x660>
						break;
					case 2:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    321c:	fe 01       	movw	r30, r28
    321e:	ff 96       	adiw	r30, 0x3f	; 63
    3220:	01 90       	ld	r0, Z+
    3222:	f0 81       	ld	r31, Z
    3224:	e0 2d       	mov	r30, r0
    3226:	81 81       	ldd	r24, Z+1	; 0x01
    3228:	61 e0       	ldi	r22, 0x01	; 1
    322a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    322e:	fe 01       	movw	r30, r28
    3230:	ff 96       	adiw	r30, 0x3f	; 63
    3232:	01 90       	ld	r0, Z+
    3234:	f0 81       	ld	r31, Z
    3236:	e0 2d       	mov	r30, r0
    3238:	82 81       	ldd	r24, Z+2	; 0x02
    323a:	61 e0       	ldi	r22, 0x01	; 1
    323c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    3240:	fe 01       	movw	r30, r28
    3242:	ff 96       	adiw	r30, 0x3f	; 63
    3244:	01 90       	ld	r0, Z+
    3246:	f0 81       	ld	r31, Z
    3248:	e0 2d       	mov	r30, r0
    324a:	83 81       	ldd	r24, Z+3	; 0x03
    324c:	60 e0       	ldi	r22, 0x00	; 0
    324e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    3252:	fe 01       	movw	r30, r28
    3254:	ff 96       	adiw	r30, 0x3f	; 63
    3256:	01 90       	ld	r0, Z+
    3258:	f0 81       	ld	r31, Z
    325a:	e0 2d       	mov	r30, r0
    325c:	84 81       	ldd	r24, Z+4	; 0x04
    325e:	61 e0       	ldi	r22, 0x01	; 1
    3260:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    3264:	fe 01       	movw	r30, r28
    3266:	ff 96       	adiw	r30, 0x3f	; 63
    3268:	01 90       	ld	r0, Z+
    326a:	f0 81       	ld	r31, Z
    326c:	e0 2d       	mov	r30, r0
    326e:	85 81       	ldd	r24, Z+5	; 0x05
    3270:	61 e0       	ldi	r22, 0x01	; 1
    3272:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    3276:	fe 01       	movw	r30, r28
    3278:	ff 96       	adiw	r30, 0x3f	; 63
    327a:	01 90       	ld	r0, Z+
    327c:	f0 81       	ld	r31, Z
    327e:	e0 2d       	mov	r30, r0
    3280:	86 81       	ldd	r24, Z+6	; 0x06
    3282:	60 e0       	ldi	r22, 0x00	; 0
    3284:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    3288:	fe 01       	movw	r30, r28
    328a:	ff 96       	adiw	r30, 0x3f	; 63
    328c:	01 90       	ld	r0, Z+
    328e:	f0 81       	ld	r31, Z
    3290:	e0 2d       	mov	r30, r0
    3292:	87 81       	ldd	r24, Z+7	; 0x07
    3294:	61 e0       	ldi	r22, 0x01	; 1
    3296:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    329a:	bf c1       	rjmp	.+894    	; 0x361a <HMSSD_enDisplayIntegerNumber+0x660>
						break;
					case 3:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    329c:	fe 01       	movw	r30, r28
    329e:	ff 96       	adiw	r30, 0x3f	; 63
    32a0:	01 90       	ld	r0, Z+
    32a2:	f0 81       	ld	r31, Z
    32a4:	e0 2d       	mov	r30, r0
    32a6:	81 81       	ldd	r24, Z+1	; 0x01
    32a8:	61 e0       	ldi	r22, 0x01	; 1
    32aa:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    32ae:	fe 01       	movw	r30, r28
    32b0:	ff 96       	adiw	r30, 0x3f	; 63
    32b2:	01 90       	ld	r0, Z+
    32b4:	f0 81       	ld	r31, Z
    32b6:	e0 2d       	mov	r30, r0
    32b8:	82 81       	ldd	r24, Z+2	; 0x02
    32ba:	61 e0       	ldi	r22, 0x01	; 1
    32bc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    32c0:	fe 01       	movw	r30, r28
    32c2:	ff 96       	adiw	r30, 0x3f	; 63
    32c4:	01 90       	ld	r0, Z+
    32c6:	f0 81       	ld	r31, Z
    32c8:	e0 2d       	mov	r30, r0
    32ca:	83 81       	ldd	r24, Z+3	; 0x03
    32cc:	61 e0       	ldi	r22, 0x01	; 1
    32ce:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    32d2:	fe 01       	movw	r30, r28
    32d4:	ff 96       	adiw	r30, 0x3f	; 63
    32d6:	01 90       	ld	r0, Z+
    32d8:	f0 81       	ld	r31, Z
    32da:	e0 2d       	mov	r30, r0
    32dc:	84 81       	ldd	r24, Z+4	; 0x04
    32de:	61 e0       	ldi	r22, 0x01	; 1
    32e0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    32e4:	fe 01       	movw	r30, r28
    32e6:	ff 96       	adiw	r30, 0x3f	; 63
    32e8:	01 90       	ld	r0, Z+
    32ea:	f0 81       	ld	r31, Z
    32ec:	e0 2d       	mov	r30, r0
    32ee:	85 81       	ldd	r24, Z+5	; 0x05
    32f0:	60 e0       	ldi	r22, 0x00	; 0
    32f2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    32f6:	fe 01       	movw	r30, r28
    32f8:	ff 96       	adiw	r30, 0x3f	; 63
    32fa:	01 90       	ld	r0, Z+
    32fc:	f0 81       	ld	r31, Z
    32fe:	e0 2d       	mov	r30, r0
    3300:	86 81       	ldd	r24, Z+6	; 0x06
    3302:	60 e0       	ldi	r22, 0x00	; 0
    3304:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    3308:	fe 01       	movw	r30, r28
    330a:	ff 96       	adiw	r30, 0x3f	; 63
    330c:	01 90       	ld	r0, Z+
    330e:	f0 81       	ld	r31, Z
    3310:	e0 2d       	mov	r30, r0
    3312:	87 81       	ldd	r24, Z+7	; 0x07
    3314:	61 e0       	ldi	r22, 0x01	; 1
    3316:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    331a:	7f c1       	rjmp	.+766    	; 0x361a <HMSSD_enDisplayIntegerNumber+0x660>
						break;
					case 4:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    331c:	fe 01       	movw	r30, r28
    331e:	ff 96       	adiw	r30, 0x3f	; 63
    3320:	01 90       	ld	r0, Z+
    3322:	f0 81       	ld	r31, Z
    3324:	e0 2d       	mov	r30, r0
    3326:	81 81       	ldd	r24, Z+1	; 0x01
    3328:	60 e0       	ldi	r22, 0x00	; 0
    332a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    332e:	fe 01       	movw	r30, r28
    3330:	ff 96       	adiw	r30, 0x3f	; 63
    3332:	01 90       	ld	r0, Z+
    3334:	f0 81       	ld	r31, Z
    3336:	e0 2d       	mov	r30, r0
    3338:	82 81       	ldd	r24, Z+2	; 0x02
    333a:	61 e0       	ldi	r22, 0x01	; 1
    333c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    3340:	fe 01       	movw	r30, r28
    3342:	ff 96       	adiw	r30, 0x3f	; 63
    3344:	01 90       	ld	r0, Z+
    3346:	f0 81       	ld	r31, Z
    3348:	e0 2d       	mov	r30, r0
    334a:	83 81       	ldd	r24, Z+3	; 0x03
    334c:	61 e0       	ldi	r22, 0x01	; 1
    334e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    3352:	fe 01       	movw	r30, r28
    3354:	ff 96       	adiw	r30, 0x3f	; 63
    3356:	01 90       	ld	r0, Z+
    3358:	f0 81       	ld	r31, Z
    335a:	e0 2d       	mov	r30, r0
    335c:	84 81       	ldd	r24, Z+4	; 0x04
    335e:	60 e0       	ldi	r22, 0x00	; 0
    3360:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    3364:	fe 01       	movw	r30, r28
    3366:	ff 96       	adiw	r30, 0x3f	; 63
    3368:	01 90       	ld	r0, Z+
    336a:	f0 81       	ld	r31, Z
    336c:	e0 2d       	mov	r30, r0
    336e:	85 81       	ldd	r24, Z+5	; 0x05
    3370:	60 e0       	ldi	r22, 0x00	; 0
    3372:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    3376:	fe 01       	movw	r30, r28
    3378:	ff 96       	adiw	r30, 0x3f	; 63
    337a:	01 90       	ld	r0, Z+
    337c:	f0 81       	ld	r31, Z
    337e:	e0 2d       	mov	r30, r0
    3380:	86 81       	ldd	r24, Z+6	; 0x06
    3382:	61 e0       	ldi	r22, 0x01	; 1
    3384:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    3388:	fe 01       	movw	r30, r28
    338a:	ff 96       	adiw	r30, 0x3f	; 63
    338c:	01 90       	ld	r0, Z+
    338e:	f0 81       	ld	r31, Z
    3390:	e0 2d       	mov	r30, r0
    3392:	87 81       	ldd	r24, Z+7	; 0x07
    3394:	61 e0       	ldi	r22, 0x01	; 1
    3396:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    339a:	3f c1       	rjmp	.+638    	; 0x361a <HMSSD_enDisplayIntegerNumber+0x660>
						break;
					case 5:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    339c:	fe 01       	movw	r30, r28
    339e:	ff 96       	adiw	r30, 0x3f	; 63
    33a0:	01 90       	ld	r0, Z+
    33a2:	f0 81       	ld	r31, Z
    33a4:	e0 2d       	mov	r30, r0
    33a6:	81 81       	ldd	r24, Z+1	; 0x01
    33a8:	61 e0       	ldi	r22, 0x01	; 1
    33aa:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    33ae:	fe 01       	movw	r30, r28
    33b0:	ff 96       	adiw	r30, 0x3f	; 63
    33b2:	01 90       	ld	r0, Z+
    33b4:	f0 81       	ld	r31, Z
    33b6:	e0 2d       	mov	r30, r0
    33b8:	82 81       	ldd	r24, Z+2	; 0x02
    33ba:	60 e0       	ldi	r22, 0x00	; 0
    33bc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    33c0:	fe 01       	movw	r30, r28
    33c2:	ff 96       	adiw	r30, 0x3f	; 63
    33c4:	01 90       	ld	r0, Z+
    33c6:	f0 81       	ld	r31, Z
    33c8:	e0 2d       	mov	r30, r0
    33ca:	83 81       	ldd	r24, Z+3	; 0x03
    33cc:	61 e0       	ldi	r22, 0x01	; 1
    33ce:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    33d2:	fe 01       	movw	r30, r28
    33d4:	ff 96       	adiw	r30, 0x3f	; 63
    33d6:	01 90       	ld	r0, Z+
    33d8:	f0 81       	ld	r31, Z
    33da:	e0 2d       	mov	r30, r0
    33dc:	84 81       	ldd	r24, Z+4	; 0x04
    33de:	61 e0       	ldi	r22, 0x01	; 1
    33e0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    33e4:	fe 01       	movw	r30, r28
    33e6:	ff 96       	adiw	r30, 0x3f	; 63
    33e8:	01 90       	ld	r0, Z+
    33ea:	f0 81       	ld	r31, Z
    33ec:	e0 2d       	mov	r30, r0
    33ee:	85 81       	ldd	r24, Z+5	; 0x05
    33f0:	60 e0       	ldi	r22, 0x00	; 0
    33f2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    33f6:	fe 01       	movw	r30, r28
    33f8:	ff 96       	adiw	r30, 0x3f	; 63
    33fa:	01 90       	ld	r0, Z+
    33fc:	f0 81       	ld	r31, Z
    33fe:	e0 2d       	mov	r30, r0
    3400:	86 81       	ldd	r24, Z+6	; 0x06
    3402:	61 e0       	ldi	r22, 0x01	; 1
    3404:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    3408:	fe 01       	movw	r30, r28
    340a:	ff 96       	adiw	r30, 0x3f	; 63
    340c:	01 90       	ld	r0, Z+
    340e:	f0 81       	ld	r31, Z
    3410:	e0 2d       	mov	r30, r0
    3412:	87 81       	ldd	r24, Z+7	; 0x07
    3414:	61 e0       	ldi	r22, 0x01	; 1
    3416:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    341a:	ff c0       	rjmp	.+510    	; 0x361a <HMSSD_enDisplayIntegerNumber+0x660>
						break;
					case 6:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    341c:	fe 01       	movw	r30, r28
    341e:	ff 96       	adiw	r30, 0x3f	; 63
    3420:	01 90       	ld	r0, Z+
    3422:	f0 81       	ld	r31, Z
    3424:	e0 2d       	mov	r30, r0
    3426:	81 81       	ldd	r24, Z+1	; 0x01
    3428:	61 e0       	ldi	r22, 0x01	; 1
    342a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    342e:	fe 01       	movw	r30, r28
    3430:	ff 96       	adiw	r30, 0x3f	; 63
    3432:	01 90       	ld	r0, Z+
    3434:	f0 81       	ld	r31, Z
    3436:	e0 2d       	mov	r30, r0
    3438:	82 81       	ldd	r24, Z+2	; 0x02
    343a:	60 e0       	ldi	r22, 0x00	; 0
    343c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    3440:	fe 01       	movw	r30, r28
    3442:	ff 96       	adiw	r30, 0x3f	; 63
    3444:	01 90       	ld	r0, Z+
    3446:	f0 81       	ld	r31, Z
    3448:	e0 2d       	mov	r30, r0
    344a:	83 81       	ldd	r24, Z+3	; 0x03
    344c:	61 e0       	ldi	r22, 0x01	; 1
    344e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    3452:	fe 01       	movw	r30, r28
    3454:	ff 96       	adiw	r30, 0x3f	; 63
    3456:	01 90       	ld	r0, Z+
    3458:	f0 81       	ld	r31, Z
    345a:	e0 2d       	mov	r30, r0
    345c:	84 81       	ldd	r24, Z+4	; 0x04
    345e:	61 e0       	ldi	r22, 0x01	; 1
    3460:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    3464:	fe 01       	movw	r30, r28
    3466:	ff 96       	adiw	r30, 0x3f	; 63
    3468:	01 90       	ld	r0, Z+
    346a:	f0 81       	ld	r31, Z
    346c:	e0 2d       	mov	r30, r0
    346e:	85 81       	ldd	r24, Z+5	; 0x05
    3470:	61 e0       	ldi	r22, 0x01	; 1
    3472:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    3476:	fe 01       	movw	r30, r28
    3478:	ff 96       	adiw	r30, 0x3f	; 63
    347a:	01 90       	ld	r0, Z+
    347c:	f0 81       	ld	r31, Z
    347e:	e0 2d       	mov	r30, r0
    3480:	86 81       	ldd	r24, Z+6	; 0x06
    3482:	61 e0       	ldi	r22, 0x01	; 1
    3484:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    3488:	fe 01       	movw	r30, r28
    348a:	ff 96       	adiw	r30, 0x3f	; 63
    348c:	01 90       	ld	r0, Z+
    348e:	f0 81       	ld	r31, Z
    3490:	e0 2d       	mov	r30, r0
    3492:	87 81       	ldd	r24, Z+7	; 0x07
    3494:	61 e0       	ldi	r22, 0x01	; 1
    3496:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    349a:	bf c0       	rjmp	.+382    	; 0x361a <HMSSD_enDisplayIntegerNumber+0x660>
						break;
					case 7:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    349c:	fe 01       	movw	r30, r28
    349e:	ff 96       	adiw	r30, 0x3f	; 63
    34a0:	01 90       	ld	r0, Z+
    34a2:	f0 81       	ld	r31, Z
    34a4:	e0 2d       	mov	r30, r0
    34a6:	81 81       	ldd	r24, Z+1	; 0x01
    34a8:	61 e0       	ldi	r22, 0x01	; 1
    34aa:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    34ae:	fe 01       	movw	r30, r28
    34b0:	ff 96       	adiw	r30, 0x3f	; 63
    34b2:	01 90       	ld	r0, Z+
    34b4:	f0 81       	ld	r31, Z
    34b6:	e0 2d       	mov	r30, r0
    34b8:	82 81       	ldd	r24, Z+2	; 0x02
    34ba:	61 e0       	ldi	r22, 0x01	; 1
    34bc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    34c0:	fe 01       	movw	r30, r28
    34c2:	ff 96       	adiw	r30, 0x3f	; 63
    34c4:	01 90       	ld	r0, Z+
    34c6:	f0 81       	ld	r31, Z
    34c8:	e0 2d       	mov	r30, r0
    34ca:	83 81       	ldd	r24, Z+3	; 0x03
    34cc:	61 e0       	ldi	r22, 0x01	; 1
    34ce:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    34d2:	fe 01       	movw	r30, r28
    34d4:	ff 96       	adiw	r30, 0x3f	; 63
    34d6:	01 90       	ld	r0, Z+
    34d8:	f0 81       	ld	r31, Z
    34da:	e0 2d       	mov	r30, r0
    34dc:	84 81       	ldd	r24, Z+4	; 0x04
    34de:	60 e0       	ldi	r22, 0x00	; 0
    34e0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    34e4:	fe 01       	movw	r30, r28
    34e6:	ff 96       	adiw	r30, 0x3f	; 63
    34e8:	01 90       	ld	r0, Z+
    34ea:	f0 81       	ld	r31, Z
    34ec:	e0 2d       	mov	r30, r0
    34ee:	85 81       	ldd	r24, Z+5	; 0x05
    34f0:	60 e0       	ldi	r22, 0x00	; 0
    34f2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    34f6:	fe 01       	movw	r30, r28
    34f8:	ff 96       	adiw	r30, 0x3f	; 63
    34fa:	01 90       	ld	r0, Z+
    34fc:	f0 81       	ld	r31, Z
    34fe:	e0 2d       	mov	r30, r0
    3500:	86 81       	ldd	r24, Z+6	; 0x06
    3502:	60 e0       	ldi	r22, 0x00	; 0
    3504:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    3508:	fe 01       	movw	r30, r28
    350a:	ff 96       	adiw	r30, 0x3f	; 63
    350c:	01 90       	ld	r0, Z+
    350e:	f0 81       	ld	r31, Z
    3510:	e0 2d       	mov	r30, r0
    3512:	87 81       	ldd	r24, Z+7	; 0x07
    3514:	60 e0       	ldi	r22, 0x00	; 0
    3516:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    351a:	7f c0       	rjmp	.+254    	; 0x361a <HMSSD_enDisplayIntegerNumber+0x660>
						break;
					case 8:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    351c:	fe 01       	movw	r30, r28
    351e:	ff 96       	adiw	r30, 0x3f	; 63
    3520:	01 90       	ld	r0, Z+
    3522:	f0 81       	ld	r31, Z
    3524:	e0 2d       	mov	r30, r0
    3526:	81 81       	ldd	r24, Z+1	; 0x01
    3528:	61 e0       	ldi	r22, 0x01	; 1
    352a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    352e:	fe 01       	movw	r30, r28
    3530:	ff 96       	adiw	r30, 0x3f	; 63
    3532:	01 90       	ld	r0, Z+
    3534:	f0 81       	ld	r31, Z
    3536:	e0 2d       	mov	r30, r0
    3538:	82 81       	ldd	r24, Z+2	; 0x02
    353a:	61 e0       	ldi	r22, 0x01	; 1
    353c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    3540:	fe 01       	movw	r30, r28
    3542:	ff 96       	adiw	r30, 0x3f	; 63
    3544:	01 90       	ld	r0, Z+
    3546:	f0 81       	ld	r31, Z
    3548:	e0 2d       	mov	r30, r0
    354a:	83 81       	ldd	r24, Z+3	; 0x03
    354c:	61 e0       	ldi	r22, 0x01	; 1
    354e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    3552:	fe 01       	movw	r30, r28
    3554:	ff 96       	adiw	r30, 0x3f	; 63
    3556:	01 90       	ld	r0, Z+
    3558:	f0 81       	ld	r31, Z
    355a:	e0 2d       	mov	r30, r0
    355c:	84 81       	ldd	r24, Z+4	; 0x04
    355e:	61 e0       	ldi	r22, 0x01	; 1
    3560:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    3564:	fe 01       	movw	r30, r28
    3566:	ff 96       	adiw	r30, 0x3f	; 63
    3568:	01 90       	ld	r0, Z+
    356a:	f0 81       	ld	r31, Z
    356c:	e0 2d       	mov	r30, r0
    356e:	85 81       	ldd	r24, Z+5	; 0x05
    3570:	61 e0       	ldi	r22, 0x01	; 1
    3572:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    3576:	fe 01       	movw	r30, r28
    3578:	ff 96       	adiw	r30, 0x3f	; 63
    357a:	01 90       	ld	r0, Z+
    357c:	f0 81       	ld	r31, Z
    357e:	e0 2d       	mov	r30, r0
    3580:	86 81       	ldd	r24, Z+6	; 0x06
    3582:	61 e0       	ldi	r22, 0x01	; 1
    3584:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    3588:	fe 01       	movw	r30, r28
    358a:	ff 96       	adiw	r30, 0x3f	; 63
    358c:	01 90       	ld	r0, Z+
    358e:	f0 81       	ld	r31, Z
    3590:	e0 2d       	mov	r30, r0
    3592:	87 81       	ldd	r24, Z+7	; 0x07
    3594:	61 e0       	ldi	r22, 0x01	; 1
    3596:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    359a:	3f c0       	rjmp	.+126    	; 0x361a <HMSSD_enDisplayIntegerNumber+0x660>
						break;
					case 9:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    359c:	fe 01       	movw	r30, r28
    359e:	ff 96       	adiw	r30, 0x3f	; 63
    35a0:	01 90       	ld	r0, Z+
    35a2:	f0 81       	ld	r31, Z
    35a4:	e0 2d       	mov	r30, r0
    35a6:	81 81       	ldd	r24, Z+1	; 0x01
    35a8:	61 e0       	ldi	r22, 0x01	; 1
    35aa:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    35ae:	fe 01       	movw	r30, r28
    35b0:	ff 96       	adiw	r30, 0x3f	; 63
    35b2:	01 90       	ld	r0, Z+
    35b4:	f0 81       	ld	r31, Z
    35b6:	e0 2d       	mov	r30, r0
    35b8:	82 81       	ldd	r24, Z+2	; 0x02
    35ba:	61 e0       	ldi	r22, 0x01	; 1
    35bc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    35c0:	fe 01       	movw	r30, r28
    35c2:	ff 96       	adiw	r30, 0x3f	; 63
    35c4:	01 90       	ld	r0, Z+
    35c6:	f0 81       	ld	r31, Z
    35c8:	e0 2d       	mov	r30, r0
    35ca:	83 81       	ldd	r24, Z+3	; 0x03
    35cc:	61 e0       	ldi	r22, 0x01	; 1
    35ce:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    35d2:	fe 01       	movw	r30, r28
    35d4:	ff 96       	adiw	r30, 0x3f	; 63
    35d6:	01 90       	ld	r0, Z+
    35d8:	f0 81       	ld	r31, Z
    35da:	e0 2d       	mov	r30, r0
    35dc:	84 81       	ldd	r24, Z+4	; 0x04
    35de:	61 e0       	ldi	r22, 0x01	; 1
    35e0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    35e4:	fe 01       	movw	r30, r28
    35e6:	ff 96       	adiw	r30, 0x3f	; 63
    35e8:	01 90       	ld	r0, Z+
    35ea:	f0 81       	ld	r31, Z
    35ec:	e0 2d       	mov	r30, r0
    35ee:	85 81       	ldd	r24, Z+5	; 0x05
    35f0:	60 e0       	ldi	r22, 0x00	; 0
    35f2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    35f6:	fe 01       	movw	r30, r28
    35f8:	ff 96       	adiw	r30, 0x3f	; 63
    35fa:	01 90       	ld	r0, Z+
    35fc:	f0 81       	ld	r31, Z
    35fe:	e0 2d       	mov	r30, r0
    3600:	86 81       	ldd	r24, Z+6	; 0x06
    3602:	61 e0       	ldi	r22, 0x01	; 1
    3604:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    3608:	fe 01       	movw	r30, r28
    360a:	ff 96       	adiw	r30, 0x3f	; 63
    360c:	01 90       	ld	r0, Z+
    360e:	f0 81       	ld	r31, Z
    3610:	e0 2d       	mov	r30, r0
    3612:	87 81       	ldd	r24, Z+7	; 0x07
    3614:	61 e0       	ldi	r22, 0x01	; 1
    3616:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    361a:	80 e0       	ldi	r24, 0x00	; 0
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	a0 e2       	ldi	r26, 0x20	; 32
    3620:	b1 e4       	ldi	r27, 0x41	; 65
    3622:	8d ab       	std	Y+53, r24	; 0x35
    3624:	9e ab       	std	Y+54, r25	; 0x36
    3626:	af ab       	std	Y+55, r26	; 0x37
    3628:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    362a:	6d a9       	ldd	r22, Y+53	; 0x35
    362c:	7e a9       	ldd	r23, Y+54	; 0x36
    362e:	8f a9       	ldd	r24, Y+55	; 0x37
    3630:	98 ad       	ldd	r25, Y+56	; 0x38
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	4a e7       	ldi	r20, 0x7A	; 122
    3638:	55 e4       	ldi	r21, 0x45	; 69
    363a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    363e:	dc 01       	movw	r26, r24
    3640:	cb 01       	movw	r24, r22
    3642:	89 ab       	std	Y+49, r24	; 0x31
    3644:	9a ab       	std	Y+50, r25	; 0x32
    3646:	ab ab       	std	Y+51, r26	; 0x33
    3648:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    364a:	69 a9       	ldd	r22, Y+49	; 0x31
    364c:	7a a9       	ldd	r23, Y+50	; 0x32
    364e:	8b a9       	ldd	r24, Y+51	; 0x33
    3650:	9c a9       	ldd	r25, Y+52	; 0x34
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	40 e8       	ldi	r20, 0x80	; 128
    3658:	5f e3       	ldi	r21, 0x3F	; 63
    365a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    365e:	88 23       	and	r24, r24
    3660:	2c f4       	brge	.+10     	; 0x366c <HMSSD_enDisplayIntegerNumber+0x6b2>
		__ticks = 1;
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	98 ab       	std	Y+48, r25	; 0x30
    3668:	8f a7       	std	Y+47, r24	; 0x2f
    366a:	3f c0       	rjmp	.+126    	; 0x36ea <HMSSD_enDisplayIntegerNumber+0x730>
	else if (__tmp > 65535)
    366c:	69 a9       	ldd	r22, Y+49	; 0x31
    366e:	7a a9       	ldd	r23, Y+50	; 0x32
    3670:	8b a9       	ldd	r24, Y+51	; 0x33
    3672:	9c a9       	ldd	r25, Y+52	; 0x34
    3674:	20 e0       	ldi	r18, 0x00	; 0
    3676:	3f ef       	ldi	r19, 0xFF	; 255
    3678:	4f e7       	ldi	r20, 0x7F	; 127
    367a:	57 e4       	ldi	r21, 0x47	; 71
    367c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3680:	18 16       	cp	r1, r24
    3682:	4c f5       	brge	.+82     	; 0x36d6 <HMSSD_enDisplayIntegerNumber+0x71c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3684:	6d a9       	ldd	r22, Y+53	; 0x35
    3686:	7e a9       	ldd	r23, Y+54	; 0x36
    3688:	8f a9       	ldd	r24, Y+55	; 0x37
    368a:	98 ad       	ldd	r25, Y+56	; 0x38
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	40 e2       	ldi	r20, 0x20	; 32
    3692:	51 e4       	ldi	r21, 0x41	; 65
    3694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3698:	dc 01       	movw	r26, r24
    369a:	cb 01       	movw	r24, r22
    369c:	bc 01       	movw	r22, r24
    369e:	cd 01       	movw	r24, r26
    36a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	98 ab       	std	Y+48, r25	; 0x30
    36aa:	8f a7       	std	Y+47, r24	; 0x2f
    36ac:	0f c0       	rjmp	.+30     	; 0x36cc <HMSSD_enDisplayIntegerNumber+0x712>
    36ae:	80 e9       	ldi	r24, 0x90	; 144
    36b0:	91 e0       	ldi	r25, 0x01	; 1
    36b2:	9e a7       	std	Y+46, r25	; 0x2e
    36b4:	8d a7       	std	Y+45, r24	; 0x2d
    36b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    36b8:	9e a5       	ldd	r25, Y+46	; 0x2e
    36ba:	01 97       	sbiw	r24, 0x01	; 1
    36bc:	f1 f7       	brne	.-4      	; 0x36ba <HMSSD_enDisplayIntegerNumber+0x700>
    36be:	9e a7       	std	Y+46, r25	; 0x2e
    36c0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    36c4:	98 a9       	ldd	r25, Y+48	; 0x30
    36c6:	01 97       	sbiw	r24, 0x01	; 1
    36c8:	98 ab       	std	Y+48, r25	; 0x30
    36ca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    36ce:	98 a9       	ldd	r25, Y+48	; 0x30
    36d0:	00 97       	sbiw	r24, 0x00	; 0
    36d2:	69 f7       	brne	.-38     	; 0x36ae <HMSSD_enDisplayIntegerNumber+0x6f4>
    36d4:	14 c0       	rjmp	.+40     	; 0x36fe <HMSSD_enDisplayIntegerNumber+0x744>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d6:	69 a9       	ldd	r22, Y+49	; 0x31
    36d8:	7a a9       	ldd	r23, Y+50	; 0x32
    36da:	8b a9       	ldd	r24, Y+51	; 0x33
    36dc:	9c a9       	ldd	r25, Y+52	; 0x34
    36de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e2:	dc 01       	movw	r26, r24
    36e4:	cb 01       	movw	r24, r22
    36e6:	98 ab       	std	Y+48, r25	; 0x30
    36e8:	8f a7       	std	Y+47, r24	; 0x2f
    36ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    36ec:	98 a9       	ldd	r25, Y+48	; 0x30
    36ee:	9c a7       	std	Y+44, r25	; 0x2c
    36f0:	8b a7       	std	Y+43, r24	; 0x2b
    36f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    36f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    36f6:	01 97       	sbiw	r24, 0x01	; 1
    36f8:	f1 f7       	brne	.-4      	; 0x36f6 <HMSSD_enDisplayIntegerNumber+0x73c>
    36fa:	9c a7       	std	Y+44, r25	; 0x2c
    36fc:	8b a7       	std	Y+43, r24	; 0x2b
						break;
					} // switch on Tens --> CC

					_delay_ms(10);
					// Disable SSD1
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN1, HIGH);
    36fe:	fe 01       	movw	r30, r28
    3700:	ff 96       	adiw	r30, 0x3f	; 63
    3702:	01 90       	ld	r0, Z+
    3704:	f0 81       	ld	r31, Z
    3706:	e0 2d       	mov	r30, r0
    3708:	81 85       	ldd	r24, Z+9	; 0x09
    370a:	61 e0       	ldi	r22, 0x01	; 1
    370c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					// Enable SSD2
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN2, LOW);
    3710:	fe 01       	movw	r30, r28
    3712:	ff 96       	adiw	r30, 0x3f	; 63
    3714:	01 90       	ld	r0, Z+
    3716:	f0 81       	ld	r31, Z
    3718:	e0 2d       	mov	r30, r0
    371a:	82 85       	ldd	r24, Z+10	; 0x0a
    371c:	60 e0       	ldi	r22, 0x00	; 0
    371e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>

					switch (Local_u8Units) {
    3722:	8b ad       	ldd	r24, Y+59	; 0x3b
    3724:	28 2f       	mov	r18, r24
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	27 96       	adiw	r28, 0x07	; 7
    372a:	3f af       	std	Y+63, r19	; 0x3f
    372c:	2e af       	std	Y+62, r18	; 0x3e
    372e:	27 97       	sbiw	r28, 0x07	; 7
    3730:	27 96       	adiw	r28, 0x07	; 7
    3732:	8e ad       	ldd	r24, Y+62	; 0x3e
    3734:	9f ad       	ldd	r25, Y+63	; 0x3f
    3736:	27 97       	sbiw	r28, 0x07	; 7
    3738:	84 30       	cpi	r24, 0x04	; 4
    373a:	91 05       	cpc	r25, r1
    373c:	09 f4       	brne	.+2      	; 0x3740 <HMSSD_enDisplayIntegerNumber+0x786>
    373e:	60 c1       	rjmp	.+704    	; 0x3a00 <HMSSD_enDisplayIntegerNumber+0xa46>
    3740:	27 96       	adiw	r28, 0x07	; 7
    3742:	2e ad       	ldd	r18, Y+62	; 0x3e
    3744:	3f ad       	ldd	r19, Y+63	; 0x3f
    3746:	27 97       	sbiw	r28, 0x07	; 7
    3748:	25 30       	cpi	r18, 0x05	; 5
    374a:	31 05       	cpc	r19, r1
    374c:	44 f5       	brge	.+80     	; 0x379e <HMSSD_enDisplayIntegerNumber+0x7e4>
    374e:	27 96       	adiw	r28, 0x07	; 7
    3750:	8e ad       	ldd	r24, Y+62	; 0x3e
    3752:	9f ad       	ldd	r25, Y+63	; 0x3f
    3754:	27 97       	sbiw	r28, 0x07	; 7
    3756:	81 30       	cpi	r24, 0x01	; 1
    3758:	91 05       	cpc	r25, r1
    375a:	09 f4       	brne	.+2      	; 0x375e <HMSSD_enDisplayIntegerNumber+0x7a4>
    375c:	91 c0       	rjmp	.+290    	; 0x3880 <HMSSD_enDisplayIntegerNumber+0x8c6>
    375e:	27 96       	adiw	r28, 0x07	; 7
    3760:	2e ad       	ldd	r18, Y+62	; 0x3e
    3762:	3f ad       	ldd	r19, Y+63	; 0x3f
    3764:	27 97       	sbiw	r28, 0x07	; 7
    3766:	22 30       	cpi	r18, 0x02	; 2
    3768:	31 05       	cpc	r19, r1
    376a:	44 f4       	brge	.+16     	; 0x377c <HMSSD_enDisplayIntegerNumber+0x7c2>
    376c:	27 96       	adiw	r28, 0x07	; 7
    376e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3770:	9f ad       	ldd	r25, Y+63	; 0x3f
    3772:	27 97       	sbiw	r28, 0x07	; 7
    3774:	00 97       	sbiw	r24, 0x00	; 0
    3776:	09 f4       	brne	.+2      	; 0x377a <HMSSD_enDisplayIntegerNumber+0x7c0>
    3778:	43 c0       	rjmp	.+134    	; 0x3800 <HMSSD_enDisplayIntegerNumber+0x846>
    377a:	c1 c2       	rjmp	.+1410   	; 0x3cfe <HMSSD_enDisplayIntegerNumber+0xd44>
    377c:	27 96       	adiw	r28, 0x07	; 7
    377e:	2e ad       	ldd	r18, Y+62	; 0x3e
    3780:	3f ad       	ldd	r19, Y+63	; 0x3f
    3782:	27 97       	sbiw	r28, 0x07	; 7
    3784:	22 30       	cpi	r18, 0x02	; 2
    3786:	31 05       	cpc	r19, r1
    3788:	09 f4       	brne	.+2      	; 0x378c <HMSSD_enDisplayIntegerNumber+0x7d2>
    378a:	ba c0       	rjmp	.+372    	; 0x3900 <HMSSD_enDisplayIntegerNumber+0x946>
    378c:	27 96       	adiw	r28, 0x07	; 7
    378e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3790:	9f ad       	ldd	r25, Y+63	; 0x3f
    3792:	27 97       	sbiw	r28, 0x07	; 7
    3794:	83 30       	cpi	r24, 0x03	; 3
    3796:	91 05       	cpc	r25, r1
    3798:	09 f4       	brne	.+2      	; 0x379c <HMSSD_enDisplayIntegerNumber+0x7e2>
    379a:	f2 c0       	rjmp	.+484    	; 0x3980 <HMSSD_enDisplayIntegerNumber+0x9c6>
    379c:	b0 c2       	rjmp	.+1376   	; 0x3cfe <HMSSD_enDisplayIntegerNumber+0xd44>
    379e:	27 96       	adiw	r28, 0x07	; 7
    37a0:	2e ad       	ldd	r18, Y+62	; 0x3e
    37a2:	3f ad       	ldd	r19, Y+63	; 0x3f
    37a4:	27 97       	sbiw	r28, 0x07	; 7
    37a6:	27 30       	cpi	r18, 0x07	; 7
    37a8:	31 05       	cpc	r19, r1
    37aa:	09 f4       	brne	.+2      	; 0x37ae <HMSSD_enDisplayIntegerNumber+0x7f4>
    37ac:	e9 c1       	rjmp	.+978    	; 0x3b80 <HMSSD_enDisplayIntegerNumber+0xbc6>
    37ae:	27 96       	adiw	r28, 0x07	; 7
    37b0:	8e ad       	ldd	r24, Y+62	; 0x3e
    37b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    37b4:	27 97       	sbiw	r28, 0x07	; 7
    37b6:	88 30       	cpi	r24, 0x08	; 8
    37b8:	91 05       	cpc	r25, r1
    37ba:	8c f4       	brge	.+34     	; 0x37de <HMSSD_enDisplayIntegerNumber+0x824>
    37bc:	27 96       	adiw	r28, 0x07	; 7
    37be:	2e ad       	ldd	r18, Y+62	; 0x3e
    37c0:	3f ad       	ldd	r19, Y+63	; 0x3f
    37c2:	27 97       	sbiw	r28, 0x07	; 7
    37c4:	25 30       	cpi	r18, 0x05	; 5
    37c6:	31 05       	cpc	r19, r1
    37c8:	09 f4       	brne	.+2      	; 0x37cc <HMSSD_enDisplayIntegerNumber+0x812>
    37ca:	5a c1       	rjmp	.+692    	; 0x3a80 <HMSSD_enDisplayIntegerNumber+0xac6>
    37cc:	27 96       	adiw	r28, 0x07	; 7
    37ce:	8e ad       	ldd	r24, Y+62	; 0x3e
    37d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    37d2:	27 97       	sbiw	r28, 0x07	; 7
    37d4:	86 30       	cpi	r24, 0x06	; 6
    37d6:	91 05       	cpc	r25, r1
    37d8:	09 f4       	brne	.+2      	; 0x37dc <HMSSD_enDisplayIntegerNumber+0x822>
    37da:	92 c1       	rjmp	.+804    	; 0x3b00 <HMSSD_enDisplayIntegerNumber+0xb46>
    37dc:	90 c2       	rjmp	.+1312   	; 0x3cfe <HMSSD_enDisplayIntegerNumber+0xd44>
    37de:	27 96       	adiw	r28, 0x07	; 7
    37e0:	2e ad       	ldd	r18, Y+62	; 0x3e
    37e2:	3f ad       	ldd	r19, Y+63	; 0x3f
    37e4:	27 97       	sbiw	r28, 0x07	; 7
    37e6:	28 30       	cpi	r18, 0x08	; 8
    37e8:	31 05       	cpc	r19, r1
    37ea:	09 f4       	brne	.+2      	; 0x37ee <HMSSD_enDisplayIntegerNumber+0x834>
    37ec:	09 c2       	rjmp	.+1042   	; 0x3c00 <HMSSD_enDisplayIntegerNumber+0xc46>
    37ee:	27 96       	adiw	r28, 0x07	; 7
    37f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    37f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    37f4:	27 97       	sbiw	r28, 0x07	; 7
    37f6:	89 30       	cpi	r24, 0x09	; 9
    37f8:	91 05       	cpc	r25, r1
    37fa:	09 f4       	brne	.+2      	; 0x37fe <HMSSD_enDisplayIntegerNumber+0x844>
    37fc:	41 c2       	rjmp	.+1154   	; 0x3c80 <HMSSD_enDisplayIntegerNumber+0xcc6>
    37fe:	7f c2       	rjmp	.+1278   	; 0x3cfe <HMSSD_enDisplayIntegerNumber+0xd44>
					case 0:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    3800:	fe 01       	movw	r30, r28
    3802:	ff 96       	adiw	r30, 0x3f	; 63
    3804:	01 90       	ld	r0, Z+
    3806:	f0 81       	ld	r31, Z
    3808:	e0 2d       	mov	r30, r0
    380a:	81 81       	ldd	r24, Z+1	; 0x01
    380c:	61 e0       	ldi	r22, 0x01	; 1
    380e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    3812:	fe 01       	movw	r30, r28
    3814:	ff 96       	adiw	r30, 0x3f	; 63
    3816:	01 90       	ld	r0, Z+
    3818:	f0 81       	ld	r31, Z
    381a:	e0 2d       	mov	r30, r0
    381c:	82 81       	ldd	r24, Z+2	; 0x02
    381e:	61 e0       	ldi	r22, 0x01	; 1
    3820:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    3824:	fe 01       	movw	r30, r28
    3826:	ff 96       	adiw	r30, 0x3f	; 63
    3828:	01 90       	ld	r0, Z+
    382a:	f0 81       	ld	r31, Z
    382c:	e0 2d       	mov	r30, r0
    382e:	83 81       	ldd	r24, Z+3	; 0x03
    3830:	61 e0       	ldi	r22, 0x01	; 1
    3832:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    3836:	fe 01       	movw	r30, r28
    3838:	ff 96       	adiw	r30, 0x3f	; 63
    383a:	01 90       	ld	r0, Z+
    383c:	f0 81       	ld	r31, Z
    383e:	e0 2d       	mov	r30, r0
    3840:	84 81       	ldd	r24, Z+4	; 0x04
    3842:	61 e0       	ldi	r22, 0x01	; 1
    3844:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    3848:	fe 01       	movw	r30, r28
    384a:	ff 96       	adiw	r30, 0x3f	; 63
    384c:	01 90       	ld	r0, Z+
    384e:	f0 81       	ld	r31, Z
    3850:	e0 2d       	mov	r30, r0
    3852:	85 81       	ldd	r24, Z+5	; 0x05
    3854:	61 e0       	ldi	r22, 0x01	; 1
    3856:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    385a:	fe 01       	movw	r30, r28
    385c:	ff 96       	adiw	r30, 0x3f	; 63
    385e:	01 90       	ld	r0, Z+
    3860:	f0 81       	ld	r31, Z
    3862:	e0 2d       	mov	r30, r0
    3864:	86 81       	ldd	r24, Z+6	; 0x06
    3866:	61 e0       	ldi	r22, 0x01	; 1
    3868:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    386c:	fe 01       	movw	r30, r28
    386e:	ff 96       	adiw	r30, 0x3f	; 63
    3870:	01 90       	ld	r0, Z+
    3872:	f0 81       	ld	r31, Z
    3874:	e0 2d       	mov	r30, r0
    3876:	87 81       	ldd	r24, Z+7	; 0x07
    3878:	60 e0       	ldi	r22, 0x00	; 0
    387a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    387e:	3f c2       	rjmp	.+1150   	; 0x3cfe <HMSSD_enDisplayIntegerNumber+0xd44>
						break;
					case 1:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    3880:	fe 01       	movw	r30, r28
    3882:	ff 96       	adiw	r30, 0x3f	; 63
    3884:	01 90       	ld	r0, Z+
    3886:	f0 81       	ld	r31, Z
    3888:	e0 2d       	mov	r30, r0
    388a:	81 81       	ldd	r24, Z+1	; 0x01
    388c:	60 e0       	ldi	r22, 0x00	; 0
    388e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    3892:	fe 01       	movw	r30, r28
    3894:	ff 96       	adiw	r30, 0x3f	; 63
    3896:	01 90       	ld	r0, Z+
    3898:	f0 81       	ld	r31, Z
    389a:	e0 2d       	mov	r30, r0
    389c:	82 81       	ldd	r24, Z+2	; 0x02
    389e:	61 e0       	ldi	r22, 0x01	; 1
    38a0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    38a4:	fe 01       	movw	r30, r28
    38a6:	ff 96       	adiw	r30, 0x3f	; 63
    38a8:	01 90       	ld	r0, Z+
    38aa:	f0 81       	ld	r31, Z
    38ac:	e0 2d       	mov	r30, r0
    38ae:	83 81       	ldd	r24, Z+3	; 0x03
    38b0:	61 e0       	ldi	r22, 0x01	; 1
    38b2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    38b6:	fe 01       	movw	r30, r28
    38b8:	ff 96       	adiw	r30, 0x3f	; 63
    38ba:	01 90       	ld	r0, Z+
    38bc:	f0 81       	ld	r31, Z
    38be:	e0 2d       	mov	r30, r0
    38c0:	84 81       	ldd	r24, Z+4	; 0x04
    38c2:	60 e0       	ldi	r22, 0x00	; 0
    38c4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    38c8:	fe 01       	movw	r30, r28
    38ca:	ff 96       	adiw	r30, 0x3f	; 63
    38cc:	01 90       	ld	r0, Z+
    38ce:	f0 81       	ld	r31, Z
    38d0:	e0 2d       	mov	r30, r0
    38d2:	85 81       	ldd	r24, Z+5	; 0x05
    38d4:	60 e0       	ldi	r22, 0x00	; 0
    38d6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    38da:	fe 01       	movw	r30, r28
    38dc:	ff 96       	adiw	r30, 0x3f	; 63
    38de:	01 90       	ld	r0, Z+
    38e0:	f0 81       	ld	r31, Z
    38e2:	e0 2d       	mov	r30, r0
    38e4:	86 81       	ldd	r24, Z+6	; 0x06
    38e6:	60 e0       	ldi	r22, 0x00	; 0
    38e8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    38ec:	fe 01       	movw	r30, r28
    38ee:	ff 96       	adiw	r30, 0x3f	; 63
    38f0:	01 90       	ld	r0, Z+
    38f2:	f0 81       	ld	r31, Z
    38f4:	e0 2d       	mov	r30, r0
    38f6:	87 81       	ldd	r24, Z+7	; 0x07
    38f8:	60 e0       	ldi	r22, 0x00	; 0
    38fa:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    38fe:	ff c1       	rjmp	.+1022   	; 0x3cfe <HMSSD_enDisplayIntegerNumber+0xd44>
						break;
					case 2:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    3900:	fe 01       	movw	r30, r28
    3902:	ff 96       	adiw	r30, 0x3f	; 63
    3904:	01 90       	ld	r0, Z+
    3906:	f0 81       	ld	r31, Z
    3908:	e0 2d       	mov	r30, r0
    390a:	81 81       	ldd	r24, Z+1	; 0x01
    390c:	61 e0       	ldi	r22, 0x01	; 1
    390e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    3912:	fe 01       	movw	r30, r28
    3914:	ff 96       	adiw	r30, 0x3f	; 63
    3916:	01 90       	ld	r0, Z+
    3918:	f0 81       	ld	r31, Z
    391a:	e0 2d       	mov	r30, r0
    391c:	82 81       	ldd	r24, Z+2	; 0x02
    391e:	61 e0       	ldi	r22, 0x01	; 1
    3920:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    3924:	fe 01       	movw	r30, r28
    3926:	ff 96       	adiw	r30, 0x3f	; 63
    3928:	01 90       	ld	r0, Z+
    392a:	f0 81       	ld	r31, Z
    392c:	e0 2d       	mov	r30, r0
    392e:	83 81       	ldd	r24, Z+3	; 0x03
    3930:	60 e0       	ldi	r22, 0x00	; 0
    3932:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    3936:	fe 01       	movw	r30, r28
    3938:	ff 96       	adiw	r30, 0x3f	; 63
    393a:	01 90       	ld	r0, Z+
    393c:	f0 81       	ld	r31, Z
    393e:	e0 2d       	mov	r30, r0
    3940:	84 81       	ldd	r24, Z+4	; 0x04
    3942:	61 e0       	ldi	r22, 0x01	; 1
    3944:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    3948:	fe 01       	movw	r30, r28
    394a:	ff 96       	adiw	r30, 0x3f	; 63
    394c:	01 90       	ld	r0, Z+
    394e:	f0 81       	ld	r31, Z
    3950:	e0 2d       	mov	r30, r0
    3952:	85 81       	ldd	r24, Z+5	; 0x05
    3954:	61 e0       	ldi	r22, 0x01	; 1
    3956:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    395a:	fe 01       	movw	r30, r28
    395c:	ff 96       	adiw	r30, 0x3f	; 63
    395e:	01 90       	ld	r0, Z+
    3960:	f0 81       	ld	r31, Z
    3962:	e0 2d       	mov	r30, r0
    3964:	86 81       	ldd	r24, Z+6	; 0x06
    3966:	60 e0       	ldi	r22, 0x00	; 0
    3968:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    396c:	fe 01       	movw	r30, r28
    396e:	ff 96       	adiw	r30, 0x3f	; 63
    3970:	01 90       	ld	r0, Z+
    3972:	f0 81       	ld	r31, Z
    3974:	e0 2d       	mov	r30, r0
    3976:	87 81       	ldd	r24, Z+7	; 0x07
    3978:	61 e0       	ldi	r22, 0x01	; 1
    397a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    397e:	bf c1       	rjmp	.+894    	; 0x3cfe <HMSSD_enDisplayIntegerNumber+0xd44>
						break;
					case 3:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    3980:	fe 01       	movw	r30, r28
    3982:	ff 96       	adiw	r30, 0x3f	; 63
    3984:	01 90       	ld	r0, Z+
    3986:	f0 81       	ld	r31, Z
    3988:	e0 2d       	mov	r30, r0
    398a:	81 81       	ldd	r24, Z+1	; 0x01
    398c:	61 e0       	ldi	r22, 0x01	; 1
    398e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    3992:	fe 01       	movw	r30, r28
    3994:	ff 96       	adiw	r30, 0x3f	; 63
    3996:	01 90       	ld	r0, Z+
    3998:	f0 81       	ld	r31, Z
    399a:	e0 2d       	mov	r30, r0
    399c:	82 81       	ldd	r24, Z+2	; 0x02
    399e:	61 e0       	ldi	r22, 0x01	; 1
    39a0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    39a4:	fe 01       	movw	r30, r28
    39a6:	ff 96       	adiw	r30, 0x3f	; 63
    39a8:	01 90       	ld	r0, Z+
    39aa:	f0 81       	ld	r31, Z
    39ac:	e0 2d       	mov	r30, r0
    39ae:	83 81       	ldd	r24, Z+3	; 0x03
    39b0:	61 e0       	ldi	r22, 0x01	; 1
    39b2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    39b6:	fe 01       	movw	r30, r28
    39b8:	ff 96       	adiw	r30, 0x3f	; 63
    39ba:	01 90       	ld	r0, Z+
    39bc:	f0 81       	ld	r31, Z
    39be:	e0 2d       	mov	r30, r0
    39c0:	84 81       	ldd	r24, Z+4	; 0x04
    39c2:	61 e0       	ldi	r22, 0x01	; 1
    39c4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    39c8:	fe 01       	movw	r30, r28
    39ca:	ff 96       	adiw	r30, 0x3f	; 63
    39cc:	01 90       	ld	r0, Z+
    39ce:	f0 81       	ld	r31, Z
    39d0:	e0 2d       	mov	r30, r0
    39d2:	85 81       	ldd	r24, Z+5	; 0x05
    39d4:	60 e0       	ldi	r22, 0x00	; 0
    39d6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    39da:	fe 01       	movw	r30, r28
    39dc:	ff 96       	adiw	r30, 0x3f	; 63
    39de:	01 90       	ld	r0, Z+
    39e0:	f0 81       	ld	r31, Z
    39e2:	e0 2d       	mov	r30, r0
    39e4:	86 81       	ldd	r24, Z+6	; 0x06
    39e6:	60 e0       	ldi	r22, 0x00	; 0
    39e8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    39ec:	fe 01       	movw	r30, r28
    39ee:	ff 96       	adiw	r30, 0x3f	; 63
    39f0:	01 90       	ld	r0, Z+
    39f2:	f0 81       	ld	r31, Z
    39f4:	e0 2d       	mov	r30, r0
    39f6:	87 81       	ldd	r24, Z+7	; 0x07
    39f8:	61 e0       	ldi	r22, 0x01	; 1
    39fa:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    39fe:	7f c1       	rjmp	.+766    	; 0x3cfe <HMSSD_enDisplayIntegerNumber+0xd44>
						break;
					case 4:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    3a00:	fe 01       	movw	r30, r28
    3a02:	ff 96       	adiw	r30, 0x3f	; 63
    3a04:	01 90       	ld	r0, Z+
    3a06:	f0 81       	ld	r31, Z
    3a08:	e0 2d       	mov	r30, r0
    3a0a:	81 81       	ldd	r24, Z+1	; 0x01
    3a0c:	60 e0       	ldi	r22, 0x00	; 0
    3a0e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    3a12:	fe 01       	movw	r30, r28
    3a14:	ff 96       	adiw	r30, 0x3f	; 63
    3a16:	01 90       	ld	r0, Z+
    3a18:	f0 81       	ld	r31, Z
    3a1a:	e0 2d       	mov	r30, r0
    3a1c:	82 81       	ldd	r24, Z+2	; 0x02
    3a1e:	61 e0       	ldi	r22, 0x01	; 1
    3a20:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    3a24:	fe 01       	movw	r30, r28
    3a26:	ff 96       	adiw	r30, 0x3f	; 63
    3a28:	01 90       	ld	r0, Z+
    3a2a:	f0 81       	ld	r31, Z
    3a2c:	e0 2d       	mov	r30, r0
    3a2e:	83 81       	ldd	r24, Z+3	; 0x03
    3a30:	61 e0       	ldi	r22, 0x01	; 1
    3a32:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    3a36:	fe 01       	movw	r30, r28
    3a38:	ff 96       	adiw	r30, 0x3f	; 63
    3a3a:	01 90       	ld	r0, Z+
    3a3c:	f0 81       	ld	r31, Z
    3a3e:	e0 2d       	mov	r30, r0
    3a40:	84 81       	ldd	r24, Z+4	; 0x04
    3a42:	60 e0       	ldi	r22, 0x00	; 0
    3a44:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    3a48:	fe 01       	movw	r30, r28
    3a4a:	ff 96       	adiw	r30, 0x3f	; 63
    3a4c:	01 90       	ld	r0, Z+
    3a4e:	f0 81       	ld	r31, Z
    3a50:	e0 2d       	mov	r30, r0
    3a52:	85 81       	ldd	r24, Z+5	; 0x05
    3a54:	60 e0       	ldi	r22, 0x00	; 0
    3a56:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    3a5a:	fe 01       	movw	r30, r28
    3a5c:	ff 96       	adiw	r30, 0x3f	; 63
    3a5e:	01 90       	ld	r0, Z+
    3a60:	f0 81       	ld	r31, Z
    3a62:	e0 2d       	mov	r30, r0
    3a64:	86 81       	ldd	r24, Z+6	; 0x06
    3a66:	61 e0       	ldi	r22, 0x01	; 1
    3a68:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    3a6c:	fe 01       	movw	r30, r28
    3a6e:	ff 96       	adiw	r30, 0x3f	; 63
    3a70:	01 90       	ld	r0, Z+
    3a72:	f0 81       	ld	r31, Z
    3a74:	e0 2d       	mov	r30, r0
    3a76:	87 81       	ldd	r24, Z+7	; 0x07
    3a78:	61 e0       	ldi	r22, 0x01	; 1
    3a7a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    3a7e:	3f c1       	rjmp	.+638    	; 0x3cfe <HMSSD_enDisplayIntegerNumber+0xd44>
						break;
					case 5:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    3a80:	fe 01       	movw	r30, r28
    3a82:	ff 96       	adiw	r30, 0x3f	; 63
    3a84:	01 90       	ld	r0, Z+
    3a86:	f0 81       	ld	r31, Z
    3a88:	e0 2d       	mov	r30, r0
    3a8a:	81 81       	ldd	r24, Z+1	; 0x01
    3a8c:	61 e0       	ldi	r22, 0x01	; 1
    3a8e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    3a92:	fe 01       	movw	r30, r28
    3a94:	ff 96       	adiw	r30, 0x3f	; 63
    3a96:	01 90       	ld	r0, Z+
    3a98:	f0 81       	ld	r31, Z
    3a9a:	e0 2d       	mov	r30, r0
    3a9c:	82 81       	ldd	r24, Z+2	; 0x02
    3a9e:	60 e0       	ldi	r22, 0x00	; 0
    3aa0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    3aa4:	fe 01       	movw	r30, r28
    3aa6:	ff 96       	adiw	r30, 0x3f	; 63
    3aa8:	01 90       	ld	r0, Z+
    3aaa:	f0 81       	ld	r31, Z
    3aac:	e0 2d       	mov	r30, r0
    3aae:	83 81       	ldd	r24, Z+3	; 0x03
    3ab0:	61 e0       	ldi	r22, 0x01	; 1
    3ab2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    3ab6:	fe 01       	movw	r30, r28
    3ab8:	ff 96       	adiw	r30, 0x3f	; 63
    3aba:	01 90       	ld	r0, Z+
    3abc:	f0 81       	ld	r31, Z
    3abe:	e0 2d       	mov	r30, r0
    3ac0:	84 81       	ldd	r24, Z+4	; 0x04
    3ac2:	61 e0       	ldi	r22, 0x01	; 1
    3ac4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    3ac8:	fe 01       	movw	r30, r28
    3aca:	ff 96       	adiw	r30, 0x3f	; 63
    3acc:	01 90       	ld	r0, Z+
    3ace:	f0 81       	ld	r31, Z
    3ad0:	e0 2d       	mov	r30, r0
    3ad2:	85 81       	ldd	r24, Z+5	; 0x05
    3ad4:	60 e0       	ldi	r22, 0x00	; 0
    3ad6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    3ada:	fe 01       	movw	r30, r28
    3adc:	ff 96       	adiw	r30, 0x3f	; 63
    3ade:	01 90       	ld	r0, Z+
    3ae0:	f0 81       	ld	r31, Z
    3ae2:	e0 2d       	mov	r30, r0
    3ae4:	86 81       	ldd	r24, Z+6	; 0x06
    3ae6:	61 e0       	ldi	r22, 0x01	; 1
    3ae8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    3aec:	fe 01       	movw	r30, r28
    3aee:	ff 96       	adiw	r30, 0x3f	; 63
    3af0:	01 90       	ld	r0, Z+
    3af2:	f0 81       	ld	r31, Z
    3af4:	e0 2d       	mov	r30, r0
    3af6:	87 81       	ldd	r24, Z+7	; 0x07
    3af8:	61 e0       	ldi	r22, 0x01	; 1
    3afa:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    3afe:	ff c0       	rjmp	.+510    	; 0x3cfe <HMSSD_enDisplayIntegerNumber+0xd44>
						break;
					case 6:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    3b00:	fe 01       	movw	r30, r28
    3b02:	ff 96       	adiw	r30, 0x3f	; 63
    3b04:	01 90       	ld	r0, Z+
    3b06:	f0 81       	ld	r31, Z
    3b08:	e0 2d       	mov	r30, r0
    3b0a:	81 81       	ldd	r24, Z+1	; 0x01
    3b0c:	61 e0       	ldi	r22, 0x01	; 1
    3b0e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    3b12:	fe 01       	movw	r30, r28
    3b14:	ff 96       	adiw	r30, 0x3f	; 63
    3b16:	01 90       	ld	r0, Z+
    3b18:	f0 81       	ld	r31, Z
    3b1a:	e0 2d       	mov	r30, r0
    3b1c:	82 81       	ldd	r24, Z+2	; 0x02
    3b1e:	60 e0       	ldi	r22, 0x00	; 0
    3b20:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    3b24:	fe 01       	movw	r30, r28
    3b26:	ff 96       	adiw	r30, 0x3f	; 63
    3b28:	01 90       	ld	r0, Z+
    3b2a:	f0 81       	ld	r31, Z
    3b2c:	e0 2d       	mov	r30, r0
    3b2e:	83 81       	ldd	r24, Z+3	; 0x03
    3b30:	61 e0       	ldi	r22, 0x01	; 1
    3b32:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    3b36:	fe 01       	movw	r30, r28
    3b38:	ff 96       	adiw	r30, 0x3f	; 63
    3b3a:	01 90       	ld	r0, Z+
    3b3c:	f0 81       	ld	r31, Z
    3b3e:	e0 2d       	mov	r30, r0
    3b40:	84 81       	ldd	r24, Z+4	; 0x04
    3b42:	61 e0       	ldi	r22, 0x01	; 1
    3b44:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    3b48:	fe 01       	movw	r30, r28
    3b4a:	ff 96       	adiw	r30, 0x3f	; 63
    3b4c:	01 90       	ld	r0, Z+
    3b4e:	f0 81       	ld	r31, Z
    3b50:	e0 2d       	mov	r30, r0
    3b52:	85 81       	ldd	r24, Z+5	; 0x05
    3b54:	61 e0       	ldi	r22, 0x01	; 1
    3b56:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    3b5a:	fe 01       	movw	r30, r28
    3b5c:	ff 96       	adiw	r30, 0x3f	; 63
    3b5e:	01 90       	ld	r0, Z+
    3b60:	f0 81       	ld	r31, Z
    3b62:	e0 2d       	mov	r30, r0
    3b64:	86 81       	ldd	r24, Z+6	; 0x06
    3b66:	61 e0       	ldi	r22, 0x01	; 1
    3b68:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    3b6c:	fe 01       	movw	r30, r28
    3b6e:	ff 96       	adiw	r30, 0x3f	; 63
    3b70:	01 90       	ld	r0, Z+
    3b72:	f0 81       	ld	r31, Z
    3b74:	e0 2d       	mov	r30, r0
    3b76:	87 81       	ldd	r24, Z+7	; 0x07
    3b78:	61 e0       	ldi	r22, 0x01	; 1
    3b7a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    3b7e:	bf c0       	rjmp	.+382    	; 0x3cfe <HMSSD_enDisplayIntegerNumber+0xd44>
						break;
					case 7:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    3b80:	fe 01       	movw	r30, r28
    3b82:	ff 96       	adiw	r30, 0x3f	; 63
    3b84:	01 90       	ld	r0, Z+
    3b86:	f0 81       	ld	r31, Z
    3b88:	e0 2d       	mov	r30, r0
    3b8a:	81 81       	ldd	r24, Z+1	; 0x01
    3b8c:	61 e0       	ldi	r22, 0x01	; 1
    3b8e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    3b92:	fe 01       	movw	r30, r28
    3b94:	ff 96       	adiw	r30, 0x3f	; 63
    3b96:	01 90       	ld	r0, Z+
    3b98:	f0 81       	ld	r31, Z
    3b9a:	e0 2d       	mov	r30, r0
    3b9c:	82 81       	ldd	r24, Z+2	; 0x02
    3b9e:	61 e0       	ldi	r22, 0x01	; 1
    3ba0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    3ba4:	fe 01       	movw	r30, r28
    3ba6:	ff 96       	adiw	r30, 0x3f	; 63
    3ba8:	01 90       	ld	r0, Z+
    3baa:	f0 81       	ld	r31, Z
    3bac:	e0 2d       	mov	r30, r0
    3bae:	83 81       	ldd	r24, Z+3	; 0x03
    3bb0:	61 e0       	ldi	r22, 0x01	; 1
    3bb2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	ff 96       	adiw	r30, 0x3f	; 63
    3bba:	01 90       	ld	r0, Z+
    3bbc:	f0 81       	ld	r31, Z
    3bbe:	e0 2d       	mov	r30, r0
    3bc0:	84 81       	ldd	r24, Z+4	; 0x04
    3bc2:	60 e0       	ldi	r22, 0x00	; 0
    3bc4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    3bc8:	fe 01       	movw	r30, r28
    3bca:	ff 96       	adiw	r30, 0x3f	; 63
    3bcc:	01 90       	ld	r0, Z+
    3bce:	f0 81       	ld	r31, Z
    3bd0:	e0 2d       	mov	r30, r0
    3bd2:	85 81       	ldd	r24, Z+5	; 0x05
    3bd4:	60 e0       	ldi	r22, 0x00	; 0
    3bd6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    3bda:	fe 01       	movw	r30, r28
    3bdc:	ff 96       	adiw	r30, 0x3f	; 63
    3bde:	01 90       	ld	r0, Z+
    3be0:	f0 81       	ld	r31, Z
    3be2:	e0 2d       	mov	r30, r0
    3be4:	86 81       	ldd	r24, Z+6	; 0x06
    3be6:	60 e0       	ldi	r22, 0x00	; 0
    3be8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    3bec:	fe 01       	movw	r30, r28
    3bee:	ff 96       	adiw	r30, 0x3f	; 63
    3bf0:	01 90       	ld	r0, Z+
    3bf2:	f0 81       	ld	r31, Z
    3bf4:	e0 2d       	mov	r30, r0
    3bf6:	87 81       	ldd	r24, Z+7	; 0x07
    3bf8:	60 e0       	ldi	r22, 0x00	; 0
    3bfa:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    3bfe:	7f c0       	rjmp	.+254    	; 0x3cfe <HMSSD_enDisplayIntegerNumber+0xd44>
						break;
					case 8:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    3c00:	fe 01       	movw	r30, r28
    3c02:	ff 96       	adiw	r30, 0x3f	; 63
    3c04:	01 90       	ld	r0, Z+
    3c06:	f0 81       	ld	r31, Z
    3c08:	e0 2d       	mov	r30, r0
    3c0a:	81 81       	ldd	r24, Z+1	; 0x01
    3c0c:	61 e0       	ldi	r22, 0x01	; 1
    3c0e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    3c12:	fe 01       	movw	r30, r28
    3c14:	ff 96       	adiw	r30, 0x3f	; 63
    3c16:	01 90       	ld	r0, Z+
    3c18:	f0 81       	ld	r31, Z
    3c1a:	e0 2d       	mov	r30, r0
    3c1c:	82 81       	ldd	r24, Z+2	; 0x02
    3c1e:	61 e0       	ldi	r22, 0x01	; 1
    3c20:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    3c24:	fe 01       	movw	r30, r28
    3c26:	ff 96       	adiw	r30, 0x3f	; 63
    3c28:	01 90       	ld	r0, Z+
    3c2a:	f0 81       	ld	r31, Z
    3c2c:	e0 2d       	mov	r30, r0
    3c2e:	83 81       	ldd	r24, Z+3	; 0x03
    3c30:	61 e0       	ldi	r22, 0x01	; 1
    3c32:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    3c36:	fe 01       	movw	r30, r28
    3c38:	ff 96       	adiw	r30, 0x3f	; 63
    3c3a:	01 90       	ld	r0, Z+
    3c3c:	f0 81       	ld	r31, Z
    3c3e:	e0 2d       	mov	r30, r0
    3c40:	84 81       	ldd	r24, Z+4	; 0x04
    3c42:	61 e0       	ldi	r22, 0x01	; 1
    3c44:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    3c48:	fe 01       	movw	r30, r28
    3c4a:	ff 96       	adiw	r30, 0x3f	; 63
    3c4c:	01 90       	ld	r0, Z+
    3c4e:	f0 81       	ld	r31, Z
    3c50:	e0 2d       	mov	r30, r0
    3c52:	85 81       	ldd	r24, Z+5	; 0x05
    3c54:	61 e0       	ldi	r22, 0x01	; 1
    3c56:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    3c5a:	fe 01       	movw	r30, r28
    3c5c:	ff 96       	adiw	r30, 0x3f	; 63
    3c5e:	01 90       	ld	r0, Z+
    3c60:	f0 81       	ld	r31, Z
    3c62:	e0 2d       	mov	r30, r0
    3c64:	86 81       	ldd	r24, Z+6	; 0x06
    3c66:	61 e0       	ldi	r22, 0x01	; 1
    3c68:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    3c6c:	fe 01       	movw	r30, r28
    3c6e:	ff 96       	adiw	r30, 0x3f	; 63
    3c70:	01 90       	ld	r0, Z+
    3c72:	f0 81       	ld	r31, Z
    3c74:	e0 2d       	mov	r30, r0
    3c76:	87 81       	ldd	r24, Z+7	; 0x07
    3c78:	61 e0       	ldi	r22, 0x01	; 1
    3c7a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    3c7e:	3f c0       	rjmp	.+126    	; 0x3cfe <HMSSD_enDisplayIntegerNumber+0xd44>
						break;
					case 9:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    3c80:	fe 01       	movw	r30, r28
    3c82:	ff 96       	adiw	r30, 0x3f	; 63
    3c84:	01 90       	ld	r0, Z+
    3c86:	f0 81       	ld	r31, Z
    3c88:	e0 2d       	mov	r30, r0
    3c8a:	81 81       	ldd	r24, Z+1	; 0x01
    3c8c:	61 e0       	ldi	r22, 0x01	; 1
    3c8e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    3c92:	fe 01       	movw	r30, r28
    3c94:	ff 96       	adiw	r30, 0x3f	; 63
    3c96:	01 90       	ld	r0, Z+
    3c98:	f0 81       	ld	r31, Z
    3c9a:	e0 2d       	mov	r30, r0
    3c9c:	82 81       	ldd	r24, Z+2	; 0x02
    3c9e:	61 e0       	ldi	r22, 0x01	; 1
    3ca0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    3ca4:	fe 01       	movw	r30, r28
    3ca6:	ff 96       	adiw	r30, 0x3f	; 63
    3ca8:	01 90       	ld	r0, Z+
    3caa:	f0 81       	ld	r31, Z
    3cac:	e0 2d       	mov	r30, r0
    3cae:	83 81       	ldd	r24, Z+3	; 0x03
    3cb0:	61 e0       	ldi	r22, 0x01	; 1
    3cb2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    3cb6:	fe 01       	movw	r30, r28
    3cb8:	ff 96       	adiw	r30, 0x3f	; 63
    3cba:	01 90       	ld	r0, Z+
    3cbc:	f0 81       	ld	r31, Z
    3cbe:	e0 2d       	mov	r30, r0
    3cc0:	84 81       	ldd	r24, Z+4	; 0x04
    3cc2:	61 e0       	ldi	r22, 0x01	; 1
    3cc4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    3cc8:	fe 01       	movw	r30, r28
    3cca:	ff 96       	adiw	r30, 0x3f	; 63
    3ccc:	01 90       	ld	r0, Z+
    3cce:	f0 81       	ld	r31, Z
    3cd0:	e0 2d       	mov	r30, r0
    3cd2:	85 81       	ldd	r24, Z+5	; 0x05
    3cd4:	60 e0       	ldi	r22, 0x00	; 0
    3cd6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    3cda:	fe 01       	movw	r30, r28
    3cdc:	ff 96       	adiw	r30, 0x3f	; 63
    3cde:	01 90       	ld	r0, Z+
    3ce0:	f0 81       	ld	r31, Z
    3ce2:	e0 2d       	mov	r30, r0
    3ce4:	86 81       	ldd	r24, Z+6	; 0x06
    3ce6:	61 e0       	ldi	r22, 0x01	; 1
    3ce8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    3cec:	fe 01       	movw	r30, r28
    3cee:	ff 96       	adiw	r30, 0x3f	; 63
    3cf0:	01 90       	ld	r0, Z+
    3cf2:	f0 81       	ld	r31, Z
    3cf4:	e0 2d       	mov	r30, r0
    3cf6:	87 81       	ldd	r24, Z+7	; 0x07
    3cf8:	61 e0       	ldi	r22, 0x01	; 1
    3cfa:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    3cfe:	80 e0       	ldi	r24, 0x00	; 0
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	a0 e2       	ldi	r26, 0x20	; 32
    3d04:	b1 e4       	ldi	r27, 0x41	; 65
    3d06:	8f a3       	std	Y+39, r24	; 0x27
    3d08:	98 a7       	std	Y+40, r25	; 0x28
    3d0a:	a9 a7       	std	Y+41, r26	; 0x29
    3d0c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d0e:	6f a1       	ldd	r22, Y+39	; 0x27
    3d10:	78 a5       	ldd	r23, Y+40	; 0x28
    3d12:	89 a5       	ldd	r24, Y+41	; 0x29
    3d14:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d16:	20 e0       	ldi	r18, 0x00	; 0
    3d18:	30 e0       	ldi	r19, 0x00	; 0
    3d1a:	4a e7       	ldi	r20, 0x7A	; 122
    3d1c:	55 e4       	ldi	r21, 0x45	; 69
    3d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d22:	dc 01       	movw	r26, r24
    3d24:	cb 01       	movw	r24, r22
    3d26:	8b a3       	std	Y+35, r24	; 0x23
    3d28:	9c a3       	std	Y+36, r25	; 0x24
    3d2a:	ad a3       	std	Y+37, r26	; 0x25
    3d2c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3d2e:	6b a1       	ldd	r22, Y+35	; 0x23
    3d30:	7c a1       	ldd	r23, Y+36	; 0x24
    3d32:	8d a1       	ldd	r24, Y+37	; 0x25
    3d34:	9e a1       	ldd	r25, Y+38	; 0x26
    3d36:	20 e0       	ldi	r18, 0x00	; 0
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	40 e8       	ldi	r20, 0x80	; 128
    3d3c:	5f e3       	ldi	r21, 0x3F	; 63
    3d3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d42:	88 23       	and	r24, r24
    3d44:	2c f4       	brge	.+10     	; 0x3d50 <HMSSD_enDisplayIntegerNumber+0xd96>
		__ticks = 1;
    3d46:	81 e0       	ldi	r24, 0x01	; 1
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	9a a3       	std	Y+34, r25	; 0x22
    3d4c:	89 a3       	std	Y+33, r24	; 0x21
    3d4e:	3f c0       	rjmp	.+126    	; 0x3dce <HMSSD_enDisplayIntegerNumber+0xe14>
	else if (__tmp > 65535)
    3d50:	6b a1       	ldd	r22, Y+35	; 0x23
    3d52:	7c a1       	ldd	r23, Y+36	; 0x24
    3d54:	8d a1       	ldd	r24, Y+37	; 0x25
    3d56:	9e a1       	ldd	r25, Y+38	; 0x26
    3d58:	20 e0       	ldi	r18, 0x00	; 0
    3d5a:	3f ef       	ldi	r19, 0xFF	; 255
    3d5c:	4f e7       	ldi	r20, 0x7F	; 127
    3d5e:	57 e4       	ldi	r21, 0x47	; 71
    3d60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d64:	18 16       	cp	r1, r24
    3d66:	4c f5       	brge	.+82     	; 0x3dba <HMSSD_enDisplayIntegerNumber+0xe00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d68:	6f a1       	ldd	r22, Y+39	; 0x27
    3d6a:	78 a5       	ldd	r23, Y+40	; 0x28
    3d6c:	89 a5       	ldd	r24, Y+41	; 0x29
    3d6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d70:	20 e0       	ldi	r18, 0x00	; 0
    3d72:	30 e0       	ldi	r19, 0x00	; 0
    3d74:	40 e2       	ldi	r20, 0x20	; 32
    3d76:	51 e4       	ldi	r21, 0x41	; 65
    3d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d7c:	dc 01       	movw	r26, r24
    3d7e:	cb 01       	movw	r24, r22
    3d80:	bc 01       	movw	r22, r24
    3d82:	cd 01       	movw	r24, r26
    3d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d88:	dc 01       	movw	r26, r24
    3d8a:	cb 01       	movw	r24, r22
    3d8c:	9a a3       	std	Y+34, r25	; 0x22
    3d8e:	89 a3       	std	Y+33, r24	; 0x21
    3d90:	0f c0       	rjmp	.+30     	; 0x3db0 <HMSSD_enDisplayIntegerNumber+0xdf6>
    3d92:	80 e9       	ldi	r24, 0x90	; 144
    3d94:	91 e0       	ldi	r25, 0x01	; 1
    3d96:	98 a3       	std	Y+32, r25	; 0x20
    3d98:	8f 8f       	std	Y+31, r24	; 0x1f
    3d9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d9c:	98 a1       	ldd	r25, Y+32	; 0x20
    3d9e:	01 97       	sbiw	r24, 0x01	; 1
    3da0:	f1 f7       	brne	.-4      	; 0x3d9e <HMSSD_enDisplayIntegerNumber+0xde4>
    3da2:	98 a3       	std	Y+32, r25	; 0x20
    3da4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3da6:	89 a1       	ldd	r24, Y+33	; 0x21
    3da8:	9a a1       	ldd	r25, Y+34	; 0x22
    3daa:	01 97       	sbiw	r24, 0x01	; 1
    3dac:	9a a3       	std	Y+34, r25	; 0x22
    3dae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3db0:	89 a1       	ldd	r24, Y+33	; 0x21
    3db2:	9a a1       	ldd	r25, Y+34	; 0x22
    3db4:	00 97       	sbiw	r24, 0x00	; 0
    3db6:	69 f7       	brne	.-38     	; 0x3d92 <HMSSD_enDisplayIntegerNumber+0xdd8>
    3db8:	14 c0       	rjmp	.+40     	; 0x3de2 <HMSSD_enDisplayIntegerNumber+0xe28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dba:	6b a1       	ldd	r22, Y+35	; 0x23
    3dbc:	7c a1       	ldd	r23, Y+36	; 0x24
    3dbe:	8d a1       	ldd	r24, Y+37	; 0x25
    3dc0:	9e a1       	ldd	r25, Y+38	; 0x26
    3dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc6:	dc 01       	movw	r26, r24
    3dc8:	cb 01       	movw	r24, r22
    3dca:	9a a3       	std	Y+34, r25	; 0x22
    3dcc:	89 a3       	std	Y+33, r24	; 0x21
    3dce:	89 a1       	ldd	r24, Y+33	; 0x21
    3dd0:	9a a1       	ldd	r25, Y+34	; 0x22
    3dd2:	9e 8f       	std	Y+30, r25	; 0x1e
    3dd4:	8d 8f       	std	Y+29, r24	; 0x1d
    3dd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3dd8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3dda:	01 97       	sbiw	r24, 0x01	; 1
    3ddc:	f1 f7       	brne	.-4      	; 0x3dda <HMSSD_enDisplayIntegerNumber+0xe20>
    3dde:	9e 8f       	std	Y+30, r25	; 0x1e
    3de0:	8d 8f       	std	Y+29, r24	; 0x1d
						break;
					} // switch on Units --> CC

					_delay_ms(10);
					// Disable SSD2
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN2, HIGH);
    3de2:	fe 01       	movw	r30, r28
    3de4:	ff 96       	adiw	r30, 0x3f	; 63
    3de6:	01 90       	ld	r0, Z+
    3de8:	f0 81       	ld	r31, Z
    3dea:	e0 2d       	mov	r30, r0
    3dec:	82 85       	ldd	r24, Z+10	; 0x0a
    3dee:	61 e0       	ldi	r22, 0x01	; 1
    3df0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
		if (PtrMSSD != NULL) {
			u8 Local_u8Tens = copy_u8Number / 10;
			u8 Local_u8Units = copy_u8Number % 10;
			u16 i;
			if (PtrMSSD->MSSD_Type == C_CATHODE) {
				for (i = 0; i < PtrMSSD->MSSD_Duration; i++) {
    3df4:	89 ad       	ldd	r24, Y+57	; 0x39
    3df6:	9a ad       	ldd	r25, Y+58	; 0x3a
    3df8:	01 96       	adiw	r24, 0x01	; 1
    3dfa:	9a af       	std	Y+58, r25	; 0x3a
    3dfc:	89 af       	std	Y+57, r24	; 0x39
    3dfe:	fe 01       	movw	r30, r28
    3e00:	ff 96       	adiw	r30, 0x3f	; 63
    3e02:	01 90       	ld	r0, Z+
    3e04:	f0 81       	ld	r31, Z
    3e06:	e0 2d       	mov	r30, r0
    3e08:	23 85       	ldd	r18, Z+11	; 0x0b
    3e0a:	34 85       	ldd	r19, Z+12	; 0x0c
    3e0c:	89 ad       	ldd	r24, Y+57	; 0x39
    3e0e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3e10:	82 17       	cp	r24, r18
    3e12:	93 07       	cpc	r25, r19
    3e14:	08 f4       	brcc	.+2      	; 0x3e18 <HMSSD_enDisplayIntegerNumber+0xe5e>
    3e16:	0a c9       	rjmp	.-3564   	; 0x302c <HMSSD_enDisplayIntegerNumber+0x72>
    3e18:	08 c7       	rjmp	.+3600   	; 0x4c2a <HMSSD_enDisplayIntegerNumber+0x1c70>
					// Disable SSD2
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN2, HIGH);

				} // for
			} // Type = CC
			else if (PtrMSSD->MSSD_Type == C_ANODE) {
    3e1a:	fe 01       	movw	r30, r28
    3e1c:	ff 96       	adiw	r30, 0x3f	; 63
    3e1e:	01 90       	ld	r0, Z+
    3e20:	f0 81       	ld	r31, Z
    3e22:	e0 2d       	mov	r30, r0
    3e24:	80 81       	ld	r24, Z
    3e26:	81 30       	cpi	r24, 0x01	; 1
    3e28:	09 f0       	breq	.+2      	; 0x3e2c <HMSSD_enDisplayIntegerNumber+0xe72>
    3e2a:	fa c6       	rjmp	.+3572   	; 0x4c20 <HMSSD_enDisplayIntegerNumber+0x1c66>
				for (i = 0; i < PtrMSSD->MSSD_Duration; i++) {
    3e2c:	1a ae       	std	Y+58, r1	; 0x3a
    3e2e:	19 ae       	std	Y+57, r1	; 0x39
    3e30:	e9 c6       	rjmp	.+3538   	; 0x4c04 <HMSSD_enDisplayIntegerNumber+0x1c4a>
					// Enable SSD1
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN1, HIGH);
    3e32:	fe 01       	movw	r30, r28
    3e34:	ff 96       	adiw	r30, 0x3f	; 63
    3e36:	01 90       	ld	r0, Z+
    3e38:	f0 81       	ld	r31, Z
    3e3a:	e0 2d       	mov	r30, r0
    3e3c:	81 85       	ldd	r24, Z+9	; 0x09
    3e3e:	61 e0       	ldi	r22, 0x01	; 1
    3e40:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					switch (Local_u8Tens) {
    3e44:	8c ad       	ldd	r24, Y+60	; 0x3c
    3e46:	28 2f       	mov	r18, r24
    3e48:	30 e0       	ldi	r19, 0x00	; 0
    3e4a:	25 96       	adiw	r28, 0x05	; 5
    3e4c:	3f af       	std	Y+63, r19	; 0x3f
    3e4e:	2e af       	std	Y+62, r18	; 0x3e
    3e50:	25 97       	sbiw	r28, 0x05	; 5
    3e52:	25 96       	adiw	r28, 0x05	; 5
    3e54:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e56:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e58:	25 97       	sbiw	r28, 0x05	; 5
    3e5a:	84 30       	cpi	r24, 0x04	; 4
    3e5c:	91 05       	cpc	r25, r1
    3e5e:	09 f4       	brne	.+2      	; 0x3e62 <HMSSD_enDisplayIntegerNumber+0xea8>
    3e60:	60 c1       	rjmp	.+704    	; 0x4122 <HMSSD_enDisplayIntegerNumber+0x1168>
    3e62:	25 96       	adiw	r28, 0x05	; 5
    3e64:	2e ad       	ldd	r18, Y+62	; 0x3e
    3e66:	3f ad       	ldd	r19, Y+63	; 0x3f
    3e68:	25 97       	sbiw	r28, 0x05	; 5
    3e6a:	25 30       	cpi	r18, 0x05	; 5
    3e6c:	31 05       	cpc	r19, r1
    3e6e:	44 f5       	brge	.+80     	; 0x3ec0 <HMSSD_enDisplayIntegerNumber+0xf06>
    3e70:	25 96       	adiw	r28, 0x05	; 5
    3e72:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e74:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e76:	25 97       	sbiw	r28, 0x05	; 5
    3e78:	81 30       	cpi	r24, 0x01	; 1
    3e7a:	91 05       	cpc	r25, r1
    3e7c:	09 f4       	brne	.+2      	; 0x3e80 <HMSSD_enDisplayIntegerNumber+0xec6>
    3e7e:	91 c0       	rjmp	.+290    	; 0x3fa2 <HMSSD_enDisplayIntegerNumber+0xfe8>
    3e80:	25 96       	adiw	r28, 0x05	; 5
    3e82:	2e ad       	ldd	r18, Y+62	; 0x3e
    3e84:	3f ad       	ldd	r19, Y+63	; 0x3f
    3e86:	25 97       	sbiw	r28, 0x05	; 5
    3e88:	22 30       	cpi	r18, 0x02	; 2
    3e8a:	31 05       	cpc	r19, r1
    3e8c:	44 f4       	brge	.+16     	; 0x3e9e <HMSSD_enDisplayIntegerNumber+0xee4>
    3e8e:	25 96       	adiw	r28, 0x05	; 5
    3e90:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e92:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e94:	25 97       	sbiw	r28, 0x05	; 5
    3e96:	00 97       	sbiw	r24, 0x00	; 0
    3e98:	09 f4       	brne	.+2      	; 0x3e9c <HMSSD_enDisplayIntegerNumber+0xee2>
    3e9a:	43 c0       	rjmp	.+134    	; 0x3f22 <HMSSD_enDisplayIntegerNumber+0xf68>
    3e9c:	c1 c2       	rjmp	.+1410   	; 0x4420 <HMSSD_enDisplayIntegerNumber+0x1466>
    3e9e:	25 96       	adiw	r28, 0x05	; 5
    3ea0:	2e ad       	ldd	r18, Y+62	; 0x3e
    3ea2:	3f ad       	ldd	r19, Y+63	; 0x3f
    3ea4:	25 97       	sbiw	r28, 0x05	; 5
    3ea6:	22 30       	cpi	r18, 0x02	; 2
    3ea8:	31 05       	cpc	r19, r1
    3eaa:	09 f4       	brne	.+2      	; 0x3eae <HMSSD_enDisplayIntegerNumber+0xef4>
    3eac:	ba c0       	rjmp	.+372    	; 0x4022 <HMSSD_enDisplayIntegerNumber+0x1068>
    3eae:	25 96       	adiw	r28, 0x05	; 5
    3eb0:	8e ad       	ldd	r24, Y+62	; 0x3e
    3eb2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3eb4:	25 97       	sbiw	r28, 0x05	; 5
    3eb6:	83 30       	cpi	r24, 0x03	; 3
    3eb8:	91 05       	cpc	r25, r1
    3eba:	09 f4       	brne	.+2      	; 0x3ebe <HMSSD_enDisplayIntegerNumber+0xf04>
    3ebc:	f2 c0       	rjmp	.+484    	; 0x40a2 <HMSSD_enDisplayIntegerNumber+0x10e8>
    3ebe:	b0 c2       	rjmp	.+1376   	; 0x4420 <HMSSD_enDisplayIntegerNumber+0x1466>
    3ec0:	25 96       	adiw	r28, 0x05	; 5
    3ec2:	2e ad       	ldd	r18, Y+62	; 0x3e
    3ec4:	3f ad       	ldd	r19, Y+63	; 0x3f
    3ec6:	25 97       	sbiw	r28, 0x05	; 5
    3ec8:	27 30       	cpi	r18, 0x07	; 7
    3eca:	31 05       	cpc	r19, r1
    3ecc:	09 f4       	brne	.+2      	; 0x3ed0 <HMSSD_enDisplayIntegerNumber+0xf16>
    3ece:	e9 c1       	rjmp	.+978    	; 0x42a2 <HMSSD_enDisplayIntegerNumber+0x12e8>
    3ed0:	25 96       	adiw	r28, 0x05	; 5
    3ed2:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ed4:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ed6:	25 97       	sbiw	r28, 0x05	; 5
    3ed8:	88 30       	cpi	r24, 0x08	; 8
    3eda:	91 05       	cpc	r25, r1
    3edc:	8c f4       	brge	.+34     	; 0x3f00 <HMSSD_enDisplayIntegerNumber+0xf46>
    3ede:	25 96       	adiw	r28, 0x05	; 5
    3ee0:	2e ad       	ldd	r18, Y+62	; 0x3e
    3ee2:	3f ad       	ldd	r19, Y+63	; 0x3f
    3ee4:	25 97       	sbiw	r28, 0x05	; 5
    3ee6:	25 30       	cpi	r18, 0x05	; 5
    3ee8:	31 05       	cpc	r19, r1
    3eea:	09 f4       	brne	.+2      	; 0x3eee <HMSSD_enDisplayIntegerNumber+0xf34>
    3eec:	5a c1       	rjmp	.+692    	; 0x41a2 <HMSSD_enDisplayIntegerNumber+0x11e8>
    3eee:	25 96       	adiw	r28, 0x05	; 5
    3ef0:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ef2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ef4:	25 97       	sbiw	r28, 0x05	; 5
    3ef6:	86 30       	cpi	r24, 0x06	; 6
    3ef8:	91 05       	cpc	r25, r1
    3efa:	09 f4       	brne	.+2      	; 0x3efe <HMSSD_enDisplayIntegerNumber+0xf44>
    3efc:	92 c1       	rjmp	.+804    	; 0x4222 <HMSSD_enDisplayIntegerNumber+0x1268>
    3efe:	90 c2       	rjmp	.+1312   	; 0x4420 <HMSSD_enDisplayIntegerNumber+0x1466>
    3f00:	25 96       	adiw	r28, 0x05	; 5
    3f02:	2e ad       	ldd	r18, Y+62	; 0x3e
    3f04:	3f ad       	ldd	r19, Y+63	; 0x3f
    3f06:	25 97       	sbiw	r28, 0x05	; 5
    3f08:	28 30       	cpi	r18, 0x08	; 8
    3f0a:	31 05       	cpc	r19, r1
    3f0c:	09 f4       	brne	.+2      	; 0x3f10 <HMSSD_enDisplayIntegerNumber+0xf56>
    3f0e:	09 c2       	rjmp	.+1042   	; 0x4322 <HMSSD_enDisplayIntegerNumber+0x1368>
    3f10:	25 96       	adiw	r28, 0x05	; 5
    3f12:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f14:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f16:	25 97       	sbiw	r28, 0x05	; 5
    3f18:	89 30       	cpi	r24, 0x09	; 9
    3f1a:	91 05       	cpc	r25, r1
    3f1c:	09 f4       	brne	.+2      	; 0x3f20 <HMSSD_enDisplayIntegerNumber+0xf66>
    3f1e:	41 c2       	rjmp	.+1154   	; 0x43a2 <HMSSD_enDisplayIntegerNumber+0x13e8>
    3f20:	7f c2       	rjmp	.+1278   	; 0x4420 <HMSSD_enDisplayIntegerNumber+0x1466>
					case 0:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    3f22:	fe 01       	movw	r30, r28
    3f24:	ff 96       	adiw	r30, 0x3f	; 63
    3f26:	01 90       	ld	r0, Z+
    3f28:	f0 81       	ld	r31, Z
    3f2a:	e0 2d       	mov	r30, r0
    3f2c:	81 81       	ldd	r24, Z+1	; 0x01
    3f2e:	60 e0       	ldi	r22, 0x00	; 0
    3f30:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    3f34:	fe 01       	movw	r30, r28
    3f36:	ff 96       	adiw	r30, 0x3f	; 63
    3f38:	01 90       	ld	r0, Z+
    3f3a:	f0 81       	ld	r31, Z
    3f3c:	e0 2d       	mov	r30, r0
    3f3e:	82 81       	ldd	r24, Z+2	; 0x02
    3f40:	60 e0       	ldi	r22, 0x00	; 0
    3f42:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    3f46:	fe 01       	movw	r30, r28
    3f48:	ff 96       	adiw	r30, 0x3f	; 63
    3f4a:	01 90       	ld	r0, Z+
    3f4c:	f0 81       	ld	r31, Z
    3f4e:	e0 2d       	mov	r30, r0
    3f50:	83 81       	ldd	r24, Z+3	; 0x03
    3f52:	60 e0       	ldi	r22, 0x00	; 0
    3f54:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    3f58:	fe 01       	movw	r30, r28
    3f5a:	ff 96       	adiw	r30, 0x3f	; 63
    3f5c:	01 90       	ld	r0, Z+
    3f5e:	f0 81       	ld	r31, Z
    3f60:	e0 2d       	mov	r30, r0
    3f62:	84 81       	ldd	r24, Z+4	; 0x04
    3f64:	60 e0       	ldi	r22, 0x00	; 0
    3f66:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    3f6a:	fe 01       	movw	r30, r28
    3f6c:	ff 96       	adiw	r30, 0x3f	; 63
    3f6e:	01 90       	ld	r0, Z+
    3f70:	f0 81       	ld	r31, Z
    3f72:	e0 2d       	mov	r30, r0
    3f74:	85 81       	ldd	r24, Z+5	; 0x05
    3f76:	60 e0       	ldi	r22, 0x00	; 0
    3f78:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    3f7c:	fe 01       	movw	r30, r28
    3f7e:	ff 96       	adiw	r30, 0x3f	; 63
    3f80:	01 90       	ld	r0, Z+
    3f82:	f0 81       	ld	r31, Z
    3f84:	e0 2d       	mov	r30, r0
    3f86:	86 81       	ldd	r24, Z+6	; 0x06
    3f88:	60 e0       	ldi	r22, 0x00	; 0
    3f8a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    3f8e:	fe 01       	movw	r30, r28
    3f90:	ff 96       	adiw	r30, 0x3f	; 63
    3f92:	01 90       	ld	r0, Z+
    3f94:	f0 81       	ld	r31, Z
    3f96:	e0 2d       	mov	r30, r0
    3f98:	87 81       	ldd	r24, Z+7	; 0x07
    3f9a:	61 e0       	ldi	r22, 0x01	; 1
    3f9c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    3fa0:	3f c2       	rjmp	.+1150   	; 0x4420 <HMSSD_enDisplayIntegerNumber+0x1466>
						break;
					case 1:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    3fa2:	fe 01       	movw	r30, r28
    3fa4:	ff 96       	adiw	r30, 0x3f	; 63
    3fa6:	01 90       	ld	r0, Z+
    3fa8:	f0 81       	ld	r31, Z
    3faa:	e0 2d       	mov	r30, r0
    3fac:	81 81       	ldd	r24, Z+1	; 0x01
    3fae:	61 e0       	ldi	r22, 0x01	; 1
    3fb0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    3fb4:	fe 01       	movw	r30, r28
    3fb6:	ff 96       	adiw	r30, 0x3f	; 63
    3fb8:	01 90       	ld	r0, Z+
    3fba:	f0 81       	ld	r31, Z
    3fbc:	e0 2d       	mov	r30, r0
    3fbe:	82 81       	ldd	r24, Z+2	; 0x02
    3fc0:	60 e0       	ldi	r22, 0x00	; 0
    3fc2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    3fc6:	fe 01       	movw	r30, r28
    3fc8:	ff 96       	adiw	r30, 0x3f	; 63
    3fca:	01 90       	ld	r0, Z+
    3fcc:	f0 81       	ld	r31, Z
    3fce:	e0 2d       	mov	r30, r0
    3fd0:	83 81       	ldd	r24, Z+3	; 0x03
    3fd2:	60 e0       	ldi	r22, 0x00	; 0
    3fd4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    3fd8:	fe 01       	movw	r30, r28
    3fda:	ff 96       	adiw	r30, 0x3f	; 63
    3fdc:	01 90       	ld	r0, Z+
    3fde:	f0 81       	ld	r31, Z
    3fe0:	e0 2d       	mov	r30, r0
    3fe2:	84 81       	ldd	r24, Z+4	; 0x04
    3fe4:	61 e0       	ldi	r22, 0x01	; 1
    3fe6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    3fea:	fe 01       	movw	r30, r28
    3fec:	ff 96       	adiw	r30, 0x3f	; 63
    3fee:	01 90       	ld	r0, Z+
    3ff0:	f0 81       	ld	r31, Z
    3ff2:	e0 2d       	mov	r30, r0
    3ff4:	85 81       	ldd	r24, Z+5	; 0x05
    3ff6:	61 e0       	ldi	r22, 0x01	; 1
    3ff8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    3ffc:	fe 01       	movw	r30, r28
    3ffe:	ff 96       	adiw	r30, 0x3f	; 63
    4000:	01 90       	ld	r0, Z+
    4002:	f0 81       	ld	r31, Z
    4004:	e0 2d       	mov	r30, r0
    4006:	86 81       	ldd	r24, Z+6	; 0x06
    4008:	61 e0       	ldi	r22, 0x01	; 1
    400a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    400e:	fe 01       	movw	r30, r28
    4010:	ff 96       	adiw	r30, 0x3f	; 63
    4012:	01 90       	ld	r0, Z+
    4014:	f0 81       	ld	r31, Z
    4016:	e0 2d       	mov	r30, r0
    4018:	87 81       	ldd	r24, Z+7	; 0x07
    401a:	61 e0       	ldi	r22, 0x01	; 1
    401c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    4020:	ff c1       	rjmp	.+1022   	; 0x4420 <HMSSD_enDisplayIntegerNumber+0x1466>
						break;
					case 2:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    4022:	fe 01       	movw	r30, r28
    4024:	ff 96       	adiw	r30, 0x3f	; 63
    4026:	01 90       	ld	r0, Z+
    4028:	f0 81       	ld	r31, Z
    402a:	e0 2d       	mov	r30, r0
    402c:	81 81       	ldd	r24, Z+1	; 0x01
    402e:	60 e0       	ldi	r22, 0x00	; 0
    4030:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    4034:	fe 01       	movw	r30, r28
    4036:	ff 96       	adiw	r30, 0x3f	; 63
    4038:	01 90       	ld	r0, Z+
    403a:	f0 81       	ld	r31, Z
    403c:	e0 2d       	mov	r30, r0
    403e:	82 81       	ldd	r24, Z+2	; 0x02
    4040:	60 e0       	ldi	r22, 0x00	; 0
    4042:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    4046:	fe 01       	movw	r30, r28
    4048:	ff 96       	adiw	r30, 0x3f	; 63
    404a:	01 90       	ld	r0, Z+
    404c:	f0 81       	ld	r31, Z
    404e:	e0 2d       	mov	r30, r0
    4050:	83 81       	ldd	r24, Z+3	; 0x03
    4052:	61 e0       	ldi	r22, 0x01	; 1
    4054:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    4058:	fe 01       	movw	r30, r28
    405a:	ff 96       	adiw	r30, 0x3f	; 63
    405c:	01 90       	ld	r0, Z+
    405e:	f0 81       	ld	r31, Z
    4060:	e0 2d       	mov	r30, r0
    4062:	84 81       	ldd	r24, Z+4	; 0x04
    4064:	60 e0       	ldi	r22, 0x00	; 0
    4066:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    406a:	fe 01       	movw	r30, r28
    406c:	ff 96       	adiw	r30, 0x3f	; 63
    406e:	01 90       	ld	r0, Z+
    4070:	f0 81       	ld	r31, Z
    4072:	e0 2d       	mov	r30, r0
    4074:	85 81       	ldd	r24, Z+5	; 0x05
    4076:	60 e0       	ldi	r22, 0x00	; 0
    4078:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    407c:	fe 01       	movw	r30, r28
    407e:	ff 96       	adiw	r30, 0x3f	; 63
    4080:	01 90       	ld	r0, Z+
    4082:	f0 81       	ld	r31, Z
    4084:	e0 2d       	mov	r30, r0
    4086:	86 81       	ldd	r24, Z+6	; 0x06
    4088:	61 e0       	ldi	r22, 0x01	; 1
    408a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    408e:	fe 01       	movw	r30, r28
    4090:	ff 96       	adiw	r30, 0x3f	; 63
    4092:	01 90       	ld	r0, Z+
    4094:	f0 81       	ld	r31, Z
    4096:	e0 2d       	mov	r30, r0
    4098:	87 81       	ldd	r24, Z+7	; 0x07
    409a:	60 e0       	ldi	r22, 0x00	; 0
    409c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    40a0:	bf c1       	rjmp	.+894    	; 0x4420 <HMSSD_enDisplayIntegerNumber+0x1466>
						break;
					case 3:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    40a2:	fe 01       	movw	r30, r28
    40a4:	ff 96       	adiw	r30, 0x3f	; 63
    40a6:	01 90       	ld	r0, Z+
    40a8:	f0 81       	ld	r31, Z
    40aa:	e0 2d       	mov	r30, r0
    40ac:	81 81       	ldd	r24, Z+1	; 0x01
    40ae:	60 e0       	ldi	r22, 0x00	; 0
    40b0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    40b4:	fe 01       	movw	r30, r28
    40b6:	ff 96       	adiw	r30, 0x3f	; 63
    40b8:	01 90       	ld	r0, Z+
    40ba:	f0 81       	ld	r31, Z
    40bc:	e0 2d       	mov	r30, r0
    40be:	82 81       	ldd	r24, Z+2	; 0x02
    40c0:	60 e0       	ldi	r22, 0x00	; 0
    40c2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    40c6:	fe 01       	movw	r30, r28
    40c8:	ff 96       	adiw	r30, 0x3f	; 63
    40ca:	01 90       	ld	r0, Z+
    40cc:	f0 81       	ld	r31, Z
    40ce:	e0 2d       	mov	r30, r0
    40d0:	83 81       	ldd	r24, Z+3	; 0x03
    40d2:	60 e0       	ldi	r22, 0x00	; 0
    40d4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    40d8:	fe 01       	movw	r30, r28
    40da:	ff 96       	adiw	r30, 0x3f	; 63
    40dc:	01 90       	ld	r0, Z+
    40de:	f0 81       	ld	r31, Z
    40e0:	e0 2d       	mov	r30, r0
    40e2:	84 81       	ldd	r24, Z+4	; 0x04
    40e4:	60 e0       	ldi	r22, 0x00	; 0
    40e6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    40ea:	fe 01       	movw	r30, r28
    40ec:	ff 96       	adiw	r30, 0x3f	; 63
    40ee:	01 90       	ld	r0, Z+
    40f0:	f0 81       	ld	r31, Z
    40f2:	e0 2d       	mov	r30, r0
    40f4:	85 81       	ldd	r24, Z+5	; 0x05
    40f6:	61 e0       	ldi	r22, 0x01	; 1
    40f8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    40fc:	fe 01       	movw	r30, r28
    40fe:	ff 96       	adiw	r30, 0x3f	; 63
    4100:	01 90       	ld	r0, Z+
    4102:	f0 81       	ld	r31, Z
    4104:	e0 2d       	mov	r30, r0
    4106:	86 81       	ldd	r24, Z+6	; 0x06
    4108:	61 e0       	ldi	r22, 0x01	; 1
    410a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    410e:	fe 01       	movw	r30, r28
    4110:	ff 96       	adiw	r30, 0x3f	; 63
    4112:	01 90       	ld	r0, Z+
    4114:	f0 81       	ld	r31, Z
    4116:	e0 2d       	mov	r30, r0
    4118:	87 81       	ldd	r24, Z+7	; 0x07
    411a:	60 e0       	ldi	r22, 0x00	; 0
    411c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    4120:	7f c1       	rjmp	.+766    	; 0x4420 <HMSSD_enDisplayIntegerNumber+0x1466>
						break;
					case 4:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    4122:	fe 01       	movw	r30, r28
    4124:	ff 96       	adiw	r30, 0x3f	; 63
    4126:	01 90       	ld	r0, Z+
    4128:	f0 81       	ld	r31, Z
    412a:	e0 2d       	mov	r30, r0
    412c:	81 81       	ldd	r24, Z+1	; 0x01
    412e:	61 e0       	ldi	r22, 0x01	; 1
    4130:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    4134:	fe 01       	movw	r30, r28
    4136:	ff 96       	adiw	r30, 0x3f	; 63
    4138:	01 90       	ld	r0, Z+
    413a:	f0 81       	ld	r31, Z
    413c:	e0 2d       	mov	r30, r0
    413e:	82 81       	ldd	r24, Z+2	; 0x02
    4140:	60 e0       	ldi	r22, 0x00	; 0
    4142:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    4146:	fe 01       	movw	r30, r28
    4148:	ff 96       	adiw	r30, 0x3f	; 63
    414a:	01 90       	ld	r0, Z+
    414c:	f0 81       	ld	r31, Z
    414e:	e0 2d       	mov	r30, r0
    4150:	83 81       	ldd	r24, Z+3	; 0x03
    4152:	60 e0       	ldi	r22, 0x00	; 0
    4154:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    4158:	fe 01       	movw	r30, r28
    415a:	ff 96       	adiw	r30, 0x3f	; 63
    415c:	01 90       	ld	r0, Z+
    415e:	f0 81       	ld	r31, Z
    4160:	e0 2d       	mov	r30, r0
    4162:	84 81       	ldd	r24, Z+4	; 0x04
    4164:	61 e0       	ldi	r22, 0x01	; 1
    4166:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    416a:	fe 01       	movw	r30, r28
    416c:	ff 96       	adiw	r30, 0x3f	; 63
    416e:	01 90       	ld	r0, Z+
    4170:	f0 81       	ld	r31, Z
    4172:	e0 2d       	mov	r30, r0
    4174:	85 81       	ldd	r24, Z+5	; 0x05
    4176:	61 e0       	ldi	r22, 0x01	; 1
    4178:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    417c:	fe 01       	movw	r30, r28
    417e:	ff 96       	adiw	r30, 0x3f	; 63
    4180:	01 90       	ld	r0, Z+
    4182:	f0 81       	ld	r31, Z
    4184:	e0 2d       	mov	r30, r0
    4186:	86 81       	ldd	r24, Z+6	; 0x06
    4188:	60 e0       	ldi	r22, 0x00	; 0
    418a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    418e:	fe 01       	movw	r30, r28
    4190:	ff 96       	adiw	r30, 0x3f	; 63
    4192:	01 90       	ld	r0, Z+
    4194:	f0 81       	ld	r31, Z
    4196:	e0 2d       	mov	r30, r0
    4198:	87 81       	ldd	r24, Z+7	; 0x07
    419a:	60 e0       	ldi	r22, 0x00	; 0
    419c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    41a0:	3f c1       	rjmp	.+638    	; 0x4420 <HMSSD_enDisplayIntegerNumber+0x1466>
						break;
					case 5:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    41a2:	fe 01       	movw	r30, r28
    41a4:	ff 96       	adiw	r30, 0x3f	; 63
    41a6:	01 90       	ld	r0, Z+
    41a8:	f0 81       	ld	r31, Z
    41aa:	e0 2d       	mov	r30, r0
    41ac:	81 81       	ldd	r24, Z+1	; 0x01
    41ae:	60 e0       	ldi	r22, 0x00	; 0
    41b0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    41b4:	fe 01       	movw	r30, r28
    41b6:	ff 96       	adiw	r30, 0x3f	; 63
    41b8:	01 90       	ld	r0, Z+
    41ba:	f0 81       	ld	r31, Z
    41bc:	e0 2d       	mov	r30, r0
    41be:	82 81       	ldd	r24, Z+2	; 0x02
    41c0:	61 e0       	ldi	r22, 0x01	; 1
    41c2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    41c6:	fe 01       	movw	r30, r28
    41c8:	ff 96       	adiw	r30, 0x3f	; 63
    41ca:	01 90       	ld	r0, Z+
    41cc:	f0 81       	ld	r31, Z
    41ce:	e0 2d       	mov	r30, r0
    41d0:	83 81       	ldd	r24, Z+3	; 0x03
    41d2:	60 e0       	ldi	r22, 0x00	; 0
    41d4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    41d8:	fe 01       	movw	r30, r28
    41da:	ff 96       	adiw	r30, 0x3f	; 63
    41dc:	01 90       	ld	r0, Z+
    41de:	f0 81       	ld	r31, Z
    41e0:	e0 2d       	mov	r30, r0
    41e2:	84 81       	ldd	r24, Z+4	; 0x04
    41e4:	60 e0       	ldi	r22, 0x00	; 0
    41e6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    41ea:	fe 01       	movw	r30, r28
    41ec:	ff 96       	adiw	r30, 0x3f	; 63
    41ee:	01 90       	ld	r0, Z+
    41f0:	f0 81       	ld	r31, Z
    41f2:	e0 2d       	mov	r30, r0
    41f4:	85 81       	ldd	r24, Z+5	; 0x05
    41f6:	61 e0       	ldi	r22, 0x01	; 1
    41f8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    41fc:	fe 01       	movw	r30, r28
    41fe:	ff 96       	adiw	r30, 0x3f	; 63
    4200:	01 90       	ld	r0, Z+
    4202:	f0 81       	ld	r31, Z
    4204:	e0 2d       	mov	r30, r0
    4206:	86 81       	ldd	r24, Z+6	; 0x06
    4208:	60 e0       	ldi	r22, 0x00	; 0
    420a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    420e:	fe 01       	movw	r30, r28
    4210:	ff 96       	adiw	r30, 0x3f	; 63
    4212:	01 90       	ld	r0, Z+
    4214:	f0 81       	ld	r31, Z
    4216:	e0 2d       	mov	r30, r0
    4218:	87 81       	ldd	r24, Z+7	; 0x07
    421a:	60 e0       	ldi	r22, 0x00	; 0
    421c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    4220:	ff c0       	rjmp	.+510    	; 0x4420 <HMSSD_enDisplayIntegerNumber+0x1466>
						break;
					case 6:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    4222:	fe 01       	movw	r30, r28
    4224:	ff 96       	adiw	r30, 0x3f	; 63
    4226:	01 90       	ld	r0, Z+
    4228:	f0 81       	ld	r31, Z
    422a:	e0 2d       	mov	r30, r0
    422c:	81 81       	ldd	r24, Z+1	; 0x01
    422e:	60 e0       	ldi	r22, 0x00	; 0
    4230:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    4234:	fe 01       	movw	r30, r28
    4236:	ff 96       	adiw	r30, 0x3f	; 63
    4238:	01 90       	ld	r0, Z+
    423a:	f0 81       	ld	r31, Z
    423c:	e0 2d       	mov	r30, r0
    423e:	82 81       	ldd	r24, Z+2	; 0x02
    4240:	61 e0       	ldi	r22, 0x01	; 1
    4242:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    4246:	fe 01       	movw	r30, r28
    4248:	ff 96       	adiw	r30, 0x3f	; 63
    424a:	01 90       	ld	r0, Z+
    424c:	f0 81       	ld	r31, Z
    424e:	e0 2d       	mov	r30, r0
    4250:	83 81       	ldd	r24, Z+3	; 0x03
    4252:	60 e0       	ldi	r22, 0x00	; 0
    4254:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    4258:	fe 01       	movw	r30, r28
    425a:	ff 96       	adiw	r30, 0x3f	; 63
    425c:	01 90       	ld	r0, Z+
    425e:	f0 81       	ld	r31, Z
    4260:	e0 2d       	mov	r30, r0
    4262:	84 81       	ldd	r24, Z+4	; 0x04
    4264:	60 e0       	ldi	r22, 0x00	; 0
    4266:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    426a:	fe 01       	movw	r30, r28
    426c:	ff 96       	adiw	r30, 0x3f	; 63
    426e:	01 90       	ld	r0, Z+
    4270:	f0 81       	ld	r31, Z
    4272:	e0 2d       	mov	r30, r0
    4274:	85 81       	ldd	r24, Z+5	; 0x05
    4276:	60 e0       	ldi	r22, 0x00	; 0
    4278:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    427c:	fe 01       	movw	r30, r28
    427e:	ff 96       	adiw	r30, 0x3f	; 63
    4280:	01 90       	ld	r0, Z+
    4282:	f0 81       	ld	r31, Z
    4284:	e0 2d       	mov	r30, r0
    4286:	86 81       	ldd	r24, Z+6	; 0x06
    4288:	60 e0       	ldi	r22, 0x00	; 0
    428a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    428e:	fe 01       	movw	r30, r28
    4290:	ff 96       	adiw	r30, 0x3f	; 63
    4292:	01 90       	ld	r0, Z+
    4294:	f0 81       	ld	r31, Z
    4296:	e0 2d       	mov	r30, r0
    4298:	87 81       	ldd	r24, Z+7	; 0x07
    429a:	60 e0       	ldi	r22, 0x00	; 0
    429c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    42a0:	bf c0       	rjmp	.+382    	; 0x4420 <HMSSD_enDisplayIntegerNumber+0x1466>
						break;
					case 7:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    42a2:	fe 01       	movw	r30, r28
    42a4:	ff 96       	adiw	r30, 0x3f	; 63
    42a6:	01 90       	ld	r0, Z+
    42a8:	f0 81       	ld	r31, Z
    42aa:	e0 2d       	mov	r30, r0
    42ac:	81 81       	ldd	r24, Z+1	; 0x01
    42ae:	60 e0       	ldi	r22, 0x00	; 0
    42b0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    42b4:	fe 01       	movw	r30, r28
    42b6:	ff 96       	adiw	r30, 0x3f	; 63
    42b8:	01 90       	ld	r0, Z+
    42ba:	f0 81       	ld	r31, Z
    42bc:	e0 2d       	mov	r30, r0
    42be:	82 81       	ldd	r24, Z+2	; 0x02
    42c0:	60 e0       	ldi	r22, 0x00	; 0
    42c2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    42c6:	fe 01       	movw	r30, r28
    42c8:	ff 96       	adiw	r30, 0x3f	; 63
    42ca:	01 90       	ld	r0, Z+
    42cc:	f0 81       	ld	r31, Z
    42ce:	e0 2d       	mov	r30, r0
    42d0:	83 81       	ldd	r24, Z+3	; 0x03
    42d2:	60 e0       	ldi	r22, 0x00	; 0
    42d4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    42d8:	fe 01       	movw	r30, r28
    42da:	ff 96       	adiw	r30, 0x3f	; 63
    42dc:	01 90       	ld	r0, Z+
    42de:	f0 81       	ld	r31, Z
    42e0:	e0 2d       	mov	r30, r0
    42e2:	84 81       	ldd	r24, Z+4	; 0x04
    42e4:	61 e0       	ldi	r22, 0x01	; 1
    42e6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    42ea:	fe 01       	movw	r30, r28
    42ec:	ff 96       	adiw	r30, 0x3f	; 63
    42ee:	01 90       	ld	r0, Z+
    42f0:	f0 81       	ld	r31, Z
    42f2:	e0 2d       	mov	r30, r0
    42f4:	85 81       	ldd	r24, Z+5	; 0x05
    42f6:	61 e0       	ldi	r22, 0x01	; 1
    42f8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    42fc:	fe 01       	movw	r30, r28
    42fe:	ff 96       	adiw	r30, 0x3f	; 63
    4300:	01 90       	ld	r0, Z+
    4302:	f0 81       	ld	r31, Z
    4304:	e0 2d       	mov	r30, r0
    4306:	86 81       	ldd	r24, Z+6	; 0x06
    4308:	61 e0       	ldi	r22, 0x01	; 1
    430a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    430e:	fe 01       	movw	r30, r28
    4310:	ff 96       	adiw	r30, 0x3f	; 63
    4312:	01 90       	ld	r0, Z+
    4314:	f0 81       	ld	r31, Z
    4316:	e0 2d       	mov	r30, r0
    4318:	87 81       	ldd	r24, Z+7	; 0x07
    431a:	61 e0       	ldi	r22, 0x01	; 1
    431c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    4320:	7f c0       	rjmp	.+254    	; 0x4420 <HMSSD_enDisplayIntegerNumber+0x1466>
						break;
					case 8:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    4322:	fe 01       	movw	r30, r28
    4324:	ff 96       	adiw	r30, 0x3f	; 63
    4326:	01 90       	ld	r0, Z+
    4328:	f0 81       	ld	r31, Z
    432a:	e0 2d       	mov	r30, r0
    432c:	81 81       	ldd	r24, Z+1	; 0x01
    432e:	60 e0       	ldi	r22, 0x00	; 0
    4330:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    4334:	fe 01       	movw	r30, r28
    4336:	ff 96       	adiw	r30, 0x3f	; 63
    4338:	01 90       	ld	r0, Z+
    433a:	f0 81       	ld	r31, Z
    433c:	e0 2d       	mov	r30, r0
    433e:	82 81       	ldd	r24, Z+2	; 0x02
    4340:	60 e0       	ldi	r22, 0x00	; 0
    4342:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    4346:	fe 01       	movw	r30, r28
    4348:	ff 96       	adiw	r30, 0x3f	; 63
    434a:	01 90       	ld	r0, Z+
    434c:	f0 81       	ld	r31, Z
    434e:	e0 2d       	mov	r30, r0
    4350:	83 81       	ldd	r24, Z+3	; 0x03
    4352:	60 e0       	ldi	r22, 0x00	; 0
    4354:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    4358:	fe 01       	movw	r30, r28
    435a:	ff 96       	adiw	r30, 0x3f	; 63
    435c:	01 90       	ld	r0, Z+
    435e:	f0 81       	ld	r31, Z
    4360:	e0 2d       	mov	r30, r0
    4362:	84 81       	ldd	r24, Z+4	; 0x04
    4364:	60 e0       	ldi	r22, 0x00	; 0
    4366:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    436a:	fe 01       	movw	r30, r28
    436c:	ff 96       	adiw	r30, 0x3f	; 63
    436e:	01 90       	ld	r0, Z+
    4370:	f0 81       	ld	r31, Z
    4372:	e0 2d       	mov	r30, r0
    4374:	85 81       	ldd	r24, Z+5	; 0x05
    4376:	60 e0       	ldi	r22, 0x00	; 0
    4378:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    437c:	fe 01       	movw	r30, r28
    437e:	ff 96       	adiw	r30, 0x3f	; 63
    4380:	01 90       	ld	r0, Z+
    4382:	f0 81       	ld	r31, Z
    4384:	e0 2d       	mov	r30, r0
    4386:	86 81       	ldd	r24, Z+6	; 0x06
    4388:	60 e0       	ldi	r22, 0x00	; 0
    438a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    438e:	fe 01       	movw	r30, r28
    4390:	ff 96       	adiw	r30, 0x3f	; 63
    4392:	01 90       	ld	r0, Z+
    4394:	f0 81       	ld	r31, Z
    4396:	e0 2d       	mov	r30, r0
    4398:	87 81       	ldd	r24, Z+7	; 0x07
    439a:	60 e0       	ldi	r22, 0x00	; 0
    439c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    43a0:	3f c0       	rjmp	.+126    	; 0x4420 <HMSSD_enDisplayIntegerNumber+0x1466>
						break;
					case 9:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    43a2:	fe 01       	movw	r30, r28
    43a4:	ff 96       	adiw	r30, 0x3f	; 63
    43a6:	01 90       	ld	r0, Z+
    43a8:	f0 81       	ld	r31, Z
    43aa:	e0 2d       	mov	r30, r0
    43ac:	81 81       	ldd	r24, Z+1	; 0x01
    43ae:	60 e0       	ldi	r22, 0x00	; 0
    43b0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    43b4:	fe 01       	movw	r30, r28
    43b6:	ff 96       	adiw	r30, 0x3f	; 63
    43b8:	01 90       	ld	r0, Z+
    43ba:	f0 81       	ld	r31, Z
    43bc:	e0 2d       	mov	r30, r0
    43be:	82 81       	ldd	r24, Z+2	; 0x02
    43c0:	60 e0       	ldi	r22, 0x00	; 0
    43c2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    43c6:	fe 01       	movw	r30, r28
    43c8:	ff 96       	adiw	r30, 0x3f	; 63
    43ca:	01 90       	ld	r0, Z+
    43cc:	f0 81       	ld	r31, Z
    43ce:	e0 2d       	mov	r30, r0
    43d0:	83 81       	ldd	r24, Z+3	; 0x03
    43d2:	60 e0       	ldi	r22, 0x00	; 0
    43d4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    43d8:	fe 01       	movw	r30, r28
    43da:	ff 96       	adiw	r30, 0x3f	; 63
    43dc:	01 90       	ld	r0, Z+
    43de:	f0 81       	ld	r31, Z
    43e0:	e0 2d       	mov	r30, r0
    43e2:	84 81       	ldd	r24, Z+4	; 0x04
    43e4:	60 e0       	ldi	r22, 0x00	; 0
    43e6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    43ea:	fe 01       	movw	r30, r28
    43ec:	ff 96       	adiw	r30, 0x3f	; 63
    43ee:	01 90       	ld	r0, Z+
    43f0:	f0 81       	ld	r31, Z
    43f2:	e0 2d       	mov	r30, r0
    43f4:	85 81       	ldd	r24, Z+5	; 0x05
    43f6:	61 e0       	ldi	r22, 0x01	; 1
    43f8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    43fc:	fe 01       	movw	r30, r28
    43fe:	ff 96       	adiw	r30, 0x3f	; 63
    4400:	01 90       	ld	r0, Z+
    4402:	f0 81       	ld	r31, Z
    4404:	e0 2d       	mov	r30, r0
    4406:	86 81       	ldd	r24, Z+6	; 0x06
    4408:	60 e0       	ldi	r22, 0x00	; 0
    440a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    440e:	fe 01       	movw	r30, r28
    4410:	ff 96       	adiw	r30, 0x3f	; 63
    4412:	01 90       	ld	r0, Z+
    4414:	f0 81       	ld	r31, Z
    4416:	e0 2d       	mov	r30, r0
    4418:	87 81       	ldd	r24, Z+7	; 0x07
    441a:	60 e0       	ldi	r22, 0x00	; 0
    441c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    4420:	80 e0       	ldi	r24, 0x00	; 0
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	a0 e2       	ldi	r26, 0x20	; 32
    4426:	b1 e4       	ldi	r27, 0x41	; 65
    4428:	89 8f       	std	Y+25, r24	; 0x19
    442a:	9a 8f       	std	Y+26, r25	; 0x1a
    442c:	ab 8f       	std	Y+27, r26	; 0x1b
    442e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4430:	69 8d       	ldd	r22, Y+25	; 0x19
    4432:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4434:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4436:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4438:	20 e0       	ldi	r18, 0x00	; 0
    443a:	30 e0       	ldi	r19, 0x00	; 0
    443c:	4a e7       	ldi	r20, 0x7A	; 122
    443e:	55 e4       	ldi	r21, 0x45	; 69
    4440:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4444:	dc 01       	movw	r26, r24
    4446:	cb 01       	movw	r24, r22
    4448:	8d 8b       	std	Y+21, r24	; 0x15
    444a:	9e 8b       	std	Y+22, r25	; 0x16
    444c:	af 8b       	std	Y+23, r26	; 0x17
    444e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4450:	6d 89       	ldd	r22, Y+21	; 0x15
    4452:	7e 89       	ldd	r23, Y+22	; 0x16
    4454:	8f 89       	ldd	r24, Y+23	; 0x17
    4456:	98 8d       	ldd	r25, Y+24	; 0x18
    4458:	20 e0       	ldi	r18, 0x00	; 0
    445a:	30 e0       	ldi	r19, 0x00	; 0
    445c:	40 e8       	ldi	r20, 0x80	; 128
    445e:	5f e3       	ldi	r21, 0x3F	; 63
    4460:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4464:	88 23       	and	r24, r24
    4466:	2c f4       	brge	.+10     	; 0x4472 <HMSSD_enDisplayIntegerNumber+0x14b8>
		__ticks = 1;
    4468:	81 e0       	ldi	r24, 0x01	; 1
    446a:	90 e0       	ldi	r25, 0x00	; 0
    446c:	9c 8b       	std	Y+20, r25	; 0x14
    446e:	8b 8b       	std	Y+19, r24	; 0x13
    4470:	3f c0       	rjmp	.+126    	; 0x44f0 <HMSSD_enDisplayIntegerNumber+0x1536>
	else if (__tmp > 65535)
    4472:	6d 89       	ldd	r22, Y+21	; 0x15
    4474:	7e 89       	ldd	r23, Y+22	; 0x16
    4476:	8f 89       	ldd	r24, Y+23	; 0x17
    4478:	98 8d       	ldd	r25, Y+24	; 0x18
    447a:	20 e0       	ldi	r18, 0x00	; 0
    447c:	3f ef       	ldi	r19, 0xFF	; 255
    447e:	4f e7       	ldi	r20, 0x7F	; 127
    4480:	57 e4       	ldi	r21, 0x47	; 71
    4482:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4486:	18 16       	cp	r1, r24
    4488:	4c f5       	brge	.+82     	; 0x44dc <HMSSD_enDisplayIntegerNumber+0x1522>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    448a:	69 8d       	ldd	r22, Y+25	; 0x19
    448c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    448e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4490:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4492:	20 e0       	ldi	r18, 0x00	; 0
    4494:	30 e0       	ldi	r19, 0x00	; 0
    4496:	40 e2       	ldi	r20, 0x20	; 32
    4498:	51 e4       	ldi	r21, 0x41	; 65
    449a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    449e:	dc 01       	movw	r26, r24
    44a0:	cb 01       	movw	r24, r22
    44a2:	bc 01       	movw	r22, r24
    44a4:	cd 01       	movw	r24, r26
    44a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44aa:	dc 01       	movw	r26, r24
    44ac:	cb 01       	movw	r24, r22
    44ae:	9c 8b       	std	Y+20, r25	; 0x14
    44b0:	8b 8b       	std	Y+19, r24	; 0x13
    44b2:	0f c0       	rjmp	.+30     	; 0x44d2 <HMSSD_enDisplayIntegerNumber+0x1518>
    44b4:	80 e9       	ldi	r24, 0x90	; 144
    44b6:	91 e0       	ldi	r25, 0x01	; 1
    44b8:	9a 8b       	std	Y+18, r25	; 0x12
    44ba:	89 8b       	std	Y+17, r24	; 0x11
    44bc:	89 89       	ldd	r24, Y+17	; 0x11
    44be:	9a 89       	ldd	r25, Y+18	; 0x12
    44c0:	01 97       	sbiw	r24, 0x01	; 1
    44c2:	f1 f7       	brne	.-4      	; 0x44c0 <HMSSD_enDisplayIntegerNumber+0x1506>
    44c4:	9a 8b       	std	Y+18, r25	; 0x12
    44c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44c8:	8b 89       	ldd	r24, Y+19	; 0x13
    44ca:	9c 89       	ldd	r25, Y+20	; 0x14
    44cc:	01 97       	sbiw	r24, 0x01	; 1
    44ce:	9c 8b       	std	Y+20, r25	; 0x14
    44d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44d2:	8b 89       	ldd	r24, Y+19	; 0x13
    44d4:	9c 89       	ldd	r25, Y+20	; 0x14
    44d6:	00 97       	sbiw	r24, 0x00	; 0
    44d8:	69 f7       	brne	.-38     	; 0x44b4 <HMSSD_enDisplayIntegerNumber+0x14fa>
    44da:	14 c0       	rjmp	.+40     	; 0x4504 <HMSSD_enDisplayIntegerNumber+0x154a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44dc:	6d 89       	ldd	r22, Y+21	; 0x15
    44de:	7e 89       	ldd	r23, Y+22	; 0x16
    44e0:	8f 89       	ldd	r24, Y+23	; 0x17
    44e2:	98 8d       	ldd	r25, Y+24	; 0x18
    44e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44e8:	dc 01       	movw	r26, r24
    44ea:	cb 01       	movw	r24, r22
    44ec:	9c 8b       	std	Y+20, r25	; 0x14
    44ee:	8b 8b       	std	Y+19, r24	; 0x13
    44f0:	8b 89       	ldd	r24, Y+19	; 0x13
    44f2:	9c 89       	ldd	r25, Y+20	; 0x14
    44f4:	98 8b       	std	Y+16, r25	; 0x10
    44f6:	8f 87       	std	Y+15, r24	; 0x0f
    44f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    44fa:	98 89       	ldd	r25, Y+16	; 0x10
    44fc:	01 97       	sbiw	r24, 0x01	; 1
    44fe:	f1 f7       	brne	.-4      	; 0x44fc <HMSSD_enDisplayIntegerNumber+0x1542>
    4500:	98 8b       	std	Y+16, r25	; 0x10
    4502:	8f 87       	std	Y+15, r24	; 0x0f
						break;
					} // switch on Tens --> CA

					_delay_ms(10);
					// Disable SSD1
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN1, LOW);
    4504:	fe 01       	movw	r30, r28
    4506:	ff 96       	adiw	r30, 0x3f	; 63
    4508:	01 90       	ld	r0, Z+
    450a:	f0 81       	ld	r31, Z
    450c:	e0 2d       	mov	r30, r0
    450e:	81 85       	ldd	r24, Z+9	; 0x09
    4510:	60 e0       	ldi	r22, 0x00	; 0
    4512:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					// Enable SSD2
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN2, HIGH);
    4516:	fe 01       	movw	r30, r28
    4518:	ff 96       	adiw	r30, 0x3f	; 63
    451a:	01 90       	ld	r0, Z+
    451c:	f0 81       	ld	r31, Z
    451e:	e0 2d       	mov	r30, r0
    4520:	82 85       	ldd	r24, Z+10	; 0x0a
    4522:	61 e0       	ldi	r22, 0x01	; 1
    4524:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>

					switch (Local_u8Units) {
    4528:	8b ad       	ldd	r24, Y+59	; 0x3b
    452a:	28 2f       	mov	r18, r24
    452c:	30 e0       	ldi	r19, 0x00	; 0
    452e:	23 96       	adiw	r28, 0x03	; 3
    4530:	3f af       	std	Y+63, r19	; 0x3f
    4532:	2e af       	std	Y+62, r18	; 0x3e
    4534:	23 97       	sbiw	r28, 0x03	; 3
    4536:	23 96       	adiw	r28, 0x03	; 3
    4538:	8e ad       	ldd	r24, Y+62	; 0x3e
    453a:	9f ad       	ldd	r25, Y+63	; 0x3f
    453c:	23 97       	sbiw	r28, 0x03	; 3
    453e:	84 30       	cpi	r24, 0x04	; 4
    4540:	91 05       	cpc	r25, r1
    4542:	09 f4       	brne	.+2      	; 0x4546 <HMSSD_enDisplayIntegerNumber+0x158c>
    4544:	60 c1       	rjmp	.+704    	; 0x4806 <HMSSD_enDisplayIntegerNumber+0x184c>
    4546:	23 96       	adiw	r28, 0x03	; 3
    4548:	2e ad       	ldd	r18, Y+62	; 0x3e
    454a:	3f ad       	ldd	r19, Y+63	; 0x3f
    454c:	23 97       	sbiw	r28, 0x03	; 3
    454e:	25 30       	cpi	r18, 0x05	; 5
    4550:	31 05       	cpc	r19, r1
    4552:	44 f5       	brge	.+80     	; 0x45a4 <HMSSD_enDisplayIntegerNumber+0x15ea>
    4554:	23 96       	adiw	r28, 0x03	; 3
    4556:	8e ad       	ldd	r24, Y+62	; 0x3e
    4558:	9f ad       	ldd	r25, Y+63	; 0x3f
    455a:	23 97       	sbiw	r28, 0x03	; 3
    455c:	81 30       	cpi	r24, 0x01	; 1
    455e:	91 05       	cpc	r25, r1
    4560:	09 f4       	brne	.+2      	; 0x4564 <HMSSD_enDisplayIntegerNumber+0x15aa>
    4562:	91 c0       	rjmp	.+290    	; 0x4686 <HMSSD_enDisplayIntegerNumber+0x16cc>
    4564:	23 96       	adiw	r28, 0x03	; 3
    4566:	2e ad       	ldd	r18, Y+62	; 0x3e
    4568:	3f ad       	ldd	r19, Y+63	; 0x3f
    456a:	23 97       	sbiw	r28, 0x03	; 3
    456c:	22 30       	cpi	r18, 0x02	; 2
    456e:	31 05       	cpc	r19, r1
    4570:	44 f4       	brge	.+16     	; 0x4582 <HMSSD_enDisplayIntegerNumber+0x15c8>
    4572:	23 96       	adiw	r28, 0x03	; 3
    4574:	8e ad       	ldd	r24, Y+62	; 0x3e
    4576:	9f ad       	ldd	r25, Y+63	; 0x3f
    4578:	23 97       	sbiw	r28, 0x03	; 3
    457a:	00 97       	sbiw	r24, 0x00	; 0
    457c:	09 f4       	brne	.+2      	; 0x4580 <HMSSD_enDisplayIntegerNumber+0x15c6>
    457e:	43 c0       	rjmp	.+134    	; 0x4606 <HMSSD_enDisplayIntegerNumber+0x164c>
    4580:	c1 c2       	rjmp	.+1410   	; 0x4b04 <HMSSD_enDisplayIntegerNumber+0x1b4a>
    4582:	23 96       	adiw	r28, 0x03	; 3
    4584:	2e ad       	ldd	r18, Y+62	; 0x3e
    4586:	3f ad       	ldd	r19, Y+63	; 0x3f
    4588:	23 97       	sbiw	r28, 0x03	; 3
    458a:	22 30       	cpi	r18, 0x02	; 2
    458c:	31 05       	cpc	r19, r1
    458e:	09 f4       	brne	.+2      	; 0x4592 <HMSSD_enDisplayIntegerNumber+0x15d8>
    4590:	ba c0       	rjmp	.+372    	; 0x4706 <HMSSD_enDisplayIntegerNumber+0x174c>
    4592:	23 96       	adiw	r28, 0x03	; 3
    4594:	8e ad       	ldd	r24, Y+62	; 0x3e
    4596:	9f ad       	ldd	r25, Y+63	; 0x3f
    4598:	23 97       	sbiw	r28, 0x03	; 3
    459a:	83 30       	cpi	r24, 0x03	; 3
    459c:	91 05       	cpc	r25, r1
    459e:	09 f4       	brne	.+2      	; 0x45a2 <HMSSD_enDisplayIntegerNumber+0x15e8>
    45a0:	f2 c0       	rjmp	.+484    	; 0x4786 <HMSSD_enDisplayIntegerNumber+0x17cc>
    45a2:	b0 c2       	rjmp	.+1376   	; 0x4b04 <HMSSD_enDisplayIntegerNumber+0x1b4a>
    45a4:	23 96       	adiw	r28, 0x03	; 3
    45a6:	2e ad       	ldd	r18, Y+62	; 0x3e
    45a8:	3f ad       	ldd	r19, Y+63	; 0x3f
    45aa:	23 97       	sbiw	r28, 0x03	; 3
    45ac:	27 30       	cpi	r18, 0x07	; 7
    45ae:	31 05       	cpc	r19, r1
    45b0:	09 f4       	brne	.+2      	; 0x45b4 <HMSSD_enDisplayIntegerNumber+0x15fa>
    45b2:	e9 c1       	rjmp	.+978    	; 0x4986 <HMSSD_enDisplayIntegerNumber+0x19cc>
    45b4:	23 96       	adiw	r28, 0x03	; 3
    45b6:	8e ad       	ldd	r24, Y+62	; 0x3e
    45b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    45ba:	23 97       	sbiw	r28, 0x03	; 3
    45bc:	88 30       	cpi	r24, 0x08	; 8
    45be:	91 05       	cpc	r25, r1
    45c0:	8c f4       	brge	.+34     	; 0x45e4 <HMSSD_enDisplayIntegerNumber+0x162a>
    45c2:	23 96       	adiw	r28, 0x03	; 3
    45c4:	2e ad       	ldd	r18, Y+62	; 0x3e
    45c6:	3f ad       	ldd	r19, Y+63	; 0x3f
    45c8:	23 97       	sbiw	r28, 0x03	; 3
    45ca:	25 30       	cpi	r18, 0x05	; 5
    45cc:	31 05       	cpc	r19, r1
    45ce:	09 f4       	brne	.+2      	; 0x45d2 <HMSSD_enDisplayIntegerNumber+0x1618>
    45d0:	5a c1       	rjmp	.+692    	; 0x4886 <HMSSD_enDisplayIntegerNumber+0x18cc>
    45d2:	23 96       	adiw	r28, 0x03	; 3
    45d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    45d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    45d8:	23 97       	sbiw	r28, 0x03	; 3
    45da:	86 30       	cpi	r24, 0x06	; 6
    45dc:	91 05       	cpc	r25, r1
    45de:	09 f4       	brne	.+2      	; 0x45e2 <HMSSD_enDisplayIntegerNumber+0x1628>
    45e0:	92 c1       	rjmp	.+804    	; 0x4906 <HMSSD_enDisplayIntegerNumber+0x194c>
    45e2:	90 c2       	rjmp	.+1312   	; 0x4b04 <HMSSD_enDisplayIntegerNumber+0x1b4a>
    45e4:	23 96       	adiw	r28, 0x03	; 3
    45e6:	2e ad       	ldd	r18, Y+62	; 0x3e
    45e8:	3f ad       	ldd	r19, Y+63	; 0x3f
    45ea:	23 97       	sbiw	r28, 0x03	; 3
    45ec:	28 30       	cpi	r18, 0x08	; 8
    45ee:	31 05       	cpc	r19, r1
    45f0:	09 f4       	brne	.+2      	; 0x45f4 <HMSSD_enDisplayIntegerNumber+0x163a>
    45f2:	09 c2       	rjmp	.+1042   	; 0x4a06 <HMSSD_enDisplayIntegerNumber+0x1a4c>
    45f4:	23 96       	adiw	r28, 0x03	; 3
    45f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    45f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    45fa:	23 97       	sbiw	r28, 0x03	; 3
    45fc:	89 30       	cpi	r24, 0x09	; 9
    45fe:	91 05       	cpc	r25, r1
    4600:	09 f4       	brne	.+2      	; 0x4604 <HMSSD_enDisplayIntegerNumber+0x164a>
    4602:	41 c2       	rjmp	.+1154   	; 0x4a86 <HMSSD_enDisplayIntegerNumber+0x1acc>
    4604:	7f c2       	rjmp	.+1278   	; 0x4b04 <HMSSD_enDisplayIntegerNumber+0x1b4a>
					case 0:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    4606:	fe 01       	movw	r30, r28
    4608:	ff 96       	adiw	r30, 0x3f	; 63
    460a:	01 90       	ld	r0, Z+
    460c:	f0 81       	ld	r31, Z
    460e:	e0 2d       	mov	r30, r0
    4610:	81 81       	ldd	r24, Z+1	; 0x01
    4612:	60 e0       	ldi	r22, 0x00	; 0
    4614:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    4618:	fe 01       	movw	r30, r28
    461a:	ff 96       	adiw	r30, 0x3f	; 63
    461c:	01 90       	ld	r0, Z+
    461e:	f0 81       	ld	r31, Z
    4620:	e0 2d       	mov	r30, r0
    4622:	82 81       	ldd	r24, Z+2	; 0x02
    4624:	60 e0       	ldi	r22, 0x00	; 0
    4626:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    462a:	fe 01       	movw	r30, r28
    462c:	ff 96       	adiw	r30, 0x3f	; 63
    462e:	01 90       	ld	r0, Z+
    4630:	f0 81       	ld	r31, Z
    4632:	e0 2d       	mov	r30, r0
    4634:	83 81       	ldd	r24, Z+3	; 0x03
    4636:	60 e0       	ldi	r22, 0x00	; 0
    4638:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    463c:	fe 01       	movw	r30, r28
    463e:	ff 96       	adiw	r30, 0x3f	; 63
    4640:	01 90       	ld	r0, Z+
    4642:	f0 81       	ld	r31, Z
    4644:	e0 2d       	mov	r30, r0
    4646:	84 81       	ldd	r24, Z+4	; 0x04
    4648:	60 e0       	ldi	r22, 0x00	; 0
    464a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    464e:	fe 01       	movw	r30, r28
    4650:	ff 96       	adiw	r30, 0x3f	; 63
    4652:	01 90       	ld	r0, Z+
    4654:	f0 81       	ld	r31, Z
    4656:	e0 2d       	mov	r30, r0
    4658:	85 81       	ldd	r24, Z+5	; 0x05
    465a:	60 e0       	ldi	r22, 0x00	; 0
    465c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    4660:	fe 01       	movw	r30, r28
    4662:	ff 96       	adiw	r30, 0x3f	; 63
    4664:	01 90       	ld	r0, Z+
    4666:	f0 81       	ld	r31, Z
    4668:	e0 2d       	mov	r30, r0
    466a:	86 81       	ldd	r24, Z+6	; 0x06
    466c:	60 e0       	ldi	r22, 0x00	; 0
    466e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    4672:	fe 01       	movw	r30, r28
    4674:	ff 96       	adiw	r30, 0x3f	; 63
    4676:	01 90       	ld	r0, Z+
    4678:	f0 81       	ld	r31, Z
    467a:	e0 2d       	mov	r30, r0
    467c:	87 81       	ldd	r24, Z+7	; 0x07
    467e:	61 e0       	ldi	r22, 0x01	; 1
    4680:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    4684:	3f c2       	rjmp	.+1150   	; 0x4b04 <HMSSD_enDisplayIntegerNumber+0x1b4a>
						break;
					case 1:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    4686:	fe 01       	movw	r30, r28
    4688:	ff 96       	adiw	r30, 0x3f	; 63
    468a:	01 90       	ld	r0, Z+
    468c:	f0 81       	ld	r31, Z
    468e:	e0 2d       	mov	r30, r0
    4690:	81 81       	ldd	r24, Z+1	; 0x01
    4692:	61 e0       	ldi	r22, 0x01	; 1
    4694:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    4698:	fe 01       	movw	r30, r28
    469a:	ff 96       	adiw	r30, 0x3f	; 63
    469c:	01 90       	ld	r0, Z+
    469e:	f0 81       	ld	r31, Z
    46a0:	e0 2d       	mov	r30, r0
    46a2:	82 81       	ldd	r24, Z+2	; 0x02
    46a4:	60 e0       	ldi	r22, 0x00	; 0
    46a6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    46aa:	fe 01       	movw	r30, r28
    46ac:	ff 96       	adiw	r30, 0x3f	; 63
    46ae:	01 90       	ld	r0, Z+
    46b0:	f0 81       	ld	r31, Z
    46b2:	e0 2d       	mov	r30, r0
    46b4:	83 81       	ldd	r24, Z+3	; 0x03
    46b6:	60 e0       	ldi	r22, 0x00	; 0
    46b8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    46bc:	fe 01       	movw	r30, r28
    46be:	ff 96       	adiw	r30, 0x3f	; 63
    46c0:	01 90       	ld	r0, Z+
    46c2:	f0 81       	ld	r31, Z
    46c4:	e0 2d       	mov	r30, r0
    46c6:	84 81       	ldd	r24, Z+4	; 0x04
    46c8:	61 e0       	ldi	r22, 0x01	; 1
    46ca:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    46ce:	fe 01       	movw	r30, r28
    46d0:	ff 96       	adiw	r30, 0x3f	; 63
    46d2:	01 90       	ld	r0, Z+
    46d4:	f0 81       	ld	r31, Z
    46d6:	e0 2d       	mov	r30, r0
    46d8:	85 81       	ldd	r24, Z+5	; 0x05
    46da:	61 e0       	ldi	r22, 0x01	; 1
    46dc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    46e0:	fe 01       	movw	r30, r28
    46e2:	ff 96       	adiw	r30, 0x3f	; 63
    46e4:	01 90       	ld	r0, Z+
    46e6:	f0 81       	ld	r31, Z
    46e8:	e0 2d       	mov	r30, r0
    46ea:	86 81       	ldd	r24, Z+6	; 0x06
    46ec:	61 e0       	ldi	r22, 0x01	; 1
    46ee:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    46f2:	fe 01       	movw	r30, r28
    46f4:	ff 96       	adiw	r30, 0x3f	; 63
    46f6:	01 90       	ld	r0, Z+
    46f8:	f0 81       	ld	r31, Z
    46fa:	e0 2d       	mov	r30, r0
    46fc:	87 81       	ldd	r24, Z+7	; 0x07
    46fe:	61 e0       	ldi	r22, 0x01	; 1
    4700:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    4704:	ff c1       	rjmp	.+1022   	; 0x4b04 <HMSSD_enDisplayIntegerNumber+0x1b4a>
						break;
					case 2:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    4706:	fe 01       	movw	r30, r28
    4708:	ff 96       	adiw	r30, 0x3f	; 63
    470a:	01 90       	ld	r0, Z+
    470c:	f0 81       	ld	r31, Z
    470e:	e0 2d       	mov	r30, r0
    4710:	81 81       	ldd	r24, Z+1	; 0x01
    4712:	60 e0       	ldi	r22, 0x00	; 0
    4714:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    4718:	fe 01       	movw	r30, r28
    471a:	ff 96       	adiw	r30, 0x3f	; 63
    471c:	01 90       	ld	r0, Z+
    471e:	f0 81       	ld	r31, Z
    4720:	e0 2d       	mov	r30, r0
    4722:	82 81       	ldd	r24, Z+2	; 0x02
    4724:	60 e0       	ldi	r22, 0x00	; 0
    4726:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    472a:	fe 01       	movw	r30, r28
    472c:	ff 96       	adiw	r30, 0x3f	; 63
    472e:	01 90       	ld	r0, Z+
    4730:	f0 81       	ld	r31, Z
    4732:	e0 2d       	mov	r30, r0
    4734:	83 81       	ldd	r24, Z+3	; 0x03
    4736:	61 e0       	ldi	r22, 0x01	; 1
    4738:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    473c:	fe 01       	movw	r30, r28
    473e:	ff 96       	adiw	r30, 0x3f	; 63
    4740:	01 90       	ld	r0, Z+
    4742:	f0 81       	ld	r31, Z
    4744:	e0 2d       	mov	r30, r0
    4746:	84 81       	ldd	r24, Z+4	; 0x04
    4748:	60 e0       	ldi	r22, 0x00	; 0
    474a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    474e:	fe 01       	movw	r30, r28
    4750:	ff 96       	adiw	r30, 0x3f	; 63
    4752:	01 90       	ld	r0, Z+
    4754:	f0 81       	ld	r31, Z
    4756:	e0 2d       	mov	r30, r0
    4758:	85 81       	ldd	r24, Z+5	; 0x05
    475a:	60 e0       	ldi	r22, 0x00	; 0
    475c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    4760:	fe 01       	movw	r30, r28
    4762:	ff 96       	adiw	r30, 0x3f	; 63
    4764:	01 90       	ld	r0, Z+
    4766:	f0 81       	ld	r31, Z
    4768:	e0 2d       	mov	r30, r0
    476a:	86 81       	ldd	r24, Z+6	; 0x06
    476c:	61 e0       	ldi	r22, 0x01	; 1
    476e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    4772:	fe 01       	movw	r30, r28
    4774:	ff 96       	adiw	r30, 0x3f	; 63
    4776:	01 90       	ld	r0, Z+
    4778:	f0 81       	ld	r31, Z
    477a:	e0 2d       	mov	r30, r0
    477c:	87 81       	ldd	r24, Z+7	; 0x07
    477e:	60 e0       	ldi	r22, 0x00	; 0
    4780:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    4784:	bf c1       	rjmp	.+894    	; 0x4b04 <HMSSD_enDisplayIntegerNumber+0x1b4a>
						break;
					case 3:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    4786:	fe 01       	movw	r30, r28
    4788:	ff 96       	adiw	r30, 0x3f	; 63
    478a:	01 90       	ld	r0, Z+
    478c:	f0 81       	ld	r31, Z
    478e:	e0 2d       	mov	r30, r0
    4790:	81 81       	ldd	r24, Z+1	; 0x01
    4792:	60 e0       	ldi	r22, 0x00	; 0
    4794:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    4798:	fe 01       	movw	r30, r28
    479a:	ff 96       	adiw	r30, 0x3f	; 63
    479c:	01 90       	ld	r0, Z+
    479e:	f0 81       	ld	r31, Z
    47a0:	e0 2d       	mov	r30, r0
    47a2:	82 81       	ldd	r24, Z+2	; 0x02
    47a4:	60 e0       	ldi	r22, 0x00	; 0
    47a6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    47aa:	fe 01       	movw	r30, r28
    47ac:	ff 96       	adiw	r30, 0x3f	; 63
    47ae:	01 90       	ld	r0, Z+
    47b0:	f0 81       	ld	r31, Z
    47b2:	e0 2d       	mov	r30, r0
    47b4:	83 81       	ldd	r24, Z+3	; 0x03
    47b6:	60 e0       	ldi	r22, 0x00	; 0
    47b8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    47bc:	fe 01       	movw	r30, r28
    47be:	ff 96       	adiw	r30, 0x3f	; 63
    47c0:	01 90       	ld	r0, Z+
    47c2:	f0 81       	ld	r31, Z
    47c4:	e0 2d       	mov	r30, r0
    47c6:	84 81       	ldd	r24, Z+4	; 0x04
    47c8:	60 e0       	ldi	r22, 0x00	; 0
    47ca:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    47ce:	fe 01       	movw	r30, r28
    47d0:	ff 96       	adiw	r30, 0x3f	; 63
    47d2:	01 90       	ld	r0, Z+
    47d4:	f0 81       	ld	r31, Z
    47d6:	e0 2d       	mov	r30, r0
    47d8:	85 81       	ldd	r24, Z+5	; 0x05
    47da:	61 e0       	ldi	r22, 0x01	; 1
    47dc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    47e0:	fe 01       	movw	r30, r28
    47e2:	ff 96       	adiw	r30, 0x3f	; 63
    47e4:	01 90       	ld	r0, Z+
    47e6:	f0 81       	ld	r31, Z
    47e8:	e0 2d       	mov	r30, r0
    47ea:	86 81       	ldd	r24, Z+6	; 0x06
    47ec:	61 e0       	ldi	r22, 0x01	; 1
    47ee:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    47f2:	fe 01       	movw	r30, r28
    47f4:	ff 96       	adiw	r30, 0x3f	; 63
    47f6:	01 90       	ld	r0, Z+
    47f8:	f0 81       	ld	r31, Z
    47fa:	e0 2d       	mov	r30, r0
    47fc:	87 81       	ldd	r24, Z+7	; 0x07
    47fe:	60 e0       	ldi	r22, 0x00	; 0
    4800:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    4804:	7f c1       	rjmp	.+766    	; 0x4b04 <HMSSD_enDisplayIntegerNumber+0x1b4a>
						break;
					case 4:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    4806:	fe 01       	movw	r30, r28
    4808:	ff 96       	adiw	r30, 0x3f	; 63
    480a:	01 90       	ld	r0, Z+
    480c:	f0 81       	ld	r31, Z
    480e:	e0 2d       	mov	r30, r0
    4810:	81 81       	ldd	r24, Z+1	; 0x01
    4812:	61 e0       	ldi	r22, 0x01	; 1
    4814:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    4818:	fe 01       	movw	r30, r28
    481a:	ff 96       	adiw	r30, 0x3f	; 63
    481c:	01 90       	ld	r0, Z+
    481e:	f0 81       	ld	r31, Z
    4820:	e0 2d       	mov	r30, r0
    4822:	82 81       	ldd	r24, Z+2	; 0x02
    4824:	60 e0       	ldi	r22, 0x00	; 0
    4826:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    482a:	fe 01       	movw	r30, r28
    482c:	ff 96       	adiw	r30, 0x3f	; 63
    482e:	01 90       	ld	r0, Z+
    4830:	f0 81       	ld	r31, Z
    4832:	e0 2d       	mov	r30, r0
    4834:	83 81       	ldd	r24, Z+3	; 0x03
    4836:	60 e0       	ldi	r22, 0x00	; 0
    4838:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    483c:	fe 01       	movw	r30, r28
    483e:	ff 96       	adiw	r30, 0x3f	; 63
    4840:	01 90       	ld	r0, Z+
    4842:	f0 81       	ld	r31, Z
    4844:	e0 2d       	mov	r30, r0
    4846:	84 81       	ldd	r24, Z+4	; 0x04
    4848:	61 e0       	ldi	r22, 0x01	; 1
    484a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    484e:	fe 01       	movw	r30, r28
    4850:	ff 96       	adiw	r30, 0x3f	; 63
    4852:	01 90       	ld	r0, Z+
    4854:	f0 81       	ld	r31, Z
    4856:	e0 2d       	mov	r30, r0
    4858:	85 81       	ldd	r24, Z+5	; 0x05
    485a:	61 e0       	ldi	r22, 0x01	; 1
    485c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    4860:	fe 01       	movw	r30, r28
    4862:	ff 96       	adiw	r30, 0x3f	; 63
    4864:	01 90       	ld	r0, Z+
    4866:	f0 81       	ld	r31, Z
    4868:	e0 2d       	mov	r30, r0
    486a:	86 81       	ldd	r24, Z+6	; 0x06
    486c:	60 e0       	ldi	r22, 0x00	; 0
    486e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    4872:	fe 01       	movw	r30, r28
    4874:	ff 96       	adiw	r30, 0x3f	; 63
    4876:	01 90       	ld	r0, Z+
    4878:	f0 81       	ld	r31, Z
    487a:	e0 2d       	mov	r30, r0
    487c:	87 81       	ldd	r24, Z+7	; 0x07
    487e:	60 e0       	ldi	r22, 0x00	; 0
    4880:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    4884:	3f c1       	rjmp	.+638    	; 0x4b04 <HMSSD_enDisplayIntegerNumber+0x1b4a>
						break;
					case 5:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    4886:	fe 01       	movw	r30, r28
    4888:	ff 96       	adiw	r30, 0x3f	; 63
    488a:	01 90       	ld	r0, Z+
    488c:	f0 81       	ld	r31, Z
    488e:	e0 2d       	mov	r30, r0
    4890:	81 81       	ldd	r24, Z+1	; 0x01
    4892:	60 e0       	ldi	r22, 0x00	; 0
    4894:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    4898:	fe 01       	movw	r30, r28
    489a:	ff 96       	adiw	r30, 0x3f	; 63
    489c:	01 90       	ld	r0, Z+
    489e:	f0 81       	ld	r31, Z
    48a0:	e0 2d       	mov	r30, r0
    48a2:	82 81       	ldd	r24, Z+2	; 0x02
    48a4:	61 e0       	ldi	r22, 0x01	; 1
    48a6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    48aa:	fe 01       	movw	r30, r28
    48ac:	ff 96       	adiw	r30, 0x3f	; 63
    48ae:	01 90       	ld	r0, Z+
    48b0:	f0 81       	ld	r31, Z
    48b2:	e0 2d       	mov	r30, r0
    48b4:	83 81       	ldd	r24, Z+3	; 0x03
    48b6:	60 e0       	ldi	r22, 0x00	; 0
    48b8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    48bc:	fe 01       	movw	r30, r28
    48be:	ff 96       	adiw	r30, 0x3f	; 63
    48c0:	01 90       	ld	r0, Z+
    48c2:	f0 81       	ld	r31, Z
    48c4:	e0 2d       	mov	r30, r0
    48c6:	84 81       	ldd	r24, Z+4	; 0x04
    48c8:	60 e0       	ldi	r22, 0x00	; 0
    48ca:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    48ce:	fe 01       	movw	r30, r28
    48d0:	ff 96       	adiw	r30, 0x3f	; 63
    48d2:	01 90       	ld	r0, Z+
    48d4:	f0 81       	ld	r31, Z
    48d6:	e0 2d       	mov	r30, r0
    48d8:	85 81       	ldd	r24, Z+5	; 0x05
    48da:	61 e0       	ldi	r22, 0x01	; 1
    48dc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    48e0:	fe 01       	movw	r30, r28
    48e2:	ff 96       	adiw	r30, 0x3f	; 63
    48e4:	01 90       	ld	r0, Z+
    48e6:	f0 81       	ld	r31, Z
    48e8:	e0 2d       	mov	r30, r0
    48ea:	86 81       	ldd	r24, Z+6	; 0x06
    48ec:	60 e0       	ldi	r22, 0x00	; 0
    48ee:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    48f2:	fe 01       	movw	r30, r28
    48f4:	ff 96       	adiw	r30, 0x3f	; 63
    48f6:	01 90       	ld	r0, Z+
    48f8:	f0 81       	ld	r31, Z
    48fa:	e0 2d       	mov	r30, r0
    48fc:	87 81       	ldd	r24, Z+7	; 0x07
    48fe:	60 e0       	ldi	r22, 0x00	; 0
    4900:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    4904:	ff c0       	rjmp	.+510    	; 0x4b04 <HMSSD_enDisplayIntegerNumber+0x1b4a>
						break;
					case 6:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    4906:	fe 01       	movw	r30, r28
    4908:	ff 96       	adiw	r30, 0x3f	; 63
    490a:	01 90       	ld	r0, Z+
    490c:	f0 81       	ld	r31, Z
    490e:	e0 2d       	mov	r30, r0
    4910:	81 81       	ldd	r24, Z+1	; 0x01
    4912:	60 e0       	ldi	r22, 0x00	; 0
    4914:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    4918:	fe 01       	movw	r30, r28
    491a:	ff 96       	adiw	r30, 0x3f	; 63
    491c:	01 90       	ld	r0, Z+
    491e:	f0 81       	ld	r31, Z
    4920:	e0 2d       	mov	r30, r0
    4922:	82 81       	ldd	r24, Z+2	; 0x02
    4924:	61 e0       	ldi	r22, 0x01	; 1
    4926:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    492a:	fe 01       	movw	r30, r28
    492c:	ff 96       	adiw	r30, 0x3f	; 63
    492e:	01 90       	ld	r0, Z+
    4930:	f0 81       	ld	r31, Z
    4932:	e0 2d       	mov	r30, r0
    4934:	83 81       	ldd	r24, Z+3	; 0x03
    4936:	60 e0       	ldi	r22, 0x00	; 0
    4938:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    493c:	fe 01       	movw	r30, r28
    493e:	ff 96       	adiw	r30, 0x3f	; 63
    4940:	01 90       	ld	r0, Z+
    4942:	f0 81       	ld	r31, Z
    4944:	e0 2d       	mov	r30, r0
    4946:	84 81       	ldd	r24, Z+4	; 0x04
    4948:	60 e0       	ldi	r22, 0x00	; 0
    494a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    494e:	fe 01       	movw	r30, r28
    4950:	ff 96       	adiw	r30, 0x3f	; 63
    4952:	01 90       	ld	r0, Z+
    4954:	f0 81       	ld	r31, Z
    4956:	e0 2d       	mov	r30, r0
    4958:	85 81       	ldd	r24, Z+5	; 0x05
    495a:	60 e0       	ldi	r22, 0x00	; 0
    495c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    4960:	fe 01       	movw	r30, r28
    4962:	ff 96       	adiw	r30, 0x3f	; 63
    4964:	01 90       	ld	r0, Z+
    4966:	f0 81       	ld	r31, Z
    4968:	e0 2d       	mov	r30, r0
    496a:	86 81       	ldd	r24, Z+6	; 0x06
    496c:	60 e0       	ldi	r22, 0x00	; 0
    496e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    4972:	fe 01       	movw	r30, r28
    4974:	ff 96       	adiw	r30, 0x3f	; 63
    4976:	01 90       	ld	r0, Z+
    4978:	f0 81       	ld	r31, Z
    497a:	e0 2d       	mov	r30, r0
    497c:	87 81       	ldd	r24, Z+7	; 0x07
    497e:	60 e0       	ldi	r22, 0x00	; 0
    4980:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    4984:	bf c0       	rjmp	.+382    	; 0x4b04 <HMSSD_enDisplayIntegerNumber+0x1b4a>
						break;
					case 7:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    4986:	fe 01       	movw	r30, r28
    4988:	ff 96       	adiw	r30, 0x3f	; 63
    498a:	01 90       	ld	r0, Z+
    498c:	f0 81       	ld	r31, Z
    498e:	e0 2d       	mov	r30, r0
    4990:	81 81       	ldd	r24, Z+1	; 0x01
    4992:	60 e0       	ldi	r22, 0x00	; 0
    4994:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    4998:	fe 01       	movw	r30, r28
    499a:	ff 96       	adiw	r30, 0x3f	; 63
    499c:	01 90       	ld	r0, Z+
    499e:	f0 81       	ld	r31, Z
    49a0:	e0 2d       	mov	r30, r0
    49a2:	82 81       	ldd	r24, Z+2	; 0x02
    49a4:	60 e0       	ldi	r22, 0x00	; 0
    49a6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    49aa:	fe 01       	movw	r30, r28
    49ac:	ff 96       	adiw	r30, 0x3f	; 63
    49ae:	01 90       	ld	r0, Z+
    49b0:	f0 81       	ld	r31, Z
    49b2:	e0 2d       	mov	r30, r0
    49b4:	83 81       	ldd	r24, Z+3	; 0x03
    49b6:	60 e0       	ldi	r22, 0x00	; 0
    49b8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    49bc:	fe 01       	movw	r30, r28
    49be:	ff 96       	adiw	r30, 0x3f	; 63
    49c0:	01 90       	ld	r0, Z+
    49c2:	f0 81       	ld	r31, Z
    49c4:	e0 2d       	mov	r30, r0
    49c6:	84 81       	ldd	r24, Z+4	; 0x04
    49c8:	61 e0       	ldi	r22, 0x01	; 1
    49ca:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    49ce:	fe 01       	movw	r30, r28
    49d0:	ff 96       	adiw	r30, 0x3f	; 63
    49d2:	01 90       	ld	r0, Z+
    49d4:	f0 81       	ld	r31, Z
    49d6:	e0 2d       	mov	r30, r0
    49d8:	85 81       	ldd	r24, Z+5	; 0x05
    49da:	61 e0       	ldi	r22, 0x01	; 1
    49dc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    49e0:	fe 01       	movw	r30, r28
    49e2:	ff 96       	adiw	r30, 0x3f	; 63
    49e4:	01 90       	ld	r0, Z+
    49e6:	f0 81       	ld	r31, Z
    49e8:	e0 2d       	mov	r30, r0
    49ea:	86 81       	ldd	r24, Z+6	; 0x06
    49ec:	61 e0       	ldi	r22, 0x01	; 1
    49ee:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    49f2:	fe 01       	movw	r30, r28
    49f4:	ff 96       	adiw	r30, 0x3f	; 63
    49f6:	01 90       	ld	r0, Z+
    49f8:	f0 81       	ld	r31, Z
    49fa:	e0 2d       	mov	r30, r0
    49fc:	87 81       	ldd	r24, Z+7	; 0x07
    49fe:	61 e0       	ldi	r22, 0x01	; 1
    4a00:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    4a04:	7f c0       	rjmp	.+254    	; 0x4b04 <HMSSD_enDisplayIntegerNumber+0x1b4a>
						break;
					case 8:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    4a06:	fe 01       	movw	r30, r28
    4a08:	ff 96       	adiw	r30, 0x3f	; 63
    4a0a:	01 90       	ld	r0, Z+
    4a0c:	f0 81       	ld	r31, Z
    4a0e:	e0 2d       	mov	r30, r0
    4a10:	81 81       	ldd	r24, Z+1	; 0x01
    4a12:	60 e0       	ldi	r22, 0x00	; 0
    4a14:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    4a18:	fe 01       	movw	r30, r28
    4a1a:	ff 96       	adiw	r30, 0x3f	; 63
    4a1c:	01 90       	ld	r0, Z+
    4a1e:	f0 81       	ld	r31, Z
    4a20:	e0 2d       	mov	r30, r0
    4a22:	82 81       	ldd	r24, Z+2	; 0x02
    4a24:	60 e0       	ldi	r22, 0x00	; 0
    4a26:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    4a2a:	fe 01       	movw	r30, r28
    4a2c:	ff 96       	adiw	r30, 0x3f	; 63
    4a2e:	01 90       	ld	r0, Z+
    4a30:	f0 81       	ld	r31, Z
    4a32:	e0 2d       	mov	r30, r0
    4a34:	83 81       	ldd	r24, Z+3	; 0x03
    4a36:	60 e0       	ldi	r22, 0x00	; 0
    4a38:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    4a3c:	fe 01       	movw	r30, r28
    4a3e:	ff 96       	adiw	r30, 0x3f	; 63
    4a40:	01 90       	ld	r0, Z+
    4a42:	f0 81       	ld	r31, Z
    4a44:	e0 2d       	mov	r30, r0
    4a46:	84 81       	ldd	r24, Z+4	; 0x04
    4a48:	60 e0       	ldi	r22, 0x00	; 0
    4a4a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    4a4e:	fe 01       	movw	r30, r28
    4a50:	ff 96       	adiw	r30, 0x3f	; 63
    4a52:	01 90       	ld	r0, Z+
    4a54:	f0 81       	ld	r31, Z
    4a56:	e0 2d       	mov	r30, r0
    4a58:	85 81       	ldd	r24, Z+5	; 0x05
    4a5a:	60 e0       	ldi	r22, 0x00	; 0
    4a5c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    4a60:	fe 01       	movw	r30, r28
    4a62:	ff 96       	adiw	r30, 0x3f	; 63
    4a64:	01 90       	ld	r0, Z+
    4a66:	f0 81       	ld	r31, Z
    4a68:	e0 2d       	mov	r30, r0
    4a6a:	86 81       	ldd	r24, Z+6	; 0x06
    4a6c:	60 e0       	ldi	r22, 0x00	; 0
    4a6e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    4a72:	fe 01       	movw	r30, r28
    4a74:	ff 96       	adiw	r30, 0x3f	; 63
    4a76:	01 90       	ld	r0, Z+
    4a78:	f0 81       	ld	r31, Z
    4a7a:	e0 2d       	mov	r30, r0
    4a7c:	87 81       	ldd	r24, Z+7	; 0x07
    4a7e:	60 e0       	ldi	r22, 0x00	; 0
    4a80:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    4a84:	3f c0       	rjmp	.+126    	; 0x4b04 <HMSSD_enDisplayIntegerNumber+0x1b4a>
						break;
					case 9:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    4a86:	fe 01       	movw	r30, r28
    4a88:	ff 96       	adiw	r30, 0x3f	; 63
    4a8a:	01 90       	ld	r0, Z+
    4a8c:	f0 81       	ld	r31, Z
    4a8e:	e0 2d       	mov	r30, r0
    4a90:	81 81       	ldd	r24, Z+1	; 0x01
    4a92:	60 e0       	ldi	r22, 0x00	; 0
    4a94:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    4a98:	fe 01       	movw	r30, r28
    4a9a:	ff 96       	adiw	r30, 0x3f	; 63
    4a9c:	01 90       	ld	r0, Z+
    4a9e:	f0 81       	ld	r31, Z
    4aa0:	e0 2d       	mov	r30, r0
    4aa2:	82 81       	ldd	r24, Z+2	; 0x02
    4aa4:	60 e0       	ldi	r22, 0x00	; 0
    4aa6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    4aaa:	fe 01       	movw	r30, r28
    4aac:	ff 96       	adiw	r30, 0x3f	; 63
    4aae:	01 90       	ld	r0, Z+
    4ab0:	f0 81       	ld	r31, Z
    4ab2:	e0 2d       	mov	r30, r0
    4ab4:	83 81       	ldd	r24, Z+3	; 0x03
    4ab6:	60 e0       	ldi	r22, 0x00	; 0
    4ab8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    4abc:	fe 01       	movw	r30, r28
    4abe:	ff 96       	adiw	r30, 0x3f	; 63
    4ac0:	01 90       	ld	r0, Z+
    4ac2:	f0 81       	ld	r31, Z
    4ac4:	e0 2d       	mov	r30, r0
    4ac6:	84 81       	ldd	r24, Z+4	; 0x04
    4ac8:	60 e0       	ldi	r22, 0x00	; 0
    4aca:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    4ace:	fe 01       	movw	r30, r28
    4ad0:	ff 96       	adiw	r30, 0x3f	; 63
    4ad2:	01 90       	ld	r0, Z+
    4ad4:	f0 81       	ld	r31, Z
    4ad6:	e0 2d       	mov	r30, r0
    4ad8:	85 81       	ldd	r24, Z+5	; 0x05
    4ada:	61 e0       	ldi	r22, 0x01	; 1
    4adc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    4ae0:	fe 01       	movw	r30, r28
    4ae2:	ff 96       	adiw	r30, 0x3f	; 63
    4ae4:	01 90       	ld	r0, Z+
    4ae6:	f0 81       	ld	r31, Z
    4ae8:	e0 2d       	mov	r30, r0
    4aea:	86 81       	ldd	r24, Z+6	; 0x06
    4aec:	60 e0       	ldi	r22, 0x00	; 0
    4aee:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    4af2:	fe 01       	movw	r30, r28
    4af4:	ff 96       	adiw	r30, 0x3f	; 63
    4af6:	01 90       	ld	r0, Z+
    4af8:	f0 81       	ld	r31, Z
    4afa:	e0 2d       	mov	r30, r0
    4afc:	87 81       	ldd	r24, Z+7	; 0x07
    4afe:	60 e0       	ldi	r22, 0x00	; 0
    4b00:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    4b04:	80 e0       	ldi	r24, 0x00	; 0
    4b06:	90 e0       	ldi	r25, 0x00	; 0
    4b08:	a0 e2       	ldi	r26, 0x20	; 32
    4b0a:	b1 e4       	ldi	r27, 0x41	; 65
    4b0c:	8b 87       	std	Y+11, r24	; 0x0b
    4b0e:	9c 87       	std	Y+12, r25	; 0x0c
    4b10:	ad 87       	std	Y+13, r26	; 0x0d
    4b12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b14:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b16:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b18:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b1c:	20 e0       	ldi	r18, 0x00	; 0
    4b1e:	30 e0       	ldi	r19, 0x00	; 0
    4b20:	4a e7       	ldi	r20, 0x7A	; 122
    4b22:	55 e4       	ldi	r21, 0x45	; 69
    4b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b28:	dc 01       	movw	r26, r24
    4b2a:	cb 01       	movw	r24, r22
    4b2c:	8f 83       	std	Y+7, r24	; 0x07
    4b2e:	98 87       	std	Y+8, r25	; 0x08
    4b30:	a9 87       	std	Y+9, r26	; 0x09
    4b32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b34:	6f 81       	ldd	r22, Y+7	; 0x07
    4b36:	78 85       	ldd	r23, Y+8	; 0x08
    4b38:	89 85       	ldd	r24, Y+9	; 0x09
    4b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b3c:	20 e0       	ldi	r18, 0x00	; 0
    4b3e:	30 e0       	ldi	r19, 0x00	; 0
    4b40:	40 e8       	ldi	r20, 0x80	; 128
    4b42:	5f e3       	ldi	r21, 0x3F	; 63
    4b44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b48:	88 23       	and	r24, r24
    4b4a:	2c f4       	brge	.+10     	; 0x4b56 <HMSSD_enDisplayIntegerNumber+0x1b9c>
		__ticks = 1;
    4b4c:	81 e0       	ldi	r24, 0x01	; 1
    4b4e:	90 e0       	ldi	r25, 0x00	; 0
    4b50:	9e 83       	std	Y+6, r25	; 0x06
    4b52:	8d 83       	std	Y+5, r24	; 0x05
    4b54:	3f c0       	rjmp	.+126    	; 0x4bd4 <HMSSD_enDisplayIntegerNumber+0x1c1a>
	else if (__tmp > 65535)
    4b56:	6f 81       	ldd	r22, Y+7	; 0x07
    4b58:	78 85       	ldd	r23, Y+8	; 0x08
    4b5a:	89 85       	ldd	r24, Y+9	; 0x09
    4b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b5e:	20 e0       	ldi	r18, 0x00	; 0
    4b60:	3f ef       	ldi	r19, 0xFF	; 255
    4b62:	4f e7       	ldi	r20, 0x7F	; 127
    4b64:	57 e4       	ldi	r21, 0x47	; 71
    4b66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b6a:	18 16       	cp	r1, r24
    4b6c:	4c f5       	brge	.+82     	; 0x4bc0 <HMSSD_enDisplayIntegerNumber+0x1c06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b70:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b72:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b74:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b76:	20 e0       	ldi	r18, 0x00	; 0
    4b78:	30 e0       	ldi	r19, 0x00	; 0
    4b7a:	40 e2       	ldi	r20, 0x20	; 32
    4b7c:	51 e4       	ldi	r21, 0x41	; 65
    4b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b82:	dc 01       	movw	r26, r24
    4b84:	cb 01       	movw	r24, r22
    4b86:	bc 01       	movw	r22, r24
    4b88:	cd 01       	movw	r24, r26
    4b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b8e:	dc 01       	movw	r26, r24
    4b90:	cb 01       	movw	r24, r22
    4b92:	9e 83       	std	Y+6, r25	; 0x06
    4b94:	8d 83       	std	Y+5, r24	; 0x05
    4b96:	0f c0       	rjmp	.+30     	; 0x4bb6 <HMSSD_enDisplayIntegerNumber+0x1bfc>
    4b98:	80 e9       	ldi	r24, 0x90	; 144
    4b9a:	91 e0       	ldi	r25, 0x01	; 1
    4b9c:	9c 83       	std	Y+4, r25	; 0x04
    4b9e:	8b 83       	std	Y+3, r24	; 0x03
    4ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    4ba4:	01 97       	sbiw	r24, 0x01	; 1
    4ba6:	f1 f7       	brne	.-4      	; 0x4ba4 <HMSSD_enDisplayIntegerNumber+0x1bea>
    4ba8:	9c 83       	std	Y+4, r25	; 0x04
    4baa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bac:	8d 81       	ldd	r24, Y+5	; 0x05
    4bae:	9e 81       	ldd	r25, Y+6	; 0x06
    4bb0:	01 97       	sbiw	r24, 0x01	; 1
    4bb2:	9e 83       	std	Y+6, r25	; 0x06
    4bb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    4bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    4bba:	00 97       	sbiw	r24, 0x00	; 0
    4bbc:	69 f7       	brne	.-38     	; 0x4b98 <HMSSD_enDisplayIntegerNumber+0x1bde>
    4bbe:	14 c0       	rjmp	.+40     	; 0x4be8 <HMSSD_enDisplayIntegerNumber+0x1c2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bc0:	6f 81       	ldd	r22, Y+7	; 0x07
    4bc2:	78 85       	ldd	r23, Y+8	; 0x08
    4bc4:	89 85       	ldd	r24, Y+9	; 0x09
    4bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bcc:	dc 01       	movw	r26, r24
    4bce:	cb 01       	movw	r24, r22
    4bd0:	9e 83       	std	Y+6, r25	; 0x06
    4bd2:	8d 83       	std	Y+5, r24	; 0x05
    4bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    4bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    4bd8:	9a 83       	std	Y+2, r25	; 0x02
    4bda:	89 83       	std	Y+1, r24	; 0x01
    4bdc:	89 81       	ldd	r24, Y+1	; 0x01
    4bde:	9a 81       	ldd	r25, Y+2	; 0x02
    4be0:	01 97       	sbiw	r24, 0x01	; 1
    4be2:	f1 f7       	brne	.-4      	; 0x4be0 <HMSSD_enDisplayIntegerNumber+0x1c26>
    4be4:	9a 83       	std	Y+2, r25	; 0x02
    4be6:	89 83       	std	Y+1, r24	; 0x01
						break;
					} // switch on Units --> CA

					_delay_ms(10);
					// Disable SSD2
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN2, LOW);
    4be8:	fe 01       	movw	r30, r28
    4bea:	ff 96       	adiw	r30, 0x3f	; 63
    4bec:	01 90       	ld	r0, Z+
    4bee:	f0 81       	ld	r31, Z
    4bf0:	e0 2d       	mov	r30, r0
    4bf2:	82 85       	ldd	r24, Z+10	; 0x0a
    4bf4:	60 e0       	ldi	r22, 0x00	; 0
    4bf6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN2, HIGH);

				} // for
			} // Type = CC
			else if (PtrMSSD->MSSD_Type == C_ANODE) {
				for (i = 0; i < PtrMSSD->MSSD_Duration; i++) {
    4bfa:	89 ad       	ldd	r24, Y+57	; 0x39
    4bfc:	9a ad       	ldd	r25, Y+58	; 0x3a
    4bfe:	01 96       	adiw	r24, 0x01	; 1
    4c00:	9a af       	std	Y+58, r25	; 0x3a
    4c02:	89 af       	std	Y+57, r24	; 0x39
    4c04:	fe 01       	movw	r30, r28
    4c06:	ff 96       	adiw	r30, 0x3f	; 63
    4c08:	01 90       	ld	r0, Z+
    4c0a:	f0 81       	ld	r31, Z
    4c0c:	e0 2d       	mov	r30, r0
    4c0e:	23 85       	ldd	r18, Z+11	; 0x0b
    4c10:	34 85       	ldd	r19, Z+12	; 0x0c
    4c12:	89 ad       	ldd	r24, Y+57	; 0x39
    4c14:	9a ad       	ldd	r25, Y+58	; 0x3a
    4c16:	82 17       	cp	r24, r18
    4c18:	93 07       	cpc	r25, r19
    4c1a:	08 f4       	brcc	.+2      	; 0x4c1e <HMSSD_enDisplayIntegerNumber+0x1c64>
    4c1c:	0a c9       	rjmp	.-3564   	; 0x3e32 <HMSSD_enDisplayIntegerNumber+0xe78>
    4c1e:	05 c0       	rjmp	.+10     	; 0x4c2a <HMSSD_enDisplayIntegerNumber+0x1c70>
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN2, LOW);

				} // for
			} // Type CA
			else {
				Local_enState = OUT_OF_RANGE;
    4c20:	81 e0       	ldi	r24, 0x01	; 1
    4c22:	8d af       	std	Y+61, r24	; 0x3d
    4c24:	02 c0       	rjmp	.+4      	; 0x4c2a <HMSSD_enDisplayIntegerNumber+0x1c70>
			}
		} // if --> PtrSSD != NULL
		else {
			Local_enState = NULL_POINTER;
    4c26:	82 e0       	ldi	r24, 0x02	; 2
    4c28:	8d af       	std	Y+61, r24	; 0x3d
		} // else --> PtrSSD == NULL
	} // else --> Valid Number
	return Local_enState;
    4c2a:	8d ad       	ldd	r24, Y+61	; 0x3d
}
    4c2c:	c8 5b       	subi	r28, 0xB8	; 184
    4c2e:	df 4f       	sbci	r29, 0xFF	; 255
    4c30:	0f b6       	in	r0, 0x3f	; 63
    4c32:	f8 94       	cli
    4c34:	de bf       	out	0x3e, r29	; 62
    4c36:	0f be       	out	0x3f, r0	; 63
    4c38:	cd bf       	out	0x3d, r28	; 61
    4c3a:	cf 91       	pop	r28
    4c3c:	df 91       	pop	r29
    4c3e:	08 95       	ret

00004c40 <HMSSD_enDisplayRealNumber>:

ErrorState_t HMSSD_enDisplayRealNumber(f32 copy_u8Number, MSSD_t *PtrMSSD) {
    4c40:	df 93       	push	r29
    4c42:	cf 93       	push	r28
    4c44:	cd b7       	in	r28, 0x3d	; 61
    4c46:	de b7       	in	r29, 0x3e	; 62
    4c48:	cb 54       	subi	r28, 0x4B	; 75
    4c4a:	d0 40       	sbci	r29, 0x00	; 0
    4c4c:	0f b6       	in	r0, 0x3f	; 63
    4c4e:	f8 94       	cli
    4c50:	de bf       	out	0x3e, r29	; 62
    4c52:	0f be       	out	0x3f, r0	; 63
    4c54:	cd bf       	out	0x3d, r28	; 61
    4c56:	fe 01       	movw	r30, r28
    4c58:	fe 96       	adiw	r30, 0x3e	; 62
    4c5a:	60 83       	st	Z, r22
    4c5c:	71 83       	std	Z+1, r23	; 0x01
    4c5e:	82 83       	std	Z+2, r24	; 0x02
    4c60:	93 83       	std	Z+3, r25	; 0x03
    4c62:	fe 01       	movw	r30, r28
    4c64:	ee 5b       	subi	r30, 0xBE	; 190
    4c66:	ff 4f       	sbci	r31, 0xFF	; 255
    4c68:	51 83       	std	Z+1, r21	; 0x01
    4c6a:	40 83       	st	Z, r20
	ErrorState_t Local_enState = SUCCESS;
    4c6c:	1d ae       	std	Y+61, r1	; 0x3d
	if (copy_u8Number < 0 || copy_u8Number > 99) {
    4c6e:	fe 01       	movw	r30, r28
    4c70:	fe 96       	adiw	r30, 0x3e	; 62
    4c72:	60 81       	ld	r22, Z
    4c74:	71 81       	ldd	r23, Z+1	; 0x01
    4c76:	82 81       	ldd	r24, Z+2	; 0x02
    4c78:	93 81       	ldd	r25, Z+3	; 0x03
    4c7a:	20 e0       	ldi	r18, 0x00	; 0
    4c7c:	30 e0       	ldi	r19, 0x00	; 0
    4c7e:	40 e0       	ldi	r20, 0x00	; 0
    4c80:	50 e0       	ldi	r21, 0x00	; 0
    4c82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c86:	88 23       	and	r24, r24
    4c88:	74 f0       	brlt	.+28     	; 0x4ca6 <HMSSD_enDisplayRealNumber+0x66>
    4c8a:	fe 01       	movw	r30, r28
    4c8c:	fe 96       	adiw	r30, 0x3e	; 62
    4c8e:	60 81       	ld	r22, Z
    4c90:	71 81       	ldd	r23, Z+1	; 0x01
    4c92:	82 81       	ldd	r24, Z+2	; 0x02
    4c94:	93 81       	ldd	r25, Z+3	; 0x03
    4c96:	20 e0       	ldi	r18, 0x00	; 0
    4c98:	30 e0       	ldi	r19, 0x00	; 0
    4c9a:	46 ec       	ldi	r20, 0xC6	; 198
    4c9c:	52 e4       	ldi	r21, 0x42	; 66
    4c9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ca2:	18 16       	cp	r1, r24
    4ca4:	24 f4       	brge	.+8      	; 0x4cae <HMSSD_enDisplayRealNumber+0x6e>
		Local_enState = OUT_OF_RANGE;
    4ca6:	81 e0       	ldi	r24, 0x01	; 1
    4ca8:	8d af       	std	Y+61, r24	; 0x3d
    4caa:	0c 94 f1 35 	jmp	0x6be2	; 0x6be2 <HMSSD_enDisplayRealNumber+0x1fa2>
	} else {
		if (PtrMSSD != NULL) {
    4cae:	fe 01       	movw	r30, r28
    4cb0:	ee 5b       	subi	r30, 0xBE	; 190
    4cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb4:	80 81       	ld	r24, Z
    4cb6:	91 81       	ldd	r25, Z+1	; 0x01
    4cb8:	00 97       	sbiw	r24, 0x00	; 0
    4cba:	11 f4       	brne	.+4      	; 0x4cc0 <HMSSD_enDisplayRealNumber+0x80>
    4cbc:	0c 94 ef 35 	jmp	0x6bde	; 0x6bde <HMSSD_enDisplayRealNumber+0x1f9e>
			u8 Local_u8Tens = (copy_u8Number * 10) / 10;
    4cc0:	fe 01       	movw	r30, r28
    4cc2:	fe 96       	adiw	r30, 0x3e	; 62
    4cc4:	60 81       	ld	r22, Z
    4cc6:	71 81       	ldd	r23, Z+1	; 0x01
    4cc8:	82 81       	ldd	r24, Z+2	; 0x02
    4cca:	93 81       	ldd	r25, Z+3	; 0x03
    4ccc:	20 e0       	ldi	r18, 0x00	; 0
    4cce:	30 e0       	ldi	r19, 0x00	; 0
    4cd0:	40 e2       	ldi	r20, 0x20	; 32
    4cd2:	51 e4       	ldi	r21, 0x41	; 65
    4cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cd8:	dc 01       	movw	r26, r24
    4cda:	cb 01       	movw	r24, r22
    4cdc:	bc 01       	movw	r22, r24
    4cde:	cd 01       	movw	r24, r26
    4ce0:	20 e0       	ldi	r18, 0x00	; 0
    4ce2:	30 e0       	ldi	r19, 0x00	; 0
    4ce4:	40 e2       	ldi	r20, 0x20	; 32
    4ce6:	51 e4       	ldi	r21, 0x41	; 65
    4ce8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4cec:	dc 01       	movw	r26, r24
    4cee:	cb 01       	movw	r24, r22
    4cf0:	bc 01       	movw	r22, r24
    4cf2:	cd 01       	movw	r24, r26
    4cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cf8:	dc 01       	movw	r26, r24
    4cfa:	cb 01       	movw	r24, r22
    4cfc:	8c af       	std	Y+60, r24	; 0x3c
			u8 Local_u8Units = ((u8) (copy_u8Number * 10)) % 10;
    4cfe:	fe 01       	movw	r30, r28
    4d00:	fe 96       	adiw	r30, 0x3e	; 62
    4d02:	60 81       	ld	r22, Z
    4d04:	71 81       	ldd	r23, Z+1	; 0x01
    4d06:	82 81       	ldd	r24, Z+2	; 0x02
    4d08:	93 81       	ldd	r25, Z+3	; 0x03
    4d0a:	20 e0       	ldi	r18, 0x00	; 0
    4d0c:	30 e0       	ldi	r19, 0x00	; 0
    4d0e:	40 e2       	ldi	r20, 0x20	; 32
    4d10:	51 e4       	ldi	r21, 0x41	; 65
    4d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d16:	dc 01       	movw	r26, r24
    4d18:	cb 01       	movw	r24, r22
    4d1a:	bc 01       	movw	r22, r24
    4d1c:	cd 01       	movw	r24, r26
    4d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d22:	dc 01       	movw	r26, r24
    4d24:	cb 01       	movw	r24, r22
    4d26:	9a e0       	ldi	r25, 0x0A	; 10
    4d28:	69 2f       	mov	r22, r25
    4d2a:	0e 94 00 41 	call	0x8200	; 0x8200 <__udivmodqi4>
    4d2e:	89 2f       	mov	r24, r25
    4d30:	8b af       	std	Y+59, r24	; 0x3b
			u16 i;
			if (PtrMSSD->MSSD_Type == C_CATHODE) {
    4d32:	fe 01       	movw	r30, r28
    4d34:	ee 5b       	subi	r30, 0xBE	; 190
    4d36:	ff 4f       	sbci	r31, 0xFF	; 255
    4d38:	01 90       	ld	r0, Z+
    4d3a:	f0 81       	ld	r31, Z
    4d3c:	e0 2d       	mov	r30, r0
    4d3e:	80 81       	ld	r24, Z
    4d40:	88 23       	and	r24, r24
    4d42:	09 f0       	breq	.+2      	; 0x4d46 <HMSSD_enDisplayRealNumber+0x106>
    4d44:	a0 c7       	rjmp	.+3904   	; 0x5c86 <HMSSD_enDisplayRealNumber+0x1046>
				for (i = 0; i < PtrMSSD->MSSD_Duration; i++) {
    4d46:	1a ae       	std	Y+58, r1	; 0x3a
    4d48:	19 ae       	std	Y+57, r1	; 0x39
    4d4a:	8d c7       	rjmp	.+3866   	; 0x5c66 <HMSSD_enDisplayRealNumber+0x1026>
					// Enable SSD1
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN1, LOW);
    4d4c:	fe 01       	movw	r30, r28
    4d4e:	ee 5b       	subi	r30, 0xBE	; 190
    4d50:	ff 4f       	sbci	r31, 0xFF	; 255
    4d52:	01 90       	ld	r0, Z+
    4d54:	f0 81       	ld	r31, Z
    4d56:	e0 2d       	mov	r30, r0
    4d58:	81 85       	ldd	r24, Z+9	; 0x09
    4d5a:	60 e0       	ldi	r22, 0x00	; 0
    4d5c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					// Enable DP
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_DP, HIGH);
    4d60:	fe 01       	movw	r30, r28
    4d62:	ee 5b       	subi	r30, 0xBE	; 190
    4d64:	ff 4f       	sbci	r31, 0xFF	; 255
    4d66:	01 90       	ld	r0, Z+
    4d68:	f0 81       	ld	r31, Z
    4d6a:	e0 2d       	mov	r30, r0
    4d6c:	80 85       	ldd	r24, Z+8	; 0x08
    4d6e:	61 e0       	ldi	r22, 0x01	; 1
    4d70:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					switch (Local_u8Tens) {
    4d74:	8c ad       	ldd	r24, Y+60	; 0x3c
    4d76:	28 2f       	mov	r18, r24
    4d78:	30 e0       	ldi	r19, 0x00	; 0
    4d7a:	2c 96       	adiw	r28, 0x0c	; 12
    4d7c:	3f af       	std	Y+63, r19	; 0x3f
    4d7e:	2e af       	std	Y+62, r18	; 0x3e
    4d80:	2c 97       	sbiw	r28, 0x0c	; 12
    4d82:	2c 96       	adiw	r28, 0x0c	; 12
    4d84:	8e ad       	ldd	r24, Y+62	; 0x3e
    4d86:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d88:	2c 97       	sbiw	r28, 0x0c	; 12
    4d8a:	84 30       	cpi	r24, 0x04	; 4
    4d8c:	91 05       	cpc	r25, r1
    4d8e:	09 f4       	brne	.+2      	; 0x4d92 <HMSSD_enDisplayRealNumber+0x152>
    4d90:	7c c1       	rjmp	.+760    	; 0x508a <HMSSD_enDisplayRealNumber+0x44a>
    4d92:	2c 96       	adiw	r28, 0x0c	; 12
    4d94:	2e ad       	ldd	r18, Y+62	; 0x3e
    4d96:	3f ad       	ldd	r19, Y+63	; 0x3f
    4d98:	2c 97       	sbiw	r28, 0x0c	; 12
    4d9a:	25 30       	cpi	r18, 0x05	; 5
    4d9c:	31 05       	cpc	r19, r1
    4d9e:	44 f5       	brge	.+80     	; 0x4df0 <HMSSD_enDisplayRealNumber+0x1b0>
    4da0:	2c 96       	adiw	r28, 0x0c	; 12
    4da2:	8e ad       	ldd	r24, Y+62	; 0x3e
    4da4:	9f ad       	ldd	r25, Y+63	; 0x3f
    4da6:	2c 97       	sbiw	r28, 0x0c	; 12
    4da8:	81 30       	cpi	r24, 0x01	; 1
    4daa:	91 05       	cpc	r25, r1
    4dac:	09 f4       	brne	.+2      	; 0x4db0 <HMSSD_enDisplayRealNumber+0x170>
    4dae:	98 c0       	rjmp	.+304    	; 0x4ee0 <HMSSD_enDisplayRealNumber+0x2a0>
    4db0:	2c 96       	adiw	r28, 0x0c	; 12
    4db2:	2e ad       	ldd	r18, Y+62	; 0x3e
    4db4:	3f ad       	ldd	r19, Y+63	; 0x3f
    4db6:	2c 97       	sbiw	r28, 0x0c	; 12
    4db8:	22 30       	cpi	r18, 0x02	; 2
    4dba:	31 05       	cpc	r19, r1
    4dbc:	44 f4       	brge	.+16     	; 0x4dce <HMSSD_enDisplayRealNumber+0x18e>
    4dbe:	2c 96       	adiw	r28, 0x0c	; 12
    4dc0:	8e ad       	ldd	r24, Y+62	; 0x3e
    4dc2:	9f ad       	ldd	r25, Y+63	; 0x3f
    4dc4:	2c 97       	sbiw	r28, 0x0c	; 12
    4dc6:	00 97       	sbiw	r24, 0x00	; 0
    4dc8:	09 f4       	brne	.+2      	; 0x4dcc <HMSSD_enDisplayRealNumber+0x18c>
    4dca:	43 c0       	rjmp	.+134    	; 0x4e52 <HMSSD_enDisplayRealNumber+0x212>
    4dcc:	07 c3       	rjmp	.+1550   	; 0x53dc <HMSSD_enDisplayRealNumber+0x79c>
    4dce:	2c 96       	adiw	r28, 0x0c	; 12
    4dd0:	2e ad       	ldd	r18, Y+62	; 0x3e
    4dd2:	3f ad       	ldd	r19, Y+63	; 0x3f
    4dd4:	2c 97       	sbiw	r28, 0x0c	; 12
    4dd6:	22 30       	cpi	r18, 0x02	; 2
    4dd8:	31 05       	cpc	r19, r1
    4dda:	09 f4       	brne	.+2      	; 0x4dde <HMSSD_enDisplayRealNumber+0x19e>
    4ddc:	c8 c0       	rjmp	.+400    	; 0x4f6e <HMSSD_enDisplayRealNumber+0x32e>
    4dde:	2c 96       	adiw	r28, 0x0c	; 12
    4de0:	8e ad       	ldd	r24, Y+62	; 0x3e
    4de2:	9f ad       	ldd	r25, Y+63	; 0x3f
    4de4:	2c 97       	sbiw	r28, 0x0c	; 12
    4de6:	83 30       	cpi	r24, 0x03	; 3
    4de8:	91 05       	cpc	r25, r1
    4dea:	09 f4       	brne	.+2      	; 0x4dee <HMSSD_enDisplayRealNumber+0x1ae>
    4dec:	07 c1       	rjmp	.+526    	; 0x4ffc <HMSSD_enDisplayRealNumber+0x3bc>
    4dee:	f6 c2       	rjmp	.+1516   	; 0x53dc <HMSSD_enDisplayRealNumber+0x79c>
    4df0:	2c 96       	adiw	r28, 0x0c	; 12
    4df2:	2e ad       	ldd	r18, Y+62	; 0x3e
    4df4:	3f ad       	ldd	r19, Y+63	; 0x3f
    4df6:	2c 97       	sbiw	r28, 0x0c	; 12
    4df8:	27 30       	cpi	r18, 0x07	; 7
    4dfa:	31 05       	cpc	r19, r1
    4dfc:	09 f4       	brne	.+2      	; 0x4e00 <HMSSD_enDisplayRealNumber+0x1c0>
    4dfe:	1a c2       	rjmp	.+1076   	; 0x5234 <HMSSD_enDisplayRealNumber+0x5f4>
    4e00:	2c 96       	adiw	r28, 0x0c	; 12
    4e02:	8e ad       	ldd	r24, Y+62	; 0x3e
    4e04:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e06:	2c 97       	sbiw	r28, 0x0c	; 12
    4e08:	88 30       	cpi	r24, 0x08	; 8
    4e0a:	91 05       	cpc	r25, r1
    4e0c:	8c f4       	brge	.+34     	; 0x4e30 <HMSSD_enDisplayRealNumber+0x1f0>
    4e0e:	2c 96       	adiw	r28, 0x0c	; 12
    4e10:	2e ad       	ldd	r18, Y+62	; 0x3e
    4e12:	3f ad       	ldd	r19, Y+63	; 0x3f
    4e14:	2c 97       	sbiw	r28, 0x0c	; 12
    4e16:	25 30       	cpi	r18, 0x05	; 5
    4e18:	31 05       	cpc	r19, r1
    4e1a:	09 f4       	brne	.+2      	; 0x4e1e <HMSSD_enDisplayRealNumber+0x1de>
    4e1c:	7d c1       	rjmp	.+762    	; 0x5118 <HMSSD_enDisplayRealNumber+0x4d8>
    4e1e:	2c 96       	adiw	r28, 0x0c	; 12
    4e20:	8e ad       	ldd	r24, Y+62	; 0x3e
    4e22:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e24:	2c 97       	sbiw	r28, 0x0c	; 12
    4e26:	86 30       	cpi	r24, 0x06	; 6
    4e28:	91 05       	cpc	r25, r1
    4e2a:	09 f4       	brne	.+2      	; 0x4e2e <HMSSD_enDisplayRealNumber+0x1ee>
    4e2c:	bc c1       	rjmp	.+888    	; 0x51a6 <HMSSD_enDisplayRealNumber+0x566>
    4e2e:	d6 c2       	rjmp	.+1452   	; 0x53dc <HMSSD_enDisplayRealNumber+0x79c>
    4e30:	2c 96       	adiw	r28, 0x0c	; 12
    4e32:	2e ad       	ldd	r18, Y+62	; 0x3e
    4e34:	3f ad       	ldd	r19, Y+63	; 0x3f
    4e36:	2c 97       	sbiw	r28, 0x0c	; 12
    4e38:	28 30       	cpi	r18, 0x08	; 8
    4e3a:	31 05       	cpc	r19, r1
    4e3c:	09 f4       	brne	.+2      	; 0x4e40 <HMSSD_enDisplayRealNumber+0x200>
    4e3e:	41 c2       	rjmp	.+1154   	; 0x52c2 <HMSSD_enDisplayRealNumber+0x682>
    4e40:	2c 96       	adiw	r28, 0x0c	; 12
    4e42:	8e ad       	ldd	r24, Y+62	; 0x3e
    4e44:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e46:	2c 97       	sbiw	r28, 0x0c	; 12
    4e48:	89 30       	cpi	r24, 0x09	; 9
    4e4a:	91 05       	cpc	r25, r1
    4e4c:	09 f4       	brne	.+2      	; 0x4e50 <HMSSD_enDisplayRealNumber+0x210>
    4e4e:	80 c2       	rjmp	.+1280   	; 0x5350 <HMSSD_enDisplayRealNumber+0x710>
    4e50:	c5 c2       	rjmp	.+1418   	; 0x53dc <HMSSD_enDisplayRealNumber+0x79c>
					case 0:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    4e52:	fe 01       	movw	r30, r28
    4e54:	ee 5b       	subi	r30, 0xBE	; 190
    4e56:	ff 4f       	sbci	r31, 0xFF	; 255
    4e58:	01 90       	ld	r0, Z+
    4e5a:	f0 81       	ld	r31, Z
    4e5c:	e0 2d       	mov	r30, r0
    4e5e:	81 81       	ldd	r24, Z+1	; 0x01
    4e60:	61 e0       	ldi	r22, 0x01	; 1
    4e62:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    4e66:	fe 01       	movw	r30, r28
    4e68:	ee 5b       	subi	r30, 0xBE	; 190
    4e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e6c:	01 90       	ld	r0, Z+
    4e6e:	f0 81       	ld	r31, Z
    4e70:	e0 2d       	mov	r30, r0
    4e72:	82 81       	ldd	r24, Z+2	; 0x02
    4e74:	61 e0       	ldi	r22, 0x01	; 1
    4e76:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    4e7a:	fe 01       	movw	r30, r28
    4e7c:	ee 5b       	subi	r30, 0xBE	; 190
    4e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e80:	01 90       	ld	r0, Z+
    4e82:	f0 81       	ld	r31, Z
    4e84:	e0 2d       	mov	r30, r0
    4e86:	83 81       	ldd	r24, Z+3	; 0x03
    4e88:	61 e0       	ldi	r22, 0x01	; 1
    4e8a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    4e8e:	fe 01       	movw	r30, r28
    4e90:	ee 5b       	subi	r30, 0xBE	; 190
    4e92:	ff 4f       	sbci	r31, 0xFF	; 255
    4e94:	01 90       	ld	r0, Z+
    4e96:	f0 81       	ld	r31, Z
    4e98:	e0 2d       	mov	r30, r0
    4e9a:	84 81       	ldd	r24, Z+4	; 0x04
    4e9c:	61 e0       	ldi	r22, 0x01	; 1
    4e9e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    4ea2:	fe 01       	movw	r30, r28
    4ea4:	ee 5b       	subi	r30, 0xBE	; 190
    4ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea8:	01 90       	ld	r0, Z+
    4eaa:	f0 81       	ld	r31, Z
    4eac:	e0 2d       	mov	r30, r0
    4eae:	85 81       	ldd	r24, Z+5	; 0x05
    4eb0:	61 e0       	ldi	r22, 0x01	; 1
    4eb2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    4eb6:	fe 01       	movw	r30, r28
    4eb8:	ee 5b       	subi	r30, 0xBE	; 190
    4eba:	ff 4f       	sbci	r31, 0xFF	; 255
    4ebc:	01 90       	ld	r0, Z+
    4ebe:	f0 81       	ld	r31, Z
    4ec0:	e0 2d       	mov	r30, r0
    4ec2:	86 81       	ldd	r24, Z+6	; 0x06
    4ec4:	61 e0       	ldi	r22, 0x01	; 1
    4ec6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    4eca:	fe 01       	movw	r30, r28
    4ecc:	ee 5b       	subi	r30, 0xBE	; 190
    4ece:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed0:	01 90       	ld	r0, Z+
    4ed2:	f0 81       	ld	r31, Z
    4ed4:	e0 2d       	mov	r30, r0
    4ed6:	87 81       	ldd	r24, Z+7	; 0x07
    4ed8:	60 e0       	ldi	r22, 0x00	; 0
    4eda:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    4ede:	7e c2       	rjmp	.+1276   	; 0x53dc <HMSSD_enDisplayRealNumber+0x79c>
						break;
					case 1:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    4ee0:	fe 01       	movw	r30, r28
    4ee2:	ee 5b       	subi	r30, 0xBE	; 190
    4ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee6:	01 90       	ld	r0, Z+
    4ee8:	f0 81       	ld	r31, Z
    4eea:	e0 2d       	mov	r30, r0
    4eec:	81 81       	ldd	r24, Z+1	; 0x01
    4eee:	60 e0       	ldi	r22, 0x00	; 0
    4ef0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    4ef4:	fe 01       	movw	r30, r28
    4ef6:	ee 5b       	subi	r30, 0xBE	; 190
    4ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    4efa:	01 90       	ld	r0, Z+
    4efc:	f0 81       	ld	r31, Z
    4efe:	e0 2d       	mov	r30, r0
    4f00:	82 81       	ldd	r24, Z+2	; 0x02
    4f02:	61 e0       	ldi	r22, 0x01	; 1
    4f04:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    4f08:	fe 01       	movw	r30, r28
    4f0a:	ee 5b       	subi	r30, 0xBE	; 190
    4f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f0e:	01 90       	ld	r0, Z+
    4f10:	f0 81       	ld	r31, Z
    4f12:	e0 2d       	mov	r30, r0
    4f14:	83 81       	ldd	r24, Z+3	; 0x03
    4f16:	61 e0       	ldi	r22, 0x01	; 1
    4f18:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    4f1c:	fe 01       	movw	r30, r28
    4f1e:	ee 5b       	subi	r30, 0xBE	; 190
    4f20:	ff 4f       	sbci	r31, 0xFF	; 255
    4f22:	01 90       	ld	r0, Z+
    4f24:	f0 81       	ld	r31, Z
    4f26:	e0 2d       	mov	r30, r0
    4f28:	84 81       	ldd	r24, Z+4	; 0x04
    4f2a:	60 e0       	ldi	r22, 0x00	; 0
    4f2c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    4f30:	fe 01       	movw	r30, r28
    4f32:	ee 5b       	subi	r30, 0xBE	; 190
    4f34:	ff 4f       	sbci	r31, 0xFF	; 255
    4f36:	01 90       	ld	r0, Z+
    4f38:	f0 81       	ld	r31, Z
    4f3a:	e0 2d       	mov	r30, r0
    4f3c:	85 81       	ldd	r24, Z+5	; 0x05
    4f3e:	60 e0       	ldi	r22, 0x00	; 0
    4f40:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    4f44:	fe 01       	movw	r30, r28
    4f46:	ee 5b       	subi	r30, 0xBE	; 190
    4f48:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4a:	01 90       	ld	r0, Z+
    4f4c:	f0 81       	ld	r31, Z
    4f4e:	e0 2d       	mov	r30, r0
    4f50:	86 81       	ldd	r24, Z+6	; 0x06
    4f52:	60 e0       	ldi	r22, 0x00	; 0
    4f54:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    4f58:	fe 01       	movw	r30, r28
    4f5a:	ee 5b       	subi	r30, 0xBE	; 190
    4f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f5e:	01 90       	ld	r0, Z+
    4f60:	f0 81       	ld	r31, Z
    4f62:	e0 2d       	mov	r30, r0
    4f64:	87 81       	ldd	r24, Z+7	; 0x07
    4f66:	60 e0       	ldi	r22, 0x00	; 0
    4f68:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    4f6c:	37 c2       	rjmp	.+1134   	; 0x53dc <HMSSD_enDisplayRealNumber+0x79c>
						break;
					case 2:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    4f6e:	fe 01       	movw	r30, r28
    4f70:	ee 5b       	subi	r30, 0xBE	; 190
    4f72:	ff 4f       	sbci	r31, 0xFF	; 255
    4f74:	01 90       	ld	r0, Z+
    4f76:	f0 81       	ld	r31, Z
    4f78:	e0 2d       	mov	r30, r0
    4f7a:	81 81       	ldd	r24, Z+1	; 0x01
    4f7c:	61 e0       	ldi	r22, 0x01	; 1
    4f7e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    4f82:	fe 01       	movw	r30, r28
    4f84:	ee 5b       	subi	r30, 0xBE	; 190
    4f86:	ff 4f       	sbci	r31, 0xFF	; 255
    4f88:	01 90       	ld	r0, Z+
    4f8a:	f0 81       	ld	r31, Z
    4f8c:	e0 2d       	mov	r30, r0
    4f8e:	82 81       	ldd	r24, Z+2	; 0x02
    4f90:	61 e0       	ldi	r22, 0x01	; 1
    4f92:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    4f96:	fe 01       	movw	r30, r28
    4f98:	ee 5b       	subi	r30, 0xBE	; 190
    4f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9c:	01 90       	ld	r0, Z+
    4f9e:	f0 81       	ld	r31, Z
    4fa0:	e0 2d       	mov	r30, r0
    4fa2:	83 81       	ldd	r24, Z+3	; 0x03
    4fa4:	60 e0       	ldi	r22, 0x00	; 0
    4fa6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    4faa:	fe 01       	movw	r30, r28
    4fac:	ee 5b       	subi	r30, 0xBE	; 190
    4fae:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb0:	01 90       	ld	r0, Z+
    4fb2:	f0 81       	ld	r31, Z
    4fb4:	e0 2d       	mov	r30, r0
    4fb6:	84 81       	ldd	r24, Z+4	; 0x04
    4fb8:	61 e0       	ldi	r22, 0x01	; 1
    4fba:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    4fbe:	fe 01       	movw	r30, r28
    4fc0:	ee 5b       	subi	r30, 0xBE	; 190
    4fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc4:	01 90       	ld	r0, Z+
    4fc6:	f0 81       	ld	r31, Z
    4fc8:	e0 2d       	mov	r30, r0
    4fca:	85 81       	ldd	r24, Z+5	; 0x05
    4fcc:	61 e0       	ldi	r22, 0x01	; 1
    4fce:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    4fd2:	fe 01       	movw	r30, r28
    4fd4:	ee 5b       	subi	r30, 0xBE	; 190
    4fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd8:	01 90       	ld	r0, Z+
    4fda:	f0 81       	ld	r31, Z
    4fdc:	e0 2d       	mov	r30, r0
    4fde:	86 81       	ldd	r24, Z+6	; 0x06
    4fe0:	60 e0       	ldi	r22, 0x00	; 0
    4fe2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    4fe6:	fe 01       	movw	r30, r28
    4fe8:	ee 5b       	subi	r30, 0xBE	; 190
    4fea:	ff 4f       	sbci	r31, 0xFF	; 255
    4fec:	01 90       	ld	r0, Z+
    4fee:	f0 81       	ld	r31, Z
    4ff0:	e0 2d       	mov	r30, r0
    4ff2:	87 81       	ldd	r24, Z+7	; 0x07
    4ff4:	61 e0       	ldi	r22, 0x01	; 1
    4ff6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    4ffa:	f0 c1       	rjmp	.+992    	; 0x53dc <HMSSD_enDisplayRealNumber+0x79c>
						break;
					case 3:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    4ffc:	fe 01       	movw	r30, r28
    4ffe:	ee 5b       	subi	r30, 0xBE	; 190
    5000:	ff 4f       	sbci	r31, 0xFF	; 255
    5002:	01 90       	ld	r0, Z+
    5004:	f0 81       	ld	r31, Z
    5006:	e0 2d       	mov	r30, r0
    5008:	81 81       	ldd	r24, Z+1	; 0x01
    500a:	61 e0       	ldi	r22, 0x01	; 1
    500c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    5010:	fe 01       	movw	r30, r28
    5012:	ee 5b       	subi	r30, 0xBE	; 190
    5014:	ff 4f       	sbci	r31, 0xFF	; 255
    5016:	01 90       	ld	r0, Z+
    5018:	f0 81       	ld	r31, Z
    501a:	e0 2d       	mov	r30, r0
    501c:	82 81       	ldd	r24, Z+2	; 0x02
    501e:	61 e0       	ldi	r22, 0x01	; 1
    5020:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    5024:	fe 01       	movw	r30, r28
    5026:	ee 5b       	subi	r30, 0xBE	; 190
    5028:	ff 4f       	sbci	r31, 0xFF	; 255
    502a:	01 90       	ld	r0, Z+
    502c:	f0 81       	ld	r31, Z
    502e:	e0 2d       	mov	r30, r0
    5030:	83 81       	ldd	r24, Z+3	; 0x03
    5032:	61 e0       	ldi	r22, 0x01	; 1
    5034:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    5038:	fe 01       	movw	r30, r28
    503a:	ee 5b       	subi	r30, 0xBE	; 190
    503c:	ff 4f       	sbci	r31, 0xFF	; 255
    503e:	01 90       	ld	r0, Z+
    5040:	f0 81       	ld	r31, Z
    5042:	e0 2d       	mov	r30, r0
    5044:	84 81       	ldd	r24, Z+4	; 0x04
    5046:	61 e0       	ldi	r22, 0x01	; 1
    5048:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    504c:	fe 01       	movw	r30, r28
    504e:	ee 5b       	subi	r30, 0xBE	; 190
    5050:	ff 4f       	sbci	r31, 0xFF	; 255
    5052:	01 90       	ld	r0, Z+
    5054:	f0 81       	ld	r31, Z
    5056:	e0 2d       	mov	r30, r0
    5058:	85 81       	ldd	r24, Z+5	; 0x05
    505a:	60 e0       	ldi	r22, 0x00	; 0
    505c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    5060:	fe 01       	movw	r30, r28
    5062:	ee 5b       	subi	r30, 0xBE	; 190
    5064:	ff 4f       	sbci	r31, 0xFF	; 255
    5066:	01 90       	ld	r0, Z+
    5068:	f0 81       	ld	r31, Z
    506a:	e0 2d       	mov	r30, r0
    506c:	86 81       	ldd	r24, Z+6	; 0x06
    506e:	60 e0       	ldi	r22, 0x00	; 0
    5070:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    5074:	fe 01       	movw	r30, r28
    5076:	ee 5b       	subi	r30, 0xBE	; 190
    5078:	ff 4f       	sbci	r31, 0xFF	; 255
    507a:	01 90       	ld	r0, Z+
    507c:	f0 81       	ld	r31, Z
    507e:	e0 2d       	mov	r30, r0
    5080:	87 81       	ldd	r24, Z+7	; 0x07
    5082:	61 e0       	ldi	r22, 0x01	; 1
    5084:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    5088:	a9 c1       	rjmp	.+850    	; 0x53dc <HMSSD_enDisplayRealNumber+0x79c>
						break;
					case 4:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    508a:	fe 01       	movw	r30, r28
    508c:	ee 5b       	subi	r30, 0xBE	; 190
    508e:	ff 4f       	sbci	r31, 0xFF	; 255
    5090:	01 90       	ld	r0, Z+
    5092:	f0 81       	ld	r31, Z
    5094:	e0 2d       	mov	r30, r0
    5096:	81 81       	ldd	r24, Z+1	; 0x01
    5098:	60 e0       	ldi	r22, 0x00	; 0
    509a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    509e:	fe 01       	movw	r30, r28
    50a0:	ee 5b       	subi	r30, 0xBE	; 190
    50a2:	ff 4f       	sbci	r31, 0xFF	; 255
    50a4:	01 90       	ld	r0, Z+
    50a6:	f0 81       	ld	r31, Z
    50a8:	e0 2d       	mov	r30, r0
    50aa:	82 81       	ldd	r24, Z+2	; 0x02
    50ac:	61 e0       	ldi	r22, 0x01	; 1
    50ae:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    50b2:	fe 01       	movw	r30, r28
    50b4:	ee 5b       	subi	r30, 0xBE	; 190
    50b6:	ff 4f       	sbci	r31, 0xFF	; 255
    50b8:	01 90       	ld	r0, Z+
    50ba:	f0 81       	ld	r31, Z
    50bc:	e0 2d       	mov	r30, r0
    50be:	83 81       	ldd	r24, Z+3	; 0x03
    50c0:	61 e0       	ldi	r22, 0x01	; 1
    50c2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    50c6:	fe 01       	movw	r30, r28
    50c8:	ee 5b       	subi	r30, 0xBE	; 190
    50ca:	ff 4f       	sbci	r31, 0xFF	; 255
    50cc:	01 90       	ld	r0, Z+
    50ce:	f0 81       	ld	r31, Z
    50d0:	e0 2d       	mov	r30, r0
    50d2:	84 81       	ldd	r24, Z+4	; 0x04
    50d4:	60 e0       	ldi	r22, 0x00	; 0
    50d6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    50da:	fe 01       	movw	r30, r28
    50dc:	ee 5b       	subi	r30, 0xBE	; 190
    50de:	ff 4f       	sbci	r31, 0xFF	; 255
    50e0:	01 90       	ld	r0, Z+
    50e2:	f0 81       	ld	r31, Z
    50e4:	e0 2d       	mov	r30, r0
    50e6:	85 81       	ldd	r24, Z+5	; 0x05
    50e8:	60 e0       	ldi	r22, 0x00	; 0
    50ea:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    50ee:	fe 01       	movw	r30, r28
    50f0:	ee 5b       	subi	r30, 0xBE	; 190
    50f2:	ff 4f       	sbci	r31, 0xFF	; 255
    50f4:	01 90       	ld	r0, Z+
    50f6:	f0 81       	ld	r31, Z
    50f8:	e0 2d       	mov	r30, r0
    50fa:	86 81       	ldd	r24, Z+6	; 0x06
    50fc:	61 e0       	ldi	r22, 0x01	; 1
    50fe:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    5102:	fe 01       	movw	r30, r28
    5104:	ee 5b       	subi	r30, 0xBE	; 190
    5106:	ff 4f       	sbci	r31, 0xFF	; 255
    5108:	01 90       	ld	r0, Z+
    510a:	f0 81       	ld	r31, Z
    510c:	e0 2d       	mov	r30, r0
    510e:	87 81       	ldd	r24, Z+7	; 0x07
    5110:	61 e0       	ldi	r22, 0x01	; 1
    5112:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    5116:	62 c1       	rjmp	.+708    	; 0x53dc <HMSSD_enDisplayRealNumber+0x79c>
						break;
					case 5:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    5118:	fe 01       	movw	r30, r28
    511a:	ee 5b       	subi	r30, 0xBE	; 190
    511c:	ff 4f       	sbci	r31, 0xFF	; 255
    511e:	01 90       	ld	r0, Z+
    5120:	f0 81       	ld	r31, Z
    5122:	e0 2d       	mov	r30, r0
    5124:	81 81       	ldd	r24, Z+1	; 0x01
    5126:	61 e0       	ldi	r22, 0x01	; 1
    5128:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    512c:	fe 01       	movw	r30, r28
    512e:	ee 5b       	subi	r30, 0xBE	; 190
    5130:	ff 4f       	sbci	r31, 0xFF	; 255
    5132:	01 90       	ld	r0, Z+
    5134:	f0 81       	ld	r31, Z
    5136:	e0 2d       	mov	r30, r0
    5138:	82 81       	ldd	r24, Z+2	; 0x02
    513a:	60 e0       	ldi	r22, 0x00	; 0
    513c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    5140:	fe 01       	movw	r30, r28
    5142:	ee 5b       	subi	r30, 0xBE	; 190
    5144:	ff 4f       	sbci	r31, 0xFF	; 255
    5146:	01 90       	ld	r0, Z+
    5148:	f0 81       	ld	r31, Z
    514a:	e0 2d       	mov	r30, r0
    514c:	83 81       	ldd	r24, Z+3	; 0x03
    514e:	61 e0       	ldi	r22, 0x01	; 1
    5150:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    5154:	fe 01       	movw	r30, r28
    5156:	ee 5b       	subi	r30, 0xBE	; 190
    5158:	ff 4f       	sbci	r31, 0xFF	; 255
    515a:	01 90       	ld	r0, Z+
    515c:	f0 81       	ld	r31, Z
    515e:	e0 2d       	mov	r30, r0
    5160:	84 81       	ldd	r24, Z+4	; 0x04
    5162:	61 e0       	ldi	r22, 0x01	; 1
    5164:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    5168:	fe 01       	movw	r30, r28
    516a:	ee 5b       	subi	r30, 0xBE	; 190
    516c:	ff 4f       	sbci	r31, 0xFF	; 255
    516e:	01 90       	ld	r0, Z+
    5170:	f0 81       	ld	r31, Z
    5172:	e0 2d       	mov	r30, r0
    5174:	85 81       	ldd	r24, Z+5	; 0x05
    5176:	60 e0       	ldi	r22, 0x00	; 0
    5178:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    517c:	fe 01       	movw	r30, r28
    517e:	ee 5b       	subi	r30, 0xBE	; 190
    5180:	ff 4f       	sbci	r31, 0xFF	; 255
    5182:	01 90       	ld	r0, Z+
    5184:	f0 81       	ld	r31, Z
    5186:	e0 2d       	mov	r30, r0
    5188:	86 81       	ldd	r24, Z+6	; 0x06
    518a:	61 e0       	ldi	r22, 0x01	; 1
    518c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    5190:	fe 01       	movw	r30, r28
    5192:	ee 5b       	subi	r30, 0xBE	; 190
    5194:	ff 4f       	sbci	r31, 0xFF	; 255
    5196:	01 90       	ld	r0, Z+
    5198:	f0 81       	ld	r31, Z
    519a:	e0 2d       	mov	r30, r0
    519c:	87 81       	ldd	r24, Z+7	; 0x07
    519e:	61 e0       	ldi	r22, 0x01	; 1
    51a0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    51a4:	1b c1       	rjmp	.+566    	; 0x53dc <HMSSD_enDisplayRealNumber+0x79c>
						break;
					case 6:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    51a6:	fe 01       	movw	r30, r28
    51a8:	ee 5b       	subi	r30, 0xBE	; 190
    51aa:	ff 4f       	sbci	r31, 0xFF	; 255
    51ac:	01 90       	ld	r0, Z+
    51ae:	f0 81       	ld	r31, Z
    51b0:	e0 2d       	mov	r30, r0
    51b2:	81 81       	ldd	r24, Z+1	; 0x01
    51b4:	61 e0       	ldi	r22, 0x01	; 1
    51b6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    51ba:	fe 01       	movw	r30, r28
    51bc:	ee 5b       	subi	r30, 0xBE	; 190
    51be:	ff 4f       	sbci	r31, 0xFF	; 255
    51c0:	01 90       	ld	r0, Z+
    51c2:	f0 81       	ld	r31, Z
    51c4:	e0 2d       	mov	r30, r0
    51c6:	82 81       	ldd	r24, Z+2	; 0x02
    51c8:	60 e0       	ldi	r22, 0x00	; 0
    51ca:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    51ce:	fe 01       	movw	r30, r28
    51d0:	ee 5b       	subi	r30, 0xBE	; 190
    51d2:	ff 4f       	sbci	r31, 0xFF	; 255
    51d4:	01 90       	ld	r0, Z+
    51d6:	f0 81       	ld	r31, Z
    51d8:	e0 2d       	mov	r30, r0
    51da:	83 81       	ldd	r24, Z+3	; 0x03
    51dc:	61 e0       	ldi	r22, 0x01	; 1
    51de:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    51e2:	fe 01       	movw	r30, r28
    51e4:	ee 5b       	subi	r30, 0xBE	; 190
    51e6:	ff 4f       	sbci	r31, 0xFF	; 255
    51e8:	01 90       	ld	r0, Z+
    51ea:	f0 81       	ld	r31, Z
    51ec:	e0 2d       	mov	r30, r0
    51ee:	84 81       	ldd	r24, Z+4	; 0x04
    51f0:	61 e0       	ldi	r22, 0x01	; 1
    51f2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    51f6:	fe 01       	movw	r30, r28
    51f8:	ee 5b       	subi	r30, 0xBE	; 190
    51fa:	ff 4f       	sbci	r31, 0xFF	; 255
    51fc:	01 90       	ld	r0, Z+
    51fe:	f0 81       	ld	r31, Z
    5200:	e0 2d       	mov	r30, r0
    5202:	85 81       	ldd	r24, Z+5	; 0x05
    5204:	61 e0       	ldi	r22, 0x01	; 1
    5206:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    520a:	fe 01       	movw	r30, r28
    520c:	ee 5b       	subi	r30, 0xBE	; 190
    520e:	ff 4f       	sbci	r31, 0xFF	; 255
    5210:	01 90       	ld	r0, Z+
    5212:	f0 81       	ld	r31, Z
    5214:	e0 2d       	mov	r30, r0
    5216:	86 81       	ldd	r24, Z+6	; 0x06
    5218:	61 e0       	ldi	r22, 0x01	; 1
    521a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    521e:	fe 01       	movw	r30, r28
    5220:	ee 5b       	subi	r30, 0xBE	; 190
    5222:	ff 4f       	sbci	r31, 0xFF	; 255
    5224:	01 90       	ld	r0, Z+
    5226:	f0 81       	ld	r31, Z
    5228:	e0 2d       	mov	r30, r0
    522a:	87 81       	ldd	r24, Z+7	; 0x07
    522c:	61 e0       	ldi	r22, 0x01	; 1
    522e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    5232:	d4 c0       	rjmp	.+424    	; 0x53dc <HMSSD_enDisplayRealNumber+0x79c>
						break;
					case 7:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    5234:	fe 01       	movw	r30, r28
    5236:	ee 5b       	subi	r30, 0xBE	; 190
    5238:	ff 4f       	sbci	r31, 0xFF	; 255
    523a:	01 90       	ld	r0, Z+
    523c:	f0 81       	ld	r31, Z
    523e:	e0 2d       	mov	r30, r0
    5240:	81 81       	ldd	r24, Z+1	; 0x01
    5242:	61 e0       	ldi	r22, 0x01	; 1
    5244:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    5248:	fe 01       	movw	r30, r28
    524a:	ee 5b       	subi	r30, 0xBE	; 190
    524c:	ff 4f       	sbci	r31, 0xFF	; 255
    524e:	01 90       	ld	r0, Z+
    5250:	f0 81       	ld	r31, Z
    5252:	e0 2d       	mov	r30, r0
    5254:	82 81       	ldd	r24, Z+2	; 0x02
    5256:	61 e0       	ldi	r22, 0x01	; 1
    5258:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    525c:	fe 01       	movw	r30, r28
    525e:	ee 5b       	subi	r30, 0xBE	; 190
    5260:	ff 4f       	sbci	r31, 0xFF	; 255
    5262:	01 90       	ld	r0, Z+
    5264:	f0 81       	ld	r31, Z
    5266:	e0 2d       	mov	r30, r0
    5268:	83 81       	ldd	r24, Z+3	; 0x03
    526a:	61 e0       	ldi	r22, 0x01	; 1
    526c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    5270:	fe 01       	movw	r30, r28
    5272:	ee 5b       	subi	r30, 0xBE	; 190
    5274:	ff 4f       	sbci	r31, 0xFF	; 255
    5276:	01 90       	ld	r0, Z+
    5278:	f0 81       	ld	r31, Z
    527a:	e0 2d       	mov	r30, r0
    527c:	84 81       	ldd	r24, Z+4	; 0x04
    527e:	60 e0       	ldi	r22, 0x00	; 0
    5280:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    5284:	fe 01       	movw	r30, r28
    5286:	ee 5b       	subi	r30, 0xBE	; 190
    5288:	ff 4f       	sbci	r31, 0xFF	; 255
    528a:	01 90       	ld	r0, Z+
    528c:	f0 81       	ld	r31, Z
    528e:	e0 2d       	mov	r30, r0
    5290:	85 81       	ldd	r24, Z+5	; 0x05
    5292:	60 e0       	ldi	r22, 0x00	; 0
    5294:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    5298:	fe 01       	movw	r30, r28
    529a:	ee 5b       	subi	r30, 0xBE	; 190
    529c:	ff 4f       	sbci	r31, 0xFF	; 255
    529e:	01 90       	ld	r0, Z+
    52a0:	f0 81       	ld	r31, Z
    52a2:	e0 2d       	mov	r30, r0
    52a4:	86 81       	ldd	r24, Z+6	; 0x06
    52a6:	60 e0       	ldi	r22, 0x00	; 0
    52a8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    52ac:	fe 01       	movw	r30, r28
    52ae:	ee 5b       	subi	r30, 0xBE	; 190
    52b0:	ff 4f       	sbci	r31, 0xFF	; 255
    52b2:	01 90       	ld	r0, Z+
    52b4:	f0 81       	ld	r31, Z
    52b6:	e0 2d       	mov	r30, r0
    52b8:	87 81       	ldd	r24, Z+7	; 0x07
    52ba:	60 e0       	ldi	r22, 0x00	; 0
    52bc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    52c0:	8d c0       	rjmp	.+282    	; 0x53dc <HMSSD_enDisplayRealNumber+0x79c>
						break;
					case 8:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    52c2:	fe 01       	movw	r30, r28
    52c4:	ee 5b       	subi	r30, 0xBE	; 190
    52c6:	ff 4f       	sbci	r31, 0xFF	; 255
    52c8:	01 90       	ld	r0, Z+
    52ca:	f0 81       	ld	r31, Z
    52cc:	e0 2d       	mov	r30, r0
    52ce:	81 81       	ldd	r24, Z+1	; 0x01
    52d0:	61 e0       	ldi	r22, 0x01	; 1
    52d2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    52d6:	fe 01       	movw	r30, r28
    52d8:	ee 5b       	subi	r30, 0xBE	; 190
    52da:	ff 4f       	sbci	r31, 0xFF	; 255
    52dc:	01 90       	ld	r0, Z+
    52de:	f0 81       	ld	r31, Z
    52e0:	e0 2d       	mov	r30, r0
    52e2:	82 81       	ldd	r24, Z+2	; 0x02
    52e4:	61 e0       	ldi	r22, 0x01	; 1
    52e6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    52ea:	fe 01       	movw	r30, r28
    52ec:	ee 5b       	subi	r30, 0xBE	; 190
    52ee:	ff 4f       	sbci	r31, 0xFF	; 255
    52f0:	01 90       	ld	r0, Z+
    52f2:	f0 81       	ld	r31, Z
    52f4:	e0 2d       	mov	r30, r0
    52f6:	83 81       	ldd	r24, Z+3	; 0x03
    52f8:	61 e0       	ldi	r22, 0x01	; 1
    52fa:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    52fe:	fe 01       	movw	r30, r28
    5300:	ee 5b       	subi	r30, 0xBE	; 190
    5302:	ff 4f       	sbci	r31, 0xFF	; 255
    5304:	01 90       	ld	r0, Z+
    5306:	f0 81       	ld	r31, Z
    5308:	e0 2d       	mov	r30, r0
    530a:	84 81       	ldd	r24, Z+4	; 0x04
    530c:	61 e0       	ldi	r22, 0x01	; 1
    530e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    5312:	fe 01       	movw	r30, r28
    5314:	ee 5b       	subi	r30, 0xBE	; 190
    5316:	ff 4f       	sbci	r31, 0xFF	; 255
    5318:	01 90       	ld	r0, Z+
    531a:	f0 81       	ld	r31, Z
    531c:	e0 2d       	mov	r30, r0
    531e:	85 81       	ldd	r24, Z+5	; 0x05
    5320:	61 e0       	ldi	r22, 0x01	; 1
    5322:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    5326:	fe 01       	movw	r30, r28
    5328:	ee 5b       	subi	r30, 0xBE	; 190
    532a:	ff 4f       	sbci	r31, 0xFF	; 255
    532c:	01 90       	ld	r0, Z+
    532e:	f0 81       	ld	r31, Z
    5330:	e0 2d       	mov	r30, r0
    5332:	86 81       	ldd	r24, Z+6	; 0x06
    5334:	61 e0       	ldi	r22, 0x01	; 1
    5336:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    533a:	fe 01       	movw	r30, r28
    533c:	ee 5b       	subi	r30, 0xBE	; 190
    533e:	ff 4f       	sbci	r31, 0xFF	; 255
    5340:	01 90       	ld	r0, Z+
    5342:	f0 81       	ld	r31, Z
    5344:	e0 2d       	mov	r30, r0
    5346:	87 81       	ldd	r24, Z+7	; 0x07
    5348:	61 e0       	ldi	r22, 0x01	; 1
    534a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    534e:	46 c0       	rjmp	.+140    	; 0x53dc <HMSSD_enDisplayRealNumber+0x79c>
						break;
					case 9:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    5350:	fe 01       	movw	r30, r28
    5352:	ee 5b       	subi	r30, 0xBE	; 190
    5354:	ff 4f       	sbci	r31, 0xFF	; 255
    5356:	01 90       	ld	r0, Z+
    5358:	f0 81       	ld	r31, Z
    535a:	e0 2d       	mov	r30, r0
    535c:	81 81       	ldd	r24, Z+1	; 0x01
    535e:	61 e0       	ldi	r22, 0x01	; 1
    5360:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    5364:	fe 01       	movw	r30, r28
    5366:	ee 5b       	subi	r30, 0xBE	; 190
    5368:	ff 4f       	sbci	r31, 0xFF	; 255
    536a:	01 90       	ld	r0, Z+
    536c:	f0 81       	ld	r31, Z
    536e:	e0 2d       	mov	r30, r0
    5370:	82 81       	ldd	r24, Z+2	; 0x02
    5372:	61 e0       	ldi	r22, 0x01	; 1
    5374:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    5378:	fe 01       	movw	r30, r28
    537a:	ee 5b       	subi	r30, 0xBE	; 190
    537c:	ff 4f       	sbci	r31, 0xFF	; 255
    537e:	01 90       	ld	r0, Z+
    5380:	f0 81       	ld	r31, Z
    5382:	e0 2d       	mov	r30, r0
    5384:	83 81       	ldd	r24, Z+3	; 0x03
    5386:	61 e0       	ldi	r22, 0x01	; 1
    5388:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    538c:	fe 01       	movw	r30, r28
    538e:	ee 5b       	subi	r30, 0xBE	; 190
    5390:	ff 4f       	sbci	r31, 0xFF	; 255
    5392:	01 90       	ld	r0, Z+
    5394:	f0 81       	ld	r31, Z
    5396:	e0 2d       	mov	r30, r0
    5398:	84 81       	ldd	r24, Z+4	; 0x04
    539a:	61 e0       	ldi	r22, 0x01	; 1
    539c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    53a0:	fe 01       	movw	r30, r28
    53a2:	ee 5b       	subi	r30, 0xBE	; 190
    53a4:	ff 4f       	sbci	r31, 0xFF	; 255
    53a6:	01 90       	ld	r0, Z+
    53a8:	f0 81       	ld	r31, Z
    53aa:	e0 2d       	mov	r30, r0
    53ac:	85 81       	ldd	r24, Z+5	; 0x05
    53ae:	60 e0       	ldi	r22, 0x00	; 0
    53b0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    53b4:	fe 01       	movw	r30, r28
    53b6:	ee 5b       	subi	r30, 0xBE	; 190
    53b8:	ff 4f       	sbci	r31, 0xFF	; 255
    53ba:	01 90       	ld	r0, Z+
    53bc:	f0 81       	ld	r31, Z
    53be:	e0 2d       	mov	r30, r0
    53c0:	86 81       	ldd	r24, Z+6	; 0x06
    53c2:	61 e0       	ldi	r22, 0x01	; 1
    53c4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    53c8:	fe 01       	movw	r30, r28
    53ca:	ee 5b       	subi	r30, 0xBE	; 190
    53cc:	ff 4f       	sbci	r31, 0xFF	; 255
    53ce:	01 90       	ld	r0, Z+
    53d0:	f0 81       	ld	r31, Z
    53d2:	e0 2d       	mov	r30, r0
    53d4:	87 81       	ldd	r24, Z+7	; 0x07
    53d6:	61 e0       	ldi	r22, 0x01	; 1
    53d8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    53dc:	80 e0       	ldi	r24, 0x00	; 0
    53de:	90 e0       	ldi	r25, 0x00	; 0
    53e0:	a0 e2       	ldi	r26, 0x20	; 32
    53e2:	b1 e4       	ldi	r27, 0x41	; 65
    53e4:	8d ab       	std	Y+53, r24	; 0x35
    53e6:	9e ab       	std	Y+54, r25	; 0x36
    53e8:	af ab       	std	Y+55, r26	; 0x37
    53ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53ec:	6d a9       	ldd	r22, Y+53	; 0x35
    53ee:	7e a9       	ldd	r23, Y+54	; 0x36
    53f0:	8f a9       	ldd	r24, Y+55	; 0x37
    53f2:	98 ad       	ldd	r25, Y+56	; 0x38
    53f4:	20 e0       	ldi	r18, 0x00	; 0
    53f6:	30 e0       	ldi	r19, 0x00	; 0
    53f8:	4a e7       	ldi	r20, 0x7A	; 122
    53fa:	55 e4       	ldi	r21, 0x45	; 69
    53fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5400:	dc 01       	movw	r26, r24
    5402:	cb 01       	movw	r24, r22
    5404:	89 ab       	std	Y+49, r24	; 0x31
    5406:	9a ab       	std	Y+50, r25	; 0x32
    5408:	ab ab       	std	Y+51, r26	; 0x33
    540a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    540c:	69 a9       	ldd	r22, Y+49	; 0x31
    540e:	7a a9       	ldd	r23, Y+50	; 0x32
    5410:	8b a9       	ldd	r24, Y+51	; 0x33
    5412:	9c a9       	ldd	r25, Y+52	; 0x34
    5414:	20 e0       	ldi	r18, 0x00	; 0
    5416:	30 e0       	ldi	r19, 0x00	; 0
    5418:	40 e8       	ldi	r20, 0x80	; 128
    541a:	5f e3       	ldi	r21, 0x3F	; 63
    541c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5420:	88 23       	and	r24, r24
    5422:	2c f4       	brge	.+10     	; 0x542e <HMSSD_enDisplayRealNumber+0x7ee>
		__ticks = 1;
    5424:	81 e0       	ldi	r24, 0x01	; 1
    5426:	90 e0       	ldi	r25, 0x00	; 0
    5428:	98 ab       	std	Y+48, r25	; 0x30
    542a:	8f a7       	std	Y+47, r24	; 0x2f
    542c:	3f c0       	rjmp	.+126    	; 0x54ac <HMSSD_enDisplayRealNumber+0x86c>
	else if (__tmp > 65535)
    542e:	69 a9       	ldd	r22, Y+49	; 0x31
    5430:	7a a9       	ldd	r23, Y+50	; 0x32
    5432:	8b a9       	ldd	r24, Y+51	; 0x33
    5434:	9c a9       	ldd	r25, Y+52	; 0x34
    5436:	20 e0       	ldi	r18, 0x00	; 0
    5438:	3f ef       	ldi	r19, 0xFF	; 255
    543a:	4f e7       	ldi	r20, 0x7F	; 127
    543c:	57 e4       	ldi	r21, 0x47	; 71
    543e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5442:	18 16       	cp	r1, r24
    5444:	4c f5       	brge	.+82     	; 0x5498 <HMSSD_enDisplayRealNumber+0x858>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5446:	6d a9       	ldd	r22, Y+53	; 0x35
    5448:	7e a9       	ldd	r23, Y+54	; 0x36
    544a:	8f a9       	ldd	r24, Y+55	; 0x37
    544c:	98 ad       	ldd	r25, Y+56	; 0x38
    544e:	20 e0       	ldi	r18, 0x00	; 0
    5450:	30 e0       	ldi	r19, 0x00	; 0
    5452:	40 e2       	ldi	r20, 0x20	; 32
    5454:	51 e4       	ldi	r21, 0x41	; 65
    5456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    545a:	dc 01       	movw	r26, r24
    545c:	cb 01       	movw	r24, r22
    545e:	bc 01       	movw	r22, r24
    5460:	cd 01       	movw	r24, r26
    5462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5466:	dc 01       	movw	r26, r24
    5468:	cb 01       	movw	r24, r22
    546a:	98 ab       	std	Y+48, r25	; 0x30
    546c:	8f a7       	std	Y+47, r24	; 0x2f
    546e:	0f c0       	rjmp	.+30     	; 0x548e <HMSSD_enDisplayRealNumber+0x84e>
    5470:	80 e9       	ldi	r24, 0x90	; 144
    5472:	91 e0       	ldi	r25, 0x01	; 1
    5474:	9e a7       	std	Y+46, r25	; 0x2e
    5476:	8d a7       	std	Y+45, r24	; 0x2d
    5478:	8d a5       	ldd	r24, Y+45	; 0x2d
    547a:	9e a5       	ldd	r25, Y+46	; 0x2e
    547c:	01 97       	sbiw	r24, 0x01	; 1
    547e:	f1 f7       	brne	.-4      	; 0x547c <HMSSD_enDisplayRealNumber+0x83c>
    5480:	9e a7       	std	Y+46, r25	; 0x2e
    5482:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5484:	8f a5       	ldd	r24, Y+47	; 0x2f
    5486:	98 a9       	ldd	r25, Y+48	; 0x30
    5488:	01 97       	sbiw	r24, 0x01	; 1
    548a:	98 ab       	std	Y+48, r25	; 0x30
    548c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    548e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5490:	98 a9       	ldd	r25, Y+48	; 0x30
    5492:	00 97       	sbiw	r24, 0x00	; 0
    5494:	69 f7       	brne	.-38     	; 0x5470 <HMSSD_enDisplayRealNumber+0x830>
    5496:	14 c0       	rjmp	.+40     	; 0x54c0 <HMSSD_enDisplayRealNumber+0x880>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5498:	69 a9       	ldd	r22, Y+49	; 0x31
    549a:	7a a9       	ldd	r23, Y+50	; 0x32
    549c:	8b a9       	ldd	r24, Y+51	; 0x33
    549e:	9c a9       	ldd	r25, Y+52	; 0x34
    54a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54a4:	dc 01       	movw	r26, r24
    54a6:	cb 01       	movw	r24, r22
    54a8:	98 ab       	std	Y+48, r25	; 0x30
    54aa:	8f a7       	std	Y+47, r24	; 0x2f
    54ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    54ae:	98 a9       	ldd	r25, Y+48	; 0x30
    54b0:	9c a7       	std	Y+44, r25	; 0x2c
    54b2:	8b a7       	std	Y+43, r24	; 0x2b
    54b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    54b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    54b8:	01 97       	sbiw	r24, 0x01	; 1
    54ba:	f1 f7       	brne	.-4      	; 0x54b8 <HMSSD_enDisplayRealNumber+0x878>
    54bc:	9c a7       	std	Y+44, r25	; 0x2c
    54be:	8b a7       	std	Y+43, r24	; 0x2b
						break;
					} // switch on Tens --> CC

					_delay_ms(10);
					// Disable SSD1
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN1, HIGH);
    54c0:	fe 01       	movw	r30, r28
    54c2:	ee 5b       	subi	r30, 0xBE	; 190
    54c4:	ff 4f       	sbci	r31, 0xFF	; 255
    54c6:	01 90       	ld	r0, Z+
    54c8:	f0 81       	ld	r31, Z
    54ca:	e0 2d       	mov	r30, r0
    54cc:	81 85       	ldd	r24, Z+9	; 0x09
    54ce:	61 e0       	ldi	r22, 0x01	; 1
    54d0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					// Disable DP
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_DP, LOW);
    54d4:	fe 01       	movw	r30, r28
    54d6:	ee 5b       	subi	r30, 0xBE	; 190
    54d8:	ff 4f       	sbci	r31, 0xFF	; 255
    54da:	01 90       	ld	r0, Z+
    54dc:	f0 81       	ld	r31, Z
    54de:	e0 2d       	mov	r30, r0
    54e0:	80 85       	ldd	r24, Z+8	; 0x08
    54e2:	60 e0       	ldi	r22, 0x00	; 0
    54e4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					// Enable SSD2
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN2, LOW);
    54e8:	fe 01       	movw	r30, r28
    54ea:	ee 5b       	subi	r30, 0xBE	; 190
    54ec:	ff 4f       	sbci	r31, 0xFF	; 255
    54ee:	01 90       	ld	r0, Z+
    54f0:	f0 81       	ld	r31, Z
    54f2:	e0 2d       	mov	r30, r0
    54f4:	82 85       	ldd	r24, Z+10	; 0x0a
    54f6:	60 e0       	ldi	r22, 0x00	; 0
    54f8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>

					switch (Local_u8Units) {
    54fc:	8b ad       	ldd	r24, Y+59	; 0x3b
    54fe:	28 2f       	mov	r18, r24
    5500:	30 e0       	ldi	r19, 0x00	; 0
    5502:	2a 96       	adiw	r28, 0x0a	; 10
    5504:	3f af       	std	Y+63, r19	; 0x3f
    5506:	2e af       	std	Y+62, r18	; 0x3e
    5508:	2a 97       	sbiw	r28, 0x0a	; 10
    550a:	2a 96       	adiw	r28, 0x0a	; 10
    550c:	8e ad       	ldd	r24, Y+62	; 0x3e
    550e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5510:	2a 97       	sbiw	r28, 0x0a	; 10
    5512:	84 30       	cpi	r24, 0x04	; 4
    5514:	91 05       	cpc	r25, r1
    5516:	09 f4       	brne	.+2      	; 0x551a <HMSSD_enDisplayRealNumber+0x8da>
    5518:	7c c1       	rjmp	.+760    	; 0x5812 <HMSSD_enDisplayRealNumber+0xbd2>
    551a:	2a 96       	adiw	r28, 0x0a	; 10
    551c:	2e ad       	ldd	r18, Y+62	; 0x3e
    551e:	3f ad       	ldd	r19, Y+63	; 0x3f
    5520:	2a 97       	sbiw	r28, 0x0a	; 10
    5522:	25 30       	cpi	r18, 0x05	; 5
    5524:	31 05       	cpc	r19, r1
    5526:	44 f5       	brge	.+80     	; 0x5578 <HMSSD_enDisplayRealNumber+0x938>
    5528:	2a 96       	adiw	r28, 0x0a	; 10
    552a:	8e ad       	ldd	r24, Y+62	; 0x3e
    552c:	9f ad       	ldd	r25, Y+63	; 0x3f
    552e:	2a 97       	sbiw	r28, 0x0a	; 10
    5530:	81 30       	cpi	r24, 0x01	; 1
    5532:	91 05       	cpc	r25, r1
    5534:	09 f4       	brne	.+2      	; 0x5538 <HMSSD_enDisplayRealNumber+0x8f8>
    5536:	98 c0       	rjmp	.+304    	; 0x5668 <HMSSD_enDisplayRealNumber+0xa28>
    5538:	2a 96       	adiw	r28, 0x0a	; 10
    553a:	2e ad       	ldd	r18, Y+62	; 0x3e
    553c:	3f ad       	ldd	r19, Y+63	; 0x3f
    553e:	2a 97       	sbiw	r28, 0x0a	; 10
    5540:	22 30       	cpi	r18, 0x02	; 2
    5542:	31 05       	cpc	r19, r1
    5544:	44 f4       	brge	.+16     	; 0x5556 <HMSSD_enDisplayRealNumber+0x916>
    5546:	2a 96       	adiw	r28, 0x0a	; 10
    5548:	8e ad       	ldd	r24, Y+62	; 0x3e
    554a:	9f ad       	ldd	r25, Y+63	; 0x3f
    554c:	2a 97       	sbiw	r28, 0x0a	; 10
    554e:	00 97       	sbiw	r24, 0x00	; 0
    5550:	09 f4       	brne	.+2      	; 0x5554 <HMSSD_enDisplayRealNumber+0x914>
    5552:	43 c0       	rjmp	.+134    	; 0x55da <HMSSD_enDisplayRealNumber+0x99a>
    5554:	07 c3       	rjmp	.+1550   	; 0x5b64 <HMSSD_enDisplayRealNumber+0xf24>
    5556:	2a 96       	adiw	r28, 0x0a	; 10
    5558:	2e ad       	ldd	r18, Y+62	; 0x3e
    555a:	3f ad       	ldd	r19, Y+63	; 0x3f
    555c:	2a 97       	sbiw	r28, 0x0a	; 10
    555e:	22 30       	cpi	r18, 0x02	; 2
    5560:	31 05       	cpc	r19, r1
    5562:	09 f4       	brne	.+2      	; 0x5566 <HMSSD_enDisplayRealNumber+0x926>
    5564:	c8 c0       	rjmp	.+400    	; 0x56f6 <HMSSD_enDisplayRealNumber+0xab6>
    5566:	2a 96       	adiw	r28, 0x0a	; 10
    5568:	8e ad       	ldd	r24, Y+62	; 0x3e
    556a:	9f ad       	ldd	r25, Y+63	; 0x3f
    556c:	2a 97       	sbiw	r28, 0x0a	; 10
    556e:	83 30       	cpi	r24, 0x03	; 3
    5570:	91 05       	cpc	r25, r1
    5572:	09 f4       	brne	.+2      	; 0x5576 <HMSSD_enDisplayRealNumber+0x936>
    5574:	07 c1       	rjmp	.+526    	; 0x5784 <HMSSD_enDisplayRealNumber+0xb44>
    5576:	f6 c2       	rjmp	.+1516   	; 0x5b64 <HMSSD_enDisplayRealNumber+0xf24>
    5578:	2a 96       	adiw	r28, 0x0a	; 10
    557a:	2e ad       	ldd	r18, Y+62	; 0x3e
    557c:	3f ad       	ldd	r19, Y+63	; 0x3f
    557e:	2a 97       	sbiw	r28, 0x0a	; 10
    5580:	27 30       	cpi	r18, 0x07	; 7
    5582:	31 05       	cpc	r19, r1
    5584:	09 f4       	brne	.+2      	; 0x5588 <HMSSD_enDisplayRealNumber+0x948>
    5586:	1a c2       	rjmp	.+1076   	; 0x59bc <HMSSD_enDisplayRealNumber+0xd7c>
    5588:	2a 96       	adiw	r28, 0x0a	; 10
    558a:	8e ad       	ldd	r24, Y+62	; 0x3e
    558c:	9f ad       	ldd	r25, Y+63	; 0x3f
    558e:	2a 97       	sbiw	r28, 0x0a	; 10
    5590:	88 30       	cpi	r24, 0x08	; 8
    5592:	91 05       	cpc	r25, r1
    5594:	8c f4       	brge	.+34     	; 0x55b8 <HMSSD_enDisplayRealNumber+0x978>
    5596:	2a 96       	adiw	r28, 0x0a	; 10
    5598:	2e ad       	ldd	r18, Y+62	; 0x3e
    559a:	3f ad       	ldd	r19, Y+63	; 0x3f
    559c:	2a 97       	sbiw	r28, 0x0a	; 10
    559e:	25 30       	cpi	r18, 0x05	; 5
    55a0:	31 05       	cpc	r19, r1
    55a2:	09 f4       	brne	.+2      	; 0x55a6 <HMSSD_enDisplayRealNumber+0x966>
    55a4:	7d c1       	rjmp	.+762    	; 0x58a0 <HMSSD_enDisplayRealNumber+0xc60>
    55a6:	2a 96       	adiw	r28, 0x0a	; 10
    55a8:	8e ad       	ldd	r24, Y+62	; 0x3e
    55aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    55ac:	2a 97       	sbiw	r28, 0x0a	; 10
    55ae:	86 30       	cpi	r24, 0x06	; 6
    55b0:	91 05       	cpc	r25, r1
    55b2:	09 f4       	brne	.+2      	; 0x55b6 <HMSSD_enDisplayRealNumber+0x976>
    55b4:	bc c1       	rjmp	.+888    	; 0x592e <HMSSD_enDisplayRealNumber+0xcee>
    55b6:	d6 c2       	rjmp	.+1452   	; 0x5b64 <HMSSD_enDisplayRealNumber+0xf24>
    55b8:	2a 96       	adiw	r28, 0x0a	; 10
    55ba:	2e ad       	ldd	r18, Y+62	; 0x3e
    55bc:	3f ad       	ldd	r19, Y+63	; 0x3f
    55be:	2a 97       	sbiw	r28, 0x0a	; 10
    55c0:	28 30       	cpi	r18, 0x08	; 8
    55c2:	31 05       	cpc	r19, r1
    55c4:	09 f4       	brne	.+2      	; 0x55c8 <HMSSD_enDisplayRealNumber+0x988>
    55c6:	41 c2       	rjmp	.+1154   	; 0x5a4a <HMSSD_enDisplayRealNumber+0xe0a>
    55c8:	2a 96       	adiw	r28, 0x0a	; 10
    55ca:	8e ad       	ldd	r24, Y+62	; 0x3e
    55cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    55ce:	2a 97       	sbiw	r28, 0x0a	; 10
    55d0:	89 30       	cpi	r24, 0x09	; 9
    55d2:	91 05       	cpc	r25, r1
    55d4:	09 f4       	brne	.+2      	; 0x55d8 <HMSSD_enDisplayRealNumber+0x998>
    55d6:	80 c2       	rjmp	.+1280   	; 0x5ad8 <HMSSD_enDisplayRealNumber+0xe98>
    55d8:	c5 c2       	rjmp	.+1418   	; 0x5b64 <HMSSD_enDisplayRealNumber+0xf24>
					case 0:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    55da:	fe 01       	movw	r30, r28
    55dc:	ee 5b       	subi	r30, 0xBE	; 190
    55de:	ff 4f       	sbci	r31, 0xFF	; 255
    55e0:	01 90       	ld	r0, Z+
    55e2:	f0 81       	ld	r31, Z
    55e4:	e0 2d       	mov	r30, r0
    55e6:	81 81       	ldd	r24, Z+1	; 0x01
    55e8:	61 e0       	ldi	r22, 0x01	; 1
    55ea:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    55ee:	fe 01       	movw	r30, r28
    55f0:	ee 5b       	subi	r30, 0xBE	; 190
    55f2:	ff 4f       	sbci	r31, 0xFF	; 255
    55f4:	01 90       	ld	r0, Z+
    55f6:	f0 81       	ld	r31, Z
    55f8:	e0 2d       	mov	r30, r0
    55fa:	82 81       	ldd	r24, Z+2	; 0x02
    55fc:	61 e0       	ldi	r22, 0x01	; 1
    55fe:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    5602:	fe 01       	movw	r30, r28
    5604:	ee 5b       	subi	r30, 0xBE	; 190
    5606:	ff 4f       	sbci	r31, 0xFF	; 255
    5608:	01 90       	ld	r0, Z+
    560a:	f0 81       	ld	r31, Z
    560c:	e0 2d       	mov	r30, r0
    560e:	83 81       	ldd	r24, Z+3	; 0x03
    5610:	61 e0       	ldi	r22, 0x01	; 1
    5612:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    5616:	fe 01       	movw	r30, r28
    5618:	ee 5b       	subi	r30, 0xBE	; 190
    561a:	ff 4f       	sbci	r31, 0xFF	; 255
    561c:	01 90       	ld	r0, Z+
    561e:	f0 81       	ld	r31, Z
    5620:	e0 2d       	mov	r30, r0
    5622:	84 81       	ldd	r24, Z+4	; 0x04
    5624:	61 e0       	ldi	r22, 0x01	; 1
    5626:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    562a:	fe 01       	movw	r30, r28
    562c:	ee 5b       	subi	r30, 0xBE	; 190
    562e:	ff 4f       	sbci	r31, 0xFF	; 255
    5630:	01 90       	ld	r0, Z+
    5632:	f0 81       	ld	r31, Z
    5634:	e0 2d       	mov	r30, r0
    5636:	85 81       	ldd	r24, Z+5	; 0x05
    5638:	61 e0       	ldi	r22, 0x01	; 1
    563a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    563e:	fe 01       	movw	r30, r28
    5640:	ee 5b       	subi	r30, 0xBE	; 190
    5642:	ff 4f       	sbci	r31, 0xFF	; 255
    5644:	01 90       	ld	r0, Z+
    5646:	f0 81       	ld	r31, Z
    5648:	e0 2d       	mov	r30, r0
    564a:	86 81       	ldd	r24, Z+6	; 0x06
    564c:	61 e0       	ldi	r22, 0x01	; 1
    564e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    5652:	fe 01       	movw	r30, r28
    5654:	ee 5b       	subi	r30, 0xBE	; 190
    5656:	ff 4f       	sbci	r31, 0xFF	; 255
    5658:	01 90       	ld	r0, Z+
    565a:	f0 81       	ld	r31, Z
    565c:	e0 2d       	mov	r30, r0
    565e:	87 81       	ldd	r24, Z+7	; 0x07
    5660:	60 e0       	ldi	r22, 0x00	; 0
    5662:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    5666:	7e c2       	rjmp	.+1276   	; 0x5b64 <HMSSD_enDisplayRealNumber+0xf24>
						break;
					case 1:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    5668:	fe 01       	movw	r30, r28
    566a:	ee 5b       	subi	r30, 0xBE	; 190
    566c:	ff 4f       	sbci	r31, 0xFF	; 255
    566e:	01 90       	ld	r0, Z+
    5670:	f0 81       	ld	r31, Z
    5672:	e0 2d       	mov	r30, r0
    5674:	81 81       	ldd	r24, Z+1	; 0x01
    5676:	60 e0       	ldi	r22, 0x00	; 0
    5678:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    567c:	fe 01       	movw	r30, r28
    567e:	ee 5b       	subi	r30, 0xBE	; 190
    5680:	ff 4f       	sbci	r31, 0xFF	; 255
    5682:	01 90       	ld	r0, Z+
    5684:	f0 81       	ld	r31, Z
    5686:	e0 2d       	mov	r30, r0
    5688:	82 81       	ldd	r24, Z+2	; 0x02
    568a:	61 e0       	ldi	r22, 0x01	; 1
    568c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    5690:	fe 01       	movw	r30, r28
    5692:	ee 5b       	subi	r30, 0xBE	; 190
    5694:	ff 4f       	sbci	r31, 0xFF	; 255
    5696:	01 90       	ld	r0, Z+
    5698:	f0 81       	ld	r31, Z
    569a:	e0 2d       	mov	r30, r0
    569c:	83 81       	ldd	r24, Z+3	; 0x03
    569e:	61 e0       	ldi	r22, 0x01	; 1
    56a0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    56a4:	fe 01       	movw	r30, r28
    56a6:	ee 5b       	subi	r30, 0xBE	; 190
    56a8:	ff 4f       	sbci	r31, 0xFF	; 255
    56aa:	01 90       	ld	r0, Z+
    56ac:	f0 81       	ld	r31, Z
    56ae:	e0 2d       	mov	r30, r0
    56b0:	84 81       	ldd	r24, Z+4	; 0x04
    56b2:	60 e0       	ldi	r22, 0x00	; 0
    56b4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    56b8:	fe 01       	movw	r30, r28
    56ba:	ee 5b       	subi	r30, 0xBE	; 190
    56bc:	ff 4f       	sbci	r31, 0xFF	; 255
    56be:	01 90       	ld	r0, Z+
    56c0:	f0 81       	ld	r31, Z
    56c2:	e0 2d       	mov	r30, r0
    56c4:	85 81       	ldd	r24, Z+5	; 0x05
    56c6:	60 e0       	ldi	r22, 0x00	; 0
    56c8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    56cc:	fe 01       	movw	r30, r28
    56ce:	ee 5b       	subi	r30, 0xBE	; 190
    56d0:	ff 4f       	sbci	r31, 0xFF	; 255
    56d2:	01 90       	ld	r0, Z+
    56d4:	f0 81       	ld	r31, Z
    56d6:	e0 2d       	mov	r30, r0
    56d8:	86 81       	ldd	r24, Z+6	; 0x06
    56da:	60 e0       	ldi	r22, 0x00	; 0
    56dc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    56e0:	fe 01       	movw	r30, r28
    56e2:	ee 5b       	subi	r30, 0xBE	; 190
    56e4:	ff 4f       	sbci	r31, 0xFF	; 255
    56e6:	01 90       	ld	r0, Z+
    56e8:	f0 81       	ld	r31, Z
    56ea:	e0 2d       	mov	r30, r0
    56ec:	87 81       	ldd	r24, Z+7	; 0x07
    56ee:	60 e0       	ldi	r22, 0x00	; 0
    56f0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    56f4:	37 c2       	rjmp	.+1134   	; 0x5b64 <HMSSD_enDisplayRealNumber+0xf24>
						break;
					case 2:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    56f6:	fe 01       	movw	r30, r28
    56f8:	ee 5b       	subi	r30, 0xBE	; 190
    56fa:	ff 4f       	sbci	r31, 0xFF	; 255
    56fc:	01 90       	ld	r0, Z+
    56fe:	f0 81       	ld	r31, Z
    5700:	e0 2d       	mov	r30, r0
    5702:	81 81       	ldd	r24, Z+1	; 0x01
    5704:	61 e0       	ldi	r22, 0x01	; 1
    5706:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    570a:	fe 01       	movw	r30, r28
    570c:	ee 5b       	subi	r30, 0xBE	; 190
    570e:	ff 4f       	sbci	r31, 0xFF	; 255
    5710:	01 90       	ld	r0, Z+
    5712:	f0 81       	ld	r31, Z
    5714:	e0 2d       	mov	r30, r0
    5716:	82 81       	ldd	r24, Z+2	; 0x02
    5718:	61 e0       	ldi	r22, 0x01	; 1
    571a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    571e:	fe 01       	movw	r30, r28
    5720:	ee 5b       	subi	r30, 0xBE	; 190
    5722:	ff 4f       	sbci	r31, 0xFF	; 255
    5724:	01 90       	ld	r0, Z+
    5726:	f0 81       	ld	r31, Z
    5728:	e0 2d       	mov	r30, r0
    572a:	83 81       	ldd	r24, Z+3	; 0x03
    572c:	60 e0       	ldi	r22, 0x00	; 0
    572e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    5732:	fe 01       	movw	r30, r28
    5734:	ee 5b       	subi	r30, 0xBE	; 190
    5736:	ff 4f       	sbci	r31, 0xFF	; 255
    5738:	01 90       	ld	r0, Z+
    573a:	f0 81       	ld	r31, Z
    573c:	e0 2d       	mov	r30, r0
    573e:	84 81       	ldd	r24, Z+4	; 0x04
    5740:	61 e0       	ldi	r22, 0x01	; 1
    5742:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    5746:	fe 01       	movw	r30, r28
    5748:	ee 5b       	subi	r30, 0xBE	; 190
    574a:	ff 4f       	sbci	r31, 0xFF	; 255
    574c:	01 90       	ld	r0, Z+
    574e:	f0 81       	ld	r31, Z
    5750:	e0 2d       	mov	r30, r0
    5752:	85 81       	ldd	r24, Z+5	; 0x05
    5754:	61 e0       	ldi	r22, 0x01	; 1
    5756:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    575a:	fe 01       	movw	r30, r28
    575c:	ee 5b       	subi	r30, 0xBE	; 190
    575e:	ff 4f       	sbci	r31, 0xFF	; 255
    5760:	01 90       	ld	r0, Z+
    5762:	f0 81       	ld	r31, Z
    5764:	e0 2d       	mov	r30, r0
    5766:	86 81       	ldd	r24, Z+6	; 0x06
    5768:	60 e0       	ldi	r22, 0x00	; 0
    576a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    576e:	fe 01       	movw	r30, r28
    5770:	ee 5b       	subi	r30, 0xBE	; 190
    5772:	ff 4f       	sbci	r31, 0xFF	; 255
    5774:	01 90       	ld	r0, Z+
    5776:	f0 81       	ld	r31, Z
    5778:	e0 2d       	mov	r30, r0
    577a:	87 81       	ldd	r24, Z+7	; 0x07
    577c:	61 e0       	ldi	r22, 0x01	; 1
    577e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    5782:	f0 c1       	rjmp	.+992    	; 0x5b64 <HMSSD_enDisplayRealNumber+0xf24>
						break;
					case 3:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    5784:	fe 01       	movw	r30, r28
    5786:	ee 5b       	subi	r30, 0xBE	; 190
    5788:	ff 4f       	sbci	r31, 0xFF	; 255
    578a:	01 90       	ld	r0, Z+
    578c:	f0 81       	ld	r31, Z
    578e:	e0 2d       	mov	r30, r0
    5790:	81 81       	ldd	r24, Z+1	; 0x01
    5792:	61 e0       	ldi	r22, 0x01	; 1
    5794:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    5798:	fe 01       	movw	r30, r28
    579a:	ee 5b       	subi	r30, 0xBE	; 190
    579c:	ff 4f       	sbci	r31, 0xFF	; 255
    579e:	01 90       	ld	r0, Z+
    57a0:	f0 81       	ld	r31, Z
    57a2:	e0 2d       	mov	r30, r0
    57a4:	82 81       	ldd	r24, Z+2	; 0x02
    57a6:	61 e0       	ldi	r22, 0x01	; 1
    57a8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    57ac:	fe 01       	movw	r30, r28
    57ae:	ee 5b       	subi	r30, 0xBE	; 190
    57b0:	ff 4f       	sbci	r31, 0xFF	; 255
    57b2:	01 90       	ld	r0, Z+
    57b4:	f0 81       	ld	r31, Z
    57b6:	e0 2d       	mov	r30, r0
    57b8:	83 81       	ldd	r24, Z+3	; 0x03
    57ba:	61 e0       	ldi	r22, 0x01	; 1
    57bc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    57c0:	fe 01       	movw	r30, r28
    57c2:	ee 5b       	subi	r30, 0xBE	; 190
    57c4:	ff 4f       	sbci	r31, 0xFF	; 255
    57c6:	01 90       	ld	r0, Z+
    57c8:	f0 81       	ld	r31, Z
    57ca:	e0 2d       	mov	r30, r0
    57cc:	84 81       	ldd	r24, Z+4	; 0x04
    57ce:	61 e0       	ldi	r22, 0x01	; 1
    57d0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    57d4:	fe 01       	movw	r30, r28
    57d6:	ee 5b       	subi	r30, 0xBE	; 190
    57d8:	ff 4f       	sbci	r31, 0xFF	; 255
    57da:	01 90       	ld	r0, Z+
    57dc:	f0 81       	ld	r31, Z
    57de:	e0 2d       	mov	r30, r0
    57e0:	85 81       	ldd	r24, Z+5	; 0x05
    57e2:	60 e0       	ldi	r22, 0x00	; 0
    57e4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    57e8:	fe 01       	movw	r30, r28
    57ea:	ee 5b       	subi	r30, 0xBE	; 190
    57ec:	ff 4f       	sbci	r31, 0xFF	; 255
    57ee:	01 90       	ld	r0, Z+
    57f0:	f0 81       	ld	r31, Z
    57f2:	e0 2d       	mov	r30, r0
    57f4:	86 81       	ldd	r24, Z+6	; 0x06
    57f6:	60 e0       	ldi	r22, 0x00	; 0
    57f8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    57fc:	fe 01       	movw	r30, r28
    57fe:	ee 5b       	subi	r30, 0xBE	; 190
    5800:	ff 4f       	sbci	r31, 0xFF	; 255
    5802:	01 90       	ld	r0, Z+
    5804:	f0 81       	ld	r31, Z
    5806:	e0 2d       	mov	r30, r0
    5808:	87 81       	ldd	r24, Z+7	; 0x07
    580a:	61 e0       	ldi	r22, 0x01	; 1
    580c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    5810:	a9 c1       	rjmp	.+850    	; 0x5b64 <HMSSD_enDisplayRealNumber+0xf24>
						break;
					case 4:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    5812:	fe 01       	movw	r30, r28
    5814:	ee 5b       	subi	r30, 0xBE	; 190
    5816:	ff 4f       	sbci	r31, 0xFF	; 255
    5818:	01 90       	ld	r0, Z+
    581a:	f0 81       	ld	r31, Z
    581c:	e0 2d       	mov	r30, r0
    581e:	81 81       	ldd	r24, Z+1	; 0x01
    5820:	60 e0       	ldi	r22, 0x00	; 0
    5822:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    5826:	fe 01       	movw	r30, r28
    5828:	ee 5b       	subi	r30, 0xBE	; 190
    582a:	ff 4f       	sbci	r31, 0xFF	; 255
    582c:	01 90       	ld	r0, Z+
    582e:	f0 81       	ld	r31, Z
    5830:	e0 2d       	mov	r30, r0
    5832:	82 81       	ldd	r24, Z+2	; 0x02
    5834:	61 e0       	ldi	r22, 0x01	; 1
    5836:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    583a:	fe 01       	movw	r30, r28
    583c:	ee 5b       	subi	r30, 0xBE	; 190
    583e:	ff 4f       	sbci	r31, 0xFF	; 255
    5840:	01 90       	ld	r0, Z+
    5842:	f0 81       	ld	r31, Z
    5844:	e0 2d       	mov	r30, r0
    5846:	83 81       	ldd	r24, Z+3	; 0x03
    5848:	61 e0       	ldi	r22, 0x01	; 1
    584a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    584e:	fe 01       	movw	r30, r28
    5850:	ee 5b       	subi	r30, 0xBE	; 190
    5852:	ff 4f       	sbci	r31, 0xFF	; 255
    5854:	01 90       	ld	r0, Z+
    5856:	f0 81       	ld	r31, Z
    5858:	e0 2d       	mov	r30, r0
    585a:	84 81       	ldd	r24, Z+4	; 0x04
    585c:	60 e0       	ldi	r22, 0x00	; 0
    585e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    5862:	fe 01       	movw	r30, r28
    5864:	ee 5b       	subi	r30, 0xBE	; 190
    5866:	ff 4f       	sbci	r31, 0xFF	; 255
    5868:	01 90       	ld	r0, Z+
    586a:	f0 81       	ld	r31, Z
    586c:	e0 2d       	mov	r30, r0
    586e:	85 81       	ldd	r24, Z+5	; 0x05
    5870:	60 e0       	ldi	r22, 0x00	; 0
    5872:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    5876:	fe 01       	movw	r30, r28
    5878:	ee 5b       	subi	r30, 0xBE	; 190
    587a:	ff 4f       	sbci	r31, 0xFF	; 255
    587c:	01 90       	ld	r0, Z+
    587e:	f0 81       	ld	r31, Z
    5880:	e0 2d       	mov	r30, r0
    5882:	86 81       	ldd	r24, Z+6	; 0x06
    5884:	61 e0       	ldi	r22, 0x01	; 1
    5886:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    588a:	fe 01       	movw	r30, r28
    588c:	ee 5b       	subi	r30, 0xBE	; 190
    588e:	ff 4f       	sbci	r31, 0xFF	; 255
    5890:	01 90       	ld	r0, Z+
    5892:	f0 81       	ld	r31, Z
    5894:	e0 2d       	mov	r30, r0
    5896:	87 81       	ldd	r24, Z+7	; 0x07
    5898:	61 e0       	ldi	r22, 0x01	; 1
    589a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    589e:	62 c1       	rjmp	.+708    	; 0x5b64 <HMSSD_enDisplayRealNumber+0xf24>
						break;
					case 5:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    58a0:	fe 01       	movw	r30, r28
    58a2:	ee 5b       	subi	r30, 0xBE	; 190
    58a4:	ff 4f       	sbci	r31, 0xFF	; 255
    58a6:	01 90       	ld	r0, Z+
    58a8:	f0 81       	ld	r31, Z
    58aa:	e0 2d       	mov	r30, r0
    58ac:	81 81       	ldd	r24, Z+1	; 0x01
    58ae:	61 e0       	ldi	r22, 0x01	; 1
    58b0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    58b4:	fe 01       	movw	r30, r28
    58b6:	ee 5b       	subi	r30, 0xBE	; 190
    58b8:	ff 4f       	sbci	r31, 0xFF	; 255
    58ba:	01 90       	ld	r0, Z+
    58bc:	f0 81       	ld	r31, Z
    58be:	e0 2d       	mov	r30, r0
    58c0:	82 81       	ldd	r24, Z+2	; 0x02
    58c2:	60 e0       	ldi	r22, 0x00	; 0
    58c4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    58c8:	fe 01       	movw	r30, r28
    58ca:	ee 5b       	subi	r30, 0xBE	; 190
    58cc:	ff 4f       	sbci	r31, 0xFF	; 255
    58ce:	01 90       	ld	r0, Z+
    58d0:	f0 81       	ld	r31, Z
    58d2:	e0 2d       	mov	r30, r0
    58d4:	83 81       	ldd	r24, Z+3	; 0x03
    58d6:	61 e0       	ldi	r22, 0x01	; 1
    58d8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    58dc:	fe 01       	movw	r30, r28
    58de:	ee 5b       	subi	r30, 0xBE	; 190
    58e0:	ff 4f       	sbci	r31, 0xFF	; 255
    58e2:	01 90       	ld	r0, Z+
    58e4:	f0 81       	ld	r31, Z
    58e6:	e0 2d       	mov	r30, r0
    58e8:	84 81       	ldd	r24, Z+4	; 0x04
    58ea:	61 e0       	ldi	r22, 0x01	; 1
    58ec:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    58f0:	fe 01       	movw	r30, r28
    58f2:	ee 5b       	subi	r30, 0xBE	; 190
    58f4:	ff 4f       	sbci	r31, 0xFF	; 255
    58f6:	01 90       	ld	r0, Z+
    58f8:	f0 81       	ld	r31, Z
    58fa:	e0 2d       	mov	r30, r0
    58fc:	85 81       	ldd	r24, Z+5	; 0x05
    58fe:	60 e0       	ldi	r22, 0x00	; 0
    5900:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    5904:	fe 01       	movw	r30, r28
    5906:	ee 5b       	subi	r30, 0xBE	; 190
    5908:	ff 4f       	sbci	r31, 0xFF	; 255
    590a:	01 90       	ld	r0, Z+
    590c:	f0 81       	ld	r31, Z
    590e:	e0 2d       	mov	r30, r0
    5910:	86 81       	ldd	r24, Z+6	; 0x06
    5912:	61 e0       	ldi	r22, 0x01	; 1
    5914:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    5918:	fe 01       	movw	r30, r28
    591a:	ee 5b       	subi	r30, 0xBE	; 190
    591c:	ff 4f       	sbci	r31, 0xFF	; 255
    591e:	01 90       	ld	r0, Z+
    5920:	f0 81       	ld	r31, Z
    5922:	e0 2d       	mov	r30, r0
    5924:	87 81       	ldd	r24, Z+7	; 0x07
    5926:	61 e0       	ldi	r22, 0x01	; 1
    5928:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    592c:	1b c1       	rjmp	.+566    	; 0x5b64 <HMSSD_enDisplayRealNumber+0xf24>
						break;
					case 6:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    592e:	fe 01       	movw	r30, r28
    5930:	ee 5b       	subi	r30, 0xBE	; 190
    5932:	ff 4f       	sbci	r31, 0xFF	; 255
    5934:	01 90       	ld	r0, Z+
    5936:	f0 81       	ld	r31, Z
    5938:	e0 2d       	mov	r30, r0
    593a:	81 81       	ldd	r24, Z+1	; 0x01
    593c:	61 e0       	ldi	r22, 0x01	; 1
    593e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    5942:	fe 01       	movw	r30, r28
    5944:	ee 5b       	subi	r30, 0xBE	; 190
    5946:	ff 4f       	sbci	r31, 0xFF	; 255
    5948:	01 90       	ld	r0, Z+
    594a:	f0 81       	ld	r31, Z
    594c:	e0 2d       	mov	r30, r0
    594e:	82 81       	ldd	r24, Z+2	; 0x02
    5950:	60 e0       	ldi	r22, 0x00	; 0
    5952:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    5956:	fe 01       	movw	r30, r28
    5958:	ee 5b       	subi	r30, 0xBE	; 190
    595a:	ff 4f       	sbci	r31, 0xFF	; 255
    595c:	01 90       	ld	r0, Z+
    595e:	f0 81       	ld	r31, Z
    5960:	e0 2d       	mov	r30, r0
    5962:	83 81       	ldd	r24, Z+3	; 0x03
    5964:	61 e0       	ldi	r22, 0x01	; 1
    5966:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    596a:	fe 01       	movw	r30, r28
    596c:	ee 5b       	subi	r30, 0xBE	; 190
    596e:	ff 4f       	sbci	r31, 0xFF	; 255
    5970:	01 90       	ld	r0, Z+
    5972:	f0 81       	ld	r31, Z
    5974:	e0 2d       	mov	r30, r0
    5976:	84 81       	ldd	r24, Z+4	; 0x04
    5978:	61 e0       	ldi	r22, 0x01	; 1
    597a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    597e:	fe 01       	movw	r30, r28
    5980:	ee 5b       	subi	r30, 0xBE	; 190
    5982:	ff 4f       	sbci	r31, 0xFF	; 255
    5984:	01 90       	ld	r0, Z+
    5986:	f0 81       	ld	r31, Z
    5988:	e0 2d       	mov	r30, r0
    598a:	85 81       	ldd	r24, Z+5	; 0x05
    598c:	61 e0       	ldi	r22, 0x01	; 1
    598e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    5992:	fe 01       	movw	r30, r28
    5994:	ee 5b       	subi	r30, 0xBE	; 190
    5996:	ff 4f       	sbci	r31, 0xFF	; 255
    5998:	01 90       	ld	r0, Z+
    599a:	f0 81       	ld	r31, Z
    599c:	e0 2d       	mov	r30, r0
    599e:	86 81       	ldd	r24, Z+6	; 0x06
    59a0:	61 e0       	ldi	r22, 0x01	; 1
    59a2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    59a6:	fe 01       	movw	r30, r28
    59a8:	ee 5b       	subi	r30, 0xBE	; 190
    59aa:	ff 4f       	sbci	r31, 0xFF	; 255
    59ac:	01 90       	ld	r0, Z+
    59ae:	f0 81       	ld	r31, Z
    59b0:	e0 2d       	mov	r30, r0
    59b2:	87 81       	ldd	r24, Z+7	; 0x07
    59b4:	61 e0       	ldi	r22, 0x01	; 1
    59b6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    59ba:	d4 c0       	rjmp	.+424    	; 0x5b64 <HMSSD_enDisplayRealNumber+0xf24>
						break;
					case 7:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    59bc:	fe 01       	movw	r30, r28
    59be:	ee 5b       	subi	r30, 0xBE	; 190
    59c0:	ff 4f       	sbci	r31, 0xFF	; 255
    59c2:	01 90       	ld	r0, Z+
    59c4:	f0 81       	ld	r31, Z
    59c6:	e0 2d       	mov	r30, r0
    59c8:	81 81       	ldd	r24, Z+1	; 0x01
    59ca:	61 e0       	ldi	r22, 0x01	; 1
    59cc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    59d0:	fe 01       	movw	r30, r28
    59d2:	ee 5b       	subi	r30, 0xBE	; 190
    59d4:	ff 4f       	sbci	r31, 0xFF	; 255
    59d6:	01 90       	ld	r0, Z+
    59d8:	f0 81       	ld	r31, Z
    59da:	e0 2d       	mov	r30, r0
    59dc:	82 81       	ldd	r24, Z+2	; 0x02
    59de:	61 e0       	ldi	r22, 0x01	; 1
    59e0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    59e4:	fe 01       	movw	r30, r28
    59e6:	ee 5b       	subi	r30, 0xBE	; 190
    59e8:	ff 4f       	sbci	r31, 0xFF	; 255
    59ea:	01 90       	ld	r0, Z+
    59ec:	f0 81       	ld	r31, Z
    59ee:	e0 2d       	mov	r30, r0
    59f0:	83 81       	ldd	r24, Z+3	; 0x03
    59f2:	61 e0       	ldi	r22, 0x01	; 1
    59f4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    59f8:	fe 01       	movw	r30, r28
    59fa:	ee 5b       	subi	r30, 0xBE	; 190
    59fc:	ff 4f       	sbci	r31, 0xFF	; 255
    59fe:	01 90       	ld	r0, Z+
    5a00:	f0 81       	ld	r31, Z
    5a02:	e0 2d       	mov	r30, r0
    5a04:	84 81       	ldd	r24, Z+4	; 0x04
    5a06:	60 e0       	ldi	r22, 0x00	; 0
    5a08:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    5a0c:	fe 01       	movw	r30, r28
    5a0e:	ee 5b       	subi	r30, 0xBE	; 190
    5a10:	ff 4f       	sbci	r31, 0xFF	; 255
    5a12:	01 90       	ld	r0, Z+
    5a14:	f0 81       	ld	r31, Z
    5a16:	e0 2d       	mov	r30, r0
    5a18:	85 81       	ldd	r24, Z+5	; 0x05
    5a1a:	60 e0       	ldi	r22, 0x00	; 0
    5a1c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    5a20:	fe 01       	movw	r30, r28
    5a22:	ee 5b       	subi	r30, 0xBE	; 190
    5a24:	ff 4f       	sbci	r31, 0xFF	; 255
    5a26:	01 90       	ld	r0, Z+
    5a28:	f0 81       	ld	r31, Z
    5a2a:	e0 2d       	mov	r30, r0
    5a2c:	86 81       	ldd	r24, Z+6	; 0x06
    5a2e:	60 e0       	ldi	r22, 0x00	; 0
    5a30:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    5a34:	fe 01       	movw	r30, r28
    5a36:	ee 5b       	subi	r30, 0xBE	; 190
    5a38:	ff 4f       	sbci	r31, 0xFF	; 255
    5a3a:	01 90       	ld	r0, Z+
    5a3c:	f0 81       	ld	r31, Z
    5a3e:	e0 2d       	mov	r30, r0
    5a40:	87 81       	ldd	r24, Z+7	; 0x07
    5a42:	60 e0       	ldi	r22, 0x00	; 0
    5a44:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    5a48:	8d c0       	rjmp	.+282    	; 0x5b64 <HMSSD_enDisplayRealNumber+0xf24>
						break;
					case 8:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    5a4a:	fe 01       	movw	r30, r28
    5a4c:	ee 5b       	subi	r30, 0xBE	; 190
    5a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a50:	01 90       	ld	r0, Z+
    5a52:	f0 81       	ld	r31, Z
    5a54:	e0 2d       	mov	r30, r0
    5a56:	81 81       	ldd	r24, Z+1	; 0x01
    5a58:	61 e0       	ldi	r22, 0x01	; 1
    5a5a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    5a5e:	fe 01       	movw	r30, r28
    5a60:	ee 5b       	subi	r30, 0xBE	; 190
    5a62:	ff 4f       	sbci	r31, 0xFF	; 255
    5a64:	01 90       	ld	r0, Z+
    5a66:	f0 81       	ld	r31, Z
    5a68:	e0 2d       	mov	r30, r0
    5a6a:	82 81       	ldd	r24, Z+2	; 0x02
    5a6c:	61 e0       	ldi	r22, 0x01	; 1
    5a6e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    5a72:	fe 01       	movw	r30, r28
    5a74:	ee 5b       	subi	r30, 0xBE	; 190
    5a76:	ff 4f       	sbci	r31, 0xFF	; 255
    5a78:	01 90       	ld	r0, Z+
    5a7a:	f0 81       	ld	r31, Z
    5a7c:	e0 2d       	mov	r30, r0
    5a7e:	83 81       	ldd	r24, Z+3	; 0x03
    5a80:	61 e0       	ldi	r22, 0x01	; 1
    5a82:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    5a86:	fe 01       	movw	r30, r28
    5a88:	ee 5b       	subi	r30, 0xBE	; 190
    5a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a8c:	01 90       	ld	r0, Z+
    5a8e:	f0 81       	ld	r31, Z
    5a90:	e0 2d       	mov	r30, r0
    5a92:	84 81       	ldd	r24, Z+4	; 0x04
    5a94:	61 e0       	ldi	r22, 0x01	; 1
    5a96:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    5a9a:	fe 01       	movw	r30, r28
    5a9c:	ee 5b       	subi	r30, 0xBE	; 190
    5a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    5aa0:	01 90       	ld	r0, Z+
    5aa2:	f0 81       	ld	r31, Z
    5aa4:	e0 2d       	mov	r30, r0
    5aa6:	85 81       	ldd	r24, Z+5	; 0x05
    5aa8:	61 e0       	ldi	r22, 0x01	; 1
    5aaa:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    5aae:	fe 01       	movw	r30, r28
    5ab0:	ee 5b       	subi	r30, 0xBE	; 190
    5ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ab4:	01 90       	ld	r0, Z+
    5ab6:	f0 81       	ld	r31, Z
    5ab8:	e0 2d       	mov	r30, r0
    5aba:	86 81       	ldd	r24, Z+6	; 0x06
    5abc:	61 e0       	ldi	r22, 0x01	; 1
    5abe:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    5ac2:	fe 01       	movw	r30, r28
    5ac4:	ee 5b       	subi	r30, 0xBE	; 190
    5ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ac8:	01 90       	ld	r0, Z+
    5aca:	f0 81       	ld	r31, Z
    5acc:	e0 2d       	mov	r30, r0
    5ace:	87 81       	ldd	r24, Z+7	; 0x07
    5ad0:	61 e0       	ldi	r22, 0x01	; 1
    5ad2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    5ad6:	46 c0       	rjmp	.+140    	; 0x5b64 <HMSSD_enDisplayRealNumber+0xf24>
						break;
					case 9:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    5ad8:	fe 01       	movw	r30, r28
    5ada:	ee 5b       	subi	r30, 0xBE	; 190
    5adc:	ff 4f       	sbci	r31, 0xFF	; 255
    5ade:	01 90       	ld	r0, Z+
    5ae0:	f0 81       	ld	r31, Z
    5ae2:	e0 2d       	mov	r30, r0
    5ae4:	81 81       	ldd	r24, Z+1	; 0x01
    5ae6:	61 e0       	ldi	r22, 0x01	; 1
    5ae8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    5aec:	fe 01       	movw	r30, r28
    5aee:	ee 5b       	subi	r30, 0xBE	; 190
    5af0:	ff 4f       	sbci	r31, 0xFF	; 255
    5af2:	01 90       	ld	r0, Z+
    5af4:	f0 81       	ld	r31, Z
    5af6:	e0 2d       	mov	r30, r0
    5af8:	82 81       	ldd	r24, Z+2	; 0x02
    5afa:	61 e0       	ldi	r22, 0x01	; 1
    5afc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    5b00:	fe 01       	movw	r30, r28
    5b02:	ee 5b       	subi	r30, 0xBE	; 190
    5b04:	ff 4f       	sbci	r31, 0xFF	; 255
    5b06:	01 90       	ld	r0, Z+
    5b08:	f0 81       	ld	r31, Z
    5b0a:	e0 2d       	mov	r30, r0
    5b0c:	83 81       	ldd	r24, Z+3	; 0x03
    5b0e:	61 e0       	ldi	r22, 0x01	; 1
    5b10:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    5b14:	fe 01       	movw	r30, r28
    5b16:	ee 5b       	subi	r30, 0xBE	; 190
    5b18:	ff 4f       	sbci	r31, 0xFF	; 255
    5b1a:	01 90       	ld	r0, Z+
    5b1c:	f0 81       	ld	r31, Z
    5b1e:	e0 2d       	mov	r30, r0
    5b20:	84 81       	ldd	r24, Z+4	; 0x04
    5b22:	61 e0       	ldi	r22, 0x01	; 1
    5b24:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    5b28:	fe 01       	movw	r30, r28
    5b2a:	ee 5b       	subi	r30, 0xBE	; 190
    5b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b2e:	01 90       	ld	r0, Z+
    5b30:	f0 81       	ld	r31, Z
    5b32:	e0 2d       	mov	r30, r0
    5b34:	85 81       	ldd	r24, Z+5	; 0x05
    5b36:	60 e0       	ldi	r22, 0x00	; 0
    5b38:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    5b3c:	fe 01       	movw	r30, r28
    5b3e:	ee 5b       	subi	r30, 0xBE	; 190
    5b40:	ff 4f       	sbci	r31, 0xFF	; 255
    5b42:	01 90       	ld	r0, Z+
    5b44:	f0 81       	ld	r31, Z
    5b46:	e0 2d       	mov	r30, r0
    5b48:	86 81       	ldd	r24, Z+6	; 0x06
    5b4a:	61 e0       	ldi	r22, 0x01	; 1
    5b4c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    5b50:	fe 01       	movw	r30, r28
    5b52:	ee 5b       	subi	r30, 0xBE	; 190
    5b54:	ff 4f       	sbci	r31, 0xFF	; 255
    5b56:	01 90       	ld	r0, Z+
    5b58:	f0 81       	ld	r31, Z
    5b5a:	e0 2d       	mov	r30, r0
    5b5c:	87 81       	ldd	r24, Z+7	; 0x07
    5b5e:	61 e0       	ldi	r22, 0x01	; 1
    5b60:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    5b64:	80 e0       	ldi	r24, 0x00	; 0
    5b66:	90 e0       	ldi	r25, 0x00	; 0
    5b68:	a0 e2       	ldi	r26, 0x20	; 32
    5b6a:	b1 e4       	ldi	r27, 0x41	; 65
    5b6c:	8f a3       	std	Y+39, r24	; 0x27
    5b6e:	98 a7       	std	Y+40, r25	; 0x28
    5b70:	a9 a7       	std	Y+41, r26	; 0x29
    5b72:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b74:	6f a1       	ldd	r22, Y+39	; 0x27
    5b76:	78 a5       	ldd	r23, Y+40	; 0x28
    5b78:	89 a5       	ldd	r24, Y+41	; 0x29
    5b7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    5b7c:	20 e0       	ldi	r18, 0x00	; 0
    5b7e:	30 e0       	ldi	r19, 0x00	; 0
    5b80:	4a e7       	ldi	r20, 0x7A	; 122
    5b82:	55 e4       	ldi	r21, 0x45	; 69
    5b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b88:	dc 01       	movw	r26, r24
    5b8a:	cb 01       	movw	r24, r22
    5b8c:	8b a3       	std	Y+35, r24	; 0x23
    5b8e:	9c a3       	std	Y+36, r25	; 0x24
    5b90:	ad a3       	std	Y+37, r26	; 0x25
    5b92:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5b94:	6b a1       	ldd	r22, Y+35	; 0x23
    5b96:	7c a1       	ldd	r23, Y+36	; 0x24
    5b98:	8d a1       	ldd	r24, Y+37	; 0x25
    5b9a:	9e a1       	ldd	r25, Y+38	; 0x26
    5b9c:	20 e0       	ldi	r18, 0x00	; 0
    5b9e:	30 e0       	ldi	r19, 0x00	; 0
    5ba0:	40 e8       	ldi	r20, 0x80	; 128
    5ba2:	5f e3       	ldi	r21, 0x3F	; 63
    5ba4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ba8:	88 23       	and	r24, r24
    5baa:	2c f4       	brge	.+10     	; 0x5bb6 <HMSSD_enDisplayRealNumber+0xf76>
		__ticks = 1;
    5bac:	81 e0       	ldi	r24, 0x01	; 1
    5bae:	90 e0       	ldi	r25, 0x00	; 0
    5bb0:	9a a3       	std	Y+34, r25	; 0x22
    5bb2:	89 a3       	std	Y+33, r24	; 0x21
    5bb4:	3f c0       	rjmp	.+126    	; 0x5c34 <HMSSD_enDisplayRealNumber+0xff4>
	else if (__tmp > 65535)
    5bb6:	6b a1       	ldd	r22, Y+35	; 0x23
    5bb8:	7c a1       	ldd	r23, Y+36	; 0x24
    5bba:	8d a1       	ldd	r24, Y+37	; 0x25
    5bbc:	9e a1       	ldd	r25, Y+38	; 0x26
    5bbe:	20 e0       	ldi	r18, 0x00	; 0
    5bc0:	3f ef       	ldi	r19, 0xFF	; 255
    5bc2:	4f e7       	ldi	r20, 0x7F	; 127
    5bc4:	57 e4       	ldi	r21, 0x47	; 71
    5bc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5bca:	18 16       	cp	r1, r24
    5bcc:	4c f5       	brge	.+82     	; 0x5c20 <HMSSD_enDisplayRealNumber+0xfe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bce:	6f a1       	ldd	r22, Y+39	; 0x27
    5bd0:	78 a5       	ldd	r23, Y+40	; 0x28
    5bd2:	89 a5       	ldd	r24, Y+41	; 0x29
    5bd4:	9a a5       	ldd	r25, Y+42	; 0x2a
    5bd6:	20 e0       	ldi	r18, 0x00	; 0
    5bd8:	30 e0       	ldi	r19, 0x00	; 0
    5bda:	40 e2       	ldi	r20, 0x20	; 32
    5bdc:	51 e4       	ldi	r21, 0x41	; 65
    5bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5be2:	dc 01       	movw	r26, r24
    5be4:	cb 01       	movw	r24, r22
    5be6:	bc 01       	movw	r22, r24
    5be8:	cd 01       	movw	r24, r26
    5bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bee:	dc 01       	movw	r26, r24
    5bf0:	cb 01       	movw	r24, r22
    5bf2:	9a a3       	std	Y+34, r25	; 0x22
    5bf4:	89 a3       	std	Y+33, r24	; 0x21
    5bf6:	0f c0       	rjmp	.+30     	; 0x5c16 <HMSSD_enDisplayRealNumber+0xfd6>
    5bf8:	80 e9       	ldi	r24, 0x90	; 144
    5bfa:	91 e0       	ldi	r25, 0x01	; 1
    5bfc:	98 a3       	std	Y+32, r25	; 0x20
    5bfe:	8f 8f       	std	Y+31, r24	; 0x1f
    5c00:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5c02:	98 a1       	ldd	r25, Y+32	; 0x20
    5c04:	01 97       	sbiw	r24, 0x01	; 1
    5c06:	f1 f7       	brne	.-4      	; 0x5c04 <HMSSD_enDisplayRealNumber+0xfc4>
    5c08:	98 a3       	std	Y+32, r25	; 0x20
    5c0a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c0c:	89 a1       	ldd	r24, Y+33	; 0x21
    5c0e:	9a a1       	ldd	r25, Y+34	; 0x22
    5c10:	01 97       	sbiw	r24, 0x01	; 1
    5c12:	9a a3       	std	Y+34, r25	; 0x22
    5c14:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c16:	89 a1       	ldd	r24, Y+33	; 0x21
    5c18:	9a a1       	ldd	r25, Y+34	; 0x22
    5c1a:	00 97       	sbiw	r24, 0x00	; 0
    5c1c:	69 f7       	brne	.-38     	; 0x5bf8 <HMSSD_enDisplayRealNumber+0xfb8>
    5c1e:	14 c0       	rjmp	.+40     	; 0x5c48 <HMSSD_enDisplayRealNumber+0x1008>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c20:	6b a1       	ldd	r22, Y+35	; 0x23
    5c22:	7c a1       	ldd	r23, Y+36	; 0x24
    5c24:	8d a1       	ldd	r24, Y+37	; 0x25
    5c26:	9e a1       	ldd	r25, Y+38	; 0x26
    5c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c2c:	dc 01       	movw	r26, r24
    5c2e:	cb 01       	movw	r24, r22
    5c30:	9a a3       	std	Y+34, r25	; 0x22
    5c32:	89 a3       	std	Y+33, r24	; 0x21
    5c34:	89 a1       	ldd	r24, Y+33	; 0x21
    5c36:	9a a1       	ldd	r25, Y+34	; 0x22
    5c38:	9e 8f       	std	Y+30, r25	; 0x1e
    5c3a:	8d 8f       	std	Y+29, r24	; 0x1d
    5c3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5c3e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5c40:	01 97       	sbiw	r24, 0x01	; 1
    5c42:	f1 f7       	brne	.-4      	; 0x5c40 <HMSSD_enDisplayRealNumber+0x1000>
    5c44:	9e 8f       	std	Y+30, r25	; 0x1e
    5c46:	8d 8f       	std	Y+29, r24	; 0x1d
						break;
					} // switch on Units --> CC

					_delay_ms(10);
					// Disable SSD2
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN2, HIGH);
    5c48:	fe 01       	movw	r30, r28
    5c4a:	ee 5b       	subi	r30, 0xBE	; 190
    5c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c4e:	01 90       	ld	r0, Z+
    5c50:	f0 81       	ld	r31, Z
    5c52:	e0 2d       	mov	r30, r0
    5c54:	82 85       	ldd	r24, Z+10	; 0x0a
    5c56:	61 e0       	ldi	r22, 0x01	; 1
    5c58:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
		if (PtrMSSD != NULL) {
			u8 Local_u8Tens = (copy_u8Number * 10) / 10;
			u8 Local_u8Units = ((u8) (copy_u8Number * 10)) % 10;
			u16 i;
			if (PtrMSSD->MSSD_Type == C_CATHODE) {
				for (i = 0; i < PtrMSSD->MSSD_Duration; i++) {
    5c5c:	89 ad       	ldd	r24, Y+57	; 0x39
    5c5e:	9a ad       	ldd	r25, Y+58	; 0x3a
    5c60:	01 96       	adiw	r24, 0x01	; 1
    5c62:	9a af       	std	Y+58, r25	; 0x3a
    5c64:	89 af       	std	Y+57, r24	; 0x39
    5c66:	fe 01       	movw	r30, r28
    5c68:	ee 5b       	subi	r30, 0xBE	; 190
    5c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c6c:	01 90       	ld	r0, Z+
    5c6e:	f0 81       	ld	r31, Z
    5c70:	e0 2d       	mov	r30, r0
    5c72:	23 85       	ldd	r18, Z+11	; 0x0b
    5c74:	34 85       	ldd	r19, Z+12	; 0x0c
    5c76:	89 ad       	ldd	r24, Y+57	; 0x39
    5c78:	9a ad       	ldd	r25, Y+58	; 0x3a
    5c7a:	82 17       	cp	r24, r18
    5c7c:	93 07       	cpc	r25, r19
    5c7e:	08 f4       	brcc	.+2      	; 0x5c82 <HMSSD_enDisplayRealNumber+0x1042>
    5c80:	65 c8       	rjmp	.-3894   	; 0x4d4c <HMSSD_enDisplayRealNumber+0x10c>
    5c82:	0c 94 f1 35 	jmp	0x6be2	; 0x6be2 <HMSSD_enDisplayRealNumber+0x1fa2>
					// Disable SSD2
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN2, HIGH);

				} // for
			} // Type = CC
			else if (PtrMSSD->MSSD_Type == C_ANODE) {
    5c86:	fe 01       	movw	r30, r28
    5c88:	ee 5b       	subi	r30, 0xBE	; 190
    5c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c8c:	01 90       	ld	r0, Z+
    5c8e:	f0 81       	ld	r31, Z
    5c90:	e0 2d       	mov	r30, r0
    5c92:	80 81       	ld	r24, Z
    5c94:	81 30       	cpi	r24, 0x01	; 1
    5c96:	09 f0       	breq	.+2      	; 0x5c9a <HMSSD_enDisplayRealNumber+0x105a>
    5c98:	9f c7       	rjmp	.+3902   	; 0x6bd8 <HMSSD_enDisplayRealNumber+0x1f98>
				for (i = 0; i < PtrMSSD->MSSD_Duration; i++) {
    5c9a:	1a ae       	std	Y+58, r1	; 0x3a
    5c9c:	19 ae       	std	Y+57, r1	; 0x39
    5c9e:	8d c7       	rjmp	.+3866   	; 0x6bba <HMSSD_enDisplayRealNumber+0x1f7a>
					// Enable SSD1
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN1, HIGH);
    5ca0:	fe 01       	movw	r30, r28
    5ca2:	ee 5b       	subi	r30, 0xBE	; 190
    5ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ca6:	01 90       	ld	r0, Z+
    5ca8:	f0 81       	ld	r31, Z
    5caa:	e0 2d       	mov	r30, r0
    5cac:	81 85       	ldd	r24, Z+9	; 0x09
    5cae:	61 e0       	ldi	r22, 0x01	; 1
    5cb0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					// Enable DP
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_DP, LOW);
    5cb4:	fe 01       	movw	r30, r28
    5cb6:	ee 5b       	subi	r30, 0xBE	; 190
    5cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    5cba:	01 90       	ld	r0, Z+
    5cbc:	f0 81       	ld	r31, Z
    5cbe:	e0 2d       	mov	r30, r0
    5cc0:	80 85       	ldd	r24, Z+8	; 0x08
    5cc2:	60 e0       	ldi	r22, 0x00	; 0
    5cc4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					switch (Local_u8Tens) {
    5cc8:	8c ad       	ldd	r24, Y+60	; 0x3c
    5cca:	28 2f       	mov	r18, r24
    5ccc:	30 e0       	ldi	r19, 0x00	; 0
    5cce:	28 96       	adiw	r28, 0x08	; 8
    5cd0:	3f af       	std	Y+63, r19	; 0x3f
    5cd2:	2e af       	std	Y+62, r18	; 0x3e
    5cd4:	28 97       	sbiw	r28, 0x08	; 8
    5cd6:	28 96       	adiw	r28, 0x08	; 8
    5cd8:	8e ad       	ldd	r24, Y+62	; 0x3e
    5cda:	9f ad       	ldd	r25, Y+63	; 0x3f
    5cdc:	28 97       	sbiw	r28, 0x08	; 8
    5cde:	84 30       	cpi	r24, 0x04	; 4
    5ce0:	91 05       	cpc	r25, r1
    5ce2:	09 f4       	brne	.+2      	; 0x5ce6 <HMSSD_enDisplayRealNumber+0x10a6>
    5ce4:	7c c1       	rjmp	.+760    	; 0x5fde <HMSSD_enDisplayRealNumber+0x139e>
    5ce6:	28 96       	adiw	r28, 0x08	; 8
    5ce8:	2e ad       	ldd	r18, Y+62	; 0x3e
    5cea:	3f ad       	ldd	r19, Y+63	; 0x3f
    5cec:	28 97       	sbiw	r28, 0x08	; 8
    5cee:	25 30       	cpi	r18, 0x05	; 5
    5cf0:	31 05       	cpc	r19, r1
    5cf2:	44 f5       	brge	.+80     	; 0x5d44 <HMSSD_enDisplayRealNumber+0x1104>
    5cf4:	28 96       	adiw	r28, 0x08	; 8
    5cf6:	8e ad       	ldd	r24, Y+62	; 0x3e
    5cf8:	9f ad       	ldd	r25, Y+63	; 0x3f
    5cfa:	28 97       	sbiw	r28, 0x08	; 8
    5cfc:	81 30       	cpi	r24, 0x01	; 1
    5cfe:	91 05       	cpc	r25, r1
    5d00:	09 f4       	brne	.+2      	; 0x5d04 <HMSSD_enDisplayRealNumber+0x10c4>
    5d02:	98 c0       	rjmp	.+304    	; 0x5e34 <HMSSD_enDisplayRealNumber+0x11f4>
    5d04:	28 96       	adiw	r28, 0x08	; 8
    5d06:	2e ad       	ldd	r18, Y+62	; 0x3e
    5d08:	3f ad       	ldd	r19, Y+63	; 0x3f
    5d0a:	28 97       	sbiw	r28, 0x08	; 8
    5d0c:	22 30       	cpi	r18, 0x02	; 2
    5d0e:	31 05       	cpc	r19, r1
    5d10:	44 f4       	brge	.+16     	; 0x5d22 <HMSSD_enDisplayRealNumber+0x10e2>
    5d12:	28 96       	adiw	r28, 0x08	; 8
    5d14:	8e ad       	ldd	r24, Y+62	; 0x3e
    5d16:	9f ad       	ldd	r25, Y+63	; 0x3f
    5d18:	28 97       	sbiw	r28, 0x08	; 8
    5d1a:	00 97       	sbiw	r24, 0x00	; 0
    5d1c:	09 f4       	brne	.+2      	; 0x5d20 <HMSSD_enDisplayRealNumber+0x10e0>
    5d1e:	43 c0       	rjmp	.+134    	; 0x5da6 <HMSSD_enDisplayRealNumber+0x1166>
    5d20:	07 c3       	rjmp	.+1550   	; 0x6330 <HMSSD_enDisplayRealNumber+0x16f0>
    5d22:	28 96       	adiw	r28, 0x08	; 8
    5d24:	2e ad       	ldd	r18, Y+62	; 0x3e
    5d26:	3f ad       	ldd	r19, Y+63	; 0x3f
    5d28:	28 97       	sbiw	r28, 0x08	; 8
    5d2a:	22 30       	cpi	r18, 0x02	; 2
    5d2c:	31 05       	cpc	r19, r1
    5d2e:	09 f4       	brne	.+2      	; 0x5d32 <HMSSD_enDisplayRealNumber+0x10f2>
    5d30:	c8 c0       	rjmp	.+400    	; 0x5ec2 <HMSSD_enDisplayRealNumber+0x1282>
    5d32:	28 96       	adiw	r28, 0x08	; 8
    5d34:	8e ad       	ldd	r24, Y+62	; 0x3e
    5d36:	9f ad       	ldd	r25, Y+63	; 0x3f
    5d38:	28 97       	sbiw	r28, 0x08	; 8
    5d3a:	83 30       	cpi	r24, 0x03	; 3
    5d3c:	91 05       	cpc	r25, r1
    5d3e:	09 f4       	brne	.+2      	; 0x5d42 <HMSSD_enDisplayRealNumber+0x1102>
    5d40:	07 c1       	rjmp	.+526    	; 0x5f50 <HMSSD_enDisplayRealNumber+0x1310>
    5d42:	f6 c2       	rjmp	.+1516   	; 0x6330 <HMSSD_enDisplayRealNumber+0x16f0>
    5d44:	28 96       	adiw	r28, 0x08	; 8
    5d46:	2e ad       	ldd	r18, Y+62	; 0x3e
    5d48:	3f ad       	ldd	r19, Y+63	; 0x3f
    5d4a:	28 97       	sbiw	r28, 0x08	; 8
    5d4c:	27 30       	cpi	r18, 0x07	; 7
    5d4e:	31 05       	cpc	r19, r1
    5d50:	09 f4       	brne	.+2      	; 0x5d54 <HMSSD_enDisplayRealNumber+0x1114>
    5d52:	1a c2       	rjmp	.+1076   	; 0x6188 <HMSSD_enDisplayRealNumber+0x1548>
    5d54:	28 96       	adiw	r28, 0x08	; 8
    5d56:	8e ad       	ldd	r24, Y+62	; 0x3e
    5d58:	9f ad       	ldd	r25, Y+63	; 0x3f
    5d5a:	28 97       	sbiw	r28, 0x08	; 8
    5d5c:	88 30       	cpi	r24, 0x08	; 8
    5d5e:	91 05       	cpc	r25, r1
    5d60:	8c f4       	brge	.+34     	; 0x5d84 <HMSSD_enDisplayRealNumber+0x1144>
    5d62:	28 96       	adiw	r28, 0x08	; 8
    5d64:	2e ad       	ldd	r18, Y+62	; 0x3e
    5d66:	3f ad       	ldd	r19, Y+63	; 0x3f
    5d68:	28 97       	sbiw	r28, 0x08	; 8
    5d6a:	25 30       	cpi	r18, 0x05	; 5
    5d6c:	31 05       	cpc	r19, r1
    5d6e:	09 f4       	brne	.+2      	; 0x5d72 <HMSSD_enDisplayRealNumber+0x1132>
    5d70:	7d c1       	rjmp	.+762    	; 0x606c <HMSSD_enDisplayRealNumber+0x142c>
    5d72:	28 96       	adiw	r28, 0x08	; 8
    5d74:	8e ad       	ldd	r24, Y+62	; 0x3e
    5d76:	9f ad       	ldd	r25, Y+63	; 0x3f
    5d78:	28 97       	sbiw	r28, 0x08	; 8
    5d7a:	86 30       	cpi	r24, 0x06	; 6
    5d7c:	91 05       	cpc	r25, r1
    5d7e:	09 f4       	brne	.+2      	; 0x5d82 <HMSSD_enDisplayRealNumber+0x1142>
    5d80:	bc c1       	rjmp	.+888    	; 0x60fa <HMSSD_enDisplayRealNumber+0x14ba>
    5d82:	d6 c2       	rjmp	.+1452   	; 0x6330 <HMSSD_enDisplayRealNumber+0x16f0>
    5d84:	28 96       	adiw	r28, 0x08	; 8
    5d86:	2e ad       	ldd	r18, Y+62	; 0x3e
    5d88:	3f ad       	ldd	r19, Y+63	; 0x3f
    5d8a:	28 97       	sbiw	r28, 0x08	; 8
    5d8c:	28 30       	cpi	r18, 0x08	; 8
    5d8e:	31 05       	cpc	r19, r1
    5d90:	09 f4       	brne	.+2      	; 0x5d94 <HMSSD_enDisplayRealNumber+0x1154>
    5d92:	41 c2       	rjmp	.+1154   	; 0x6216 <HMSSD_enDisplayRealNumber+0x15d6>
    5d94:	28 96       	adiw	r28, 0x08	; 8
    5d96:	8e ad       	ldd	r24, Y+62	; 0x3e
    5d98:	9f ad       	ldd	r25, Y+63	; 0x3f
    5d9a:	28 97       	sbiw	r28, 0x08	; 8
    5d9c:	89 30       	cpi	r24, 0x09	; 9
    5d9e:	91 05       	cpc	r25, r1
    5da0:	09 f4       	brne	.+2      	; 0x5da4 <HMSSD_enDisplayRealNumber+0x1164>
    5da2:	80 c2       	rjmp	.+1280   	; 0x62a4 <HMSSD_enDisplayRealNumber+0x1664>
    5da4:	c5 c2       	rjmp	.+1418   	; 0x6330 <HMSSD_enDisplayRealNumber+0x16f0>
					case 0:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    5da6:	fe 01       	movw	r30, r28
    5da8:	ee 5b       	subi	r30, 0xBE	; 190
    5daa:	ff 4f       	sbci	r31, 0xFF	; 255
    5dac:	01 90       	ld	r0, Z+
    5dae:	f0 81       	ld	r31, Z
    5db0:	e0 2d       	mov	r30, r0
    5db2:	81 81       	ldd	r24, Z+1	; 0x01
    5db4:	60 e0       	ldi	r22, 0x00	; 0
    5db6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    5dba:	fe 01       	movw	r30, r28
    5dbc:	ee 5b       	subi	r30, 0xBE	; 190
    5dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    5dc0:	01 90       	ld	r0, Z+
    5dc2:	f0 81       	ld	r31, Z
    5dc4:	e0 2d       	mov	r30, r0
    5dc6:	82 81       	ldd	r24, Z+2	; 0x02
    5dc8:	60 e0       	ldi	r22, 0x00	; 0
    5dca:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    5dce:	fe 01       	movw	r30, r28
    5dd0:	ee 5b       	subi	r30, 0xBE	; 190
    5dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    5dd4:	01 90       	ld	r0, Z+
    5dd6:	f0 81       	ld	r31, Z
    5dd8:	e0 2d       	mov	r30, r0
    5dda:	83 81       	ldd	r24, Z+3	; 0x03
    5ddc:	60 e0       	ldi	r22, 0x00	; 0
    5dde:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    5de2:	fe 01       	movw	r30, r28
    5de4:	ee 5b       	subi	r30, 0xBE	; 190
    5de6:	ff 4f       	sbci	r31, 0xFF	; 255
    5de8:	01 90       	ld	r0, Z+
    5dea:	f0 81       	ld	r31, Z
    5dec:	e0 2d       	mov	r30, r0
    5dee:	84 81       	ldd	r24, Z+4	; 0x04
    5df0:	60 e0       	ldi	r22, 0x00	; 0
    5df2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    5df6:	fe 01       	movw	r30, r28
    5df8:	ee 5b       	subi	r30, 0xBE	; 190
    5dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    5dfc:	01 90       	ld	r0, Z+
    5dfe:	f0 81       	ld	r31, Z
    5e00:	e0 2d       	mov	r30, r0
    5e02:	85 81       	ldd	r24, Z+5	; 0x05
    5e04:	60 e0       	ldi	r22, 0x00	; 0
    5e06:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    5e0a:	fe 01       	movw	r30, r28
    5e0c:	ee 5b       	subi	r30, 0xBE	; 190
    5e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e10:	01 90       	ld	r0, Z+
    5e12:	f0 81       	ld	r31, Z
    5e14:	e0 2d       	mov	r30, r0
    5e16:	86 81       	ldd	r24, Z+6	; 0x06
    5e18:	60 e0       	ldi	r22, 0x00	; 0
    5e1a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    5e1e:	fe 01       	movw	r30, r28
    5e20:	ee 5b       	subi	r30, 0xBE	; 190
    5e22:	ff 4f       	sbci	r31, 0xFF	; 255
    5e24:	01 90       	ld	r0, Z+
    5e26:	f0 81       	ld	r31, Z
    5e28:	e0 2d       	mov	r30, r0
    5e2a:	87 81       	ldd	r24, Z+7	; 0x07
    5e2c:	61 e0       	ldi	r22, 0x01	; 1
    5e2e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    5e32:	7e c2       	rjmp	.+1276   	; 0x6330 <HMSSD_enDisplayRealNumber+0x16f0>
						break;
					case 1:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    5e34:	fe 01       	movw	r30, r28
    5e36:	ee 5b       	subi	r30, 0xBE	; 190
    5e38:	ff 4f       	sbci	r31, 0xFF	; 255
    5e3a:	01 90       	ld	r0, Z+
    5e3c:	f0 81       	ld	r31, Z
    5e3e:	e0 2d       	mov	r30, r0
    5e40:	81 81       	ldd	r24, Z+1	; 0x01
    5e42:	61 e0       	ldi	r22, 0x01	; 1
    5e44:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    5e48:	fe 01       	movw	r30, r28
    5e4a:	ee 5b       	subi	r30, 0xBE	; 190
    5e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e4e:	01 90       	ld	r0, Z+
    5e50:	f0 81       	ld	r31, Z
    5e52:	e0 2d       	mov	r30, r0
    5e54:	82 81       	ldd	r24, Z+2	; 0x02
    5e56:	60 e0       	ldi	r22, 0x00	; 0
    5e58:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    5e5c:	fe 01       	movw	r30, r28
    5e5e:	ee 5b       	subi	r30, 0xBE	; 190
    5e60:	ff 4f       	sbci	r31, 0xFF	; 255
    5e62:	01 90       	ld	r0, Z+
    5e64:	f0 81       	ld	r31, Z
    5e66:	e0 2d       	mov	r30, r0
    5e68:	83 81       	ldd	r24, Z+3	; 0x03
    5e6a:	60 e0       	ldi	r22, 0x00	; 0
    5e6c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    5e70:	fe 01       	movw	r30, r28
    5e72:	ee 5b       	subi	r30, 0xBE	; 190
    5e74:	ff 4f       	sbci	r31, 0xFF	; 255
    5e76:	01 90       	ld	r0, Z+
    5e78:	f0 81       	ld	r31, Z
    5e7a:	e0 2d       	mov	r30, r0
    5e7c:	84 81       	ldd	r24, Z+4	; 0x04
    5e7e:	61 e0       	ldi	r22, 0x01	; 1
    5e80:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    5e84:	fe 01       	movw	r30, r28
    5e86:	ee 5b       	subi	r30, 0xBE	; 190
    5e88:	ff 4f       	sbci	r31, 0xFF	; 255
    5e8a:	01 90       	ld	r0, Z+
    5e8c:	f0 81       	ld	r31, Z
    5e8e:	e0 2d       	mov	r30, r0
    5e90:	85 81       	ldd	r24, Z+5	; 0x05
    5e92:	61 e0       	ldi	r22, 0x01	; 1
    5e94:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    5e98:	fe 01       	movw	r30, r28
    5e9a:	ee 5b       	subi	r30, 0xBE	; 190
    5e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e9e:	01 90       	ld	r0, Z+
    5ea0:	f0 81       	ld	r31, Z
    5ea2:	e0 2d       	mov	r30, r0
    5ea4:	86 81       	ldd	r24, Z+6	; 0x06
    5ea6:	61 e0       	ldi	r22, 0x01	; 1
    5ea8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    5eac:	fe 01       	movw	r30, r28
    5eae:	ee 5b       	subi	r30, 0xBE	; 190
    5eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    5eb2:	01 90       	ld	r0, Z+
    5eb4:	f0 81       	ld	r31, Z
    5eb6:	e0 2d       	mov	r30, r0
    5eb8:	87 81       	ldd	r24, Z+7	; 0x07
    5eba:	61 e0       	ldi	r22, 0x01	; 1
    5ebc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    5ec0:	37 c2       	rjmp	.+1134   	; 0x6330 <HMSSD_enDisplayRealNumber+0x16f0>
						break;
					case 2:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    5ec2:	fe 01       	movw	r30, r28
    5ec4:	ee 5b       	subi	r30, 0xBE	; 190
    5ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ec8:	01 90       	ld	r0, Z+
    5eca:	f0 81       	ld	r31, Z
    5ecc:	e0 2d       	mov	r30, r0
    5ece:	81 81       	ldd	r24, Z+1	; 0x01
    5ed0:	60 e0       	ldi	r22, 0x00	; 0
    5ed2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    5ed6:	fe 01       	movw	r30, r28
    5ed8:	ee 5b       	subi	r30, 0xBE	; 190
    5eda:	ff 4f       	sbci	r31, 0xFF	; 255
    5edc:	01 90       	ld	r0, Z+
    5ede:	f0 81       	ld	r31, Z
    5ee0:	e0 2d       	mov	r30, r0
    5ee2:	82 81       	ldd	r24, Z+2	; 0x02
    5ee4:	60 e0       	ldi	r22, 0x00	; 0
    5ee6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    5eea:	fe 01       	movw	r30, r28
    5eec:	ee 5b       	subi	r30, 0xBE	; 190
    5eee:	ff 4f       	sbci	r31, 0xFF	; 255
    5ef0:	01 90       	ld	r0, Z+
    5ef2:	f0 81       	ld	r31, Z
    5ef4:	e0 2d       	mov	r30, r0
    5ef6:	83 81       	ldd	r24, Z+3	; 0x03
    5ef8:	61 e0       	ldi	r22, 0x01	; 1
    5efa:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    5efe:	fe 01       	movw	r30, r28
    5f00:	ee 5b       	subi	r30, 0xBE	; 190
    5f02:	ff 4f       	sbci	r31, 0xFF	; 255
    5f04:	01 90       	ld	r0, Z+
    5f06:	f0 81       	ld	r31, Z
    5f08:	e0 2d       	mov	r30, r0
    5f0a:	84 81       	ldd	r24, Z+4	; 0x04
    5f0c:	60 e0       	ldi	r22, 0x00	; 0
    5f0e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    5f12:	fe 01       	movw	r30, r28
    5f14:	ee 5b       	subi	r30, 0xBE	; 190
    5f16:	ff 4f       	sbci	r31, 0xFF	; 255
    5f18:	01 90       	ld	r0, Z+
    5f1a:	f0 81       	ld	r31, Z
    5f1c:	e0 2d       	mov	r30, r0
    5f1e:	85 81       	ldd	r24, Z+5	; 0x05
    5f20:	60 e0       	ldi	r22, 0x00	; 0
    5f22:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    5f26:	fe 01       	movw	r30, r28
    5f28:	ee 5b       	subi	r30, 0xBE	; 190
    5f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f2c:	01 90       	ld	r0, Z+
    5f2e:	f0 81       	ld	r31, Z
    5f30:	e0 2d       	mov	r30, r0
    5f32:	86 81       	ldd	r24, Z+6	; 0x06
    5f34:	61 e0       	ldi	r22, 0x01	; 1
    5f36:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    5f3a:	fe 01       	movw	r30, r28
    5f3c:	ee 5b       	subi	r30, 0xBE	; 190
    5f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5f40:	01 90       	ld	r0, Z+
    5f42:	f0 81       	ld	r31, Z
    5f44:	e0 2d       	mov	r30, r0
    5f46:	87 81       	ldd	r24, Z+7	; 0x07
    5f48:	60 e0       	ldi	r22, 0x00	; 0
    5f4a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    5f4e:	f0 c1       	rjmp	.+992    	; 0x6330 <HMSSD_enDisplayRealNumber+0x16f0>
						break;
					case 3:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    5f50:	fe 01       	movw	r30, r28
    5f52:	ee 5b       	subi	r30, 0xBE	; 190
    5f54:	ff 4f       	sbci	r31, 0xFF	; 255
    5f56:	01 90       	ld	r0, Z+
    5f58:	f0 81       	ld	r31, Z
    5f5a:	e0 2d       	mov	r30, r0
    5f5c:	81 81       	ldd	r24, Z+1	; 0x01
    5f5e:	60 e0       	ldi	r22, 0x00	; 0
    5f60:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    5f64:	fe 01       	movw	r30, r28
    5f66:	ee 5b       	subi	r30, 0xBE	; 190
    5f68:	ff 4f       	sbci	r31, 0xFF	; 255
    5f6a:	01 90       	ld	r0, Z+
    5f6c:	f0 81       	ld	r31, Z
    5f6e:	e0 2d       	mov	r30, r0
    5f70:	82 81       	ldd	r24, Z+2	; 0x02
    5f72:	60 e0       	ldi	r22, 0x00	; 0
    5f74:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    5f78:	fe 01       	movw	r30, r28
    5f7a:	ee 5b       	subi	r30, 0xBE	; 190
    5f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f7e:	01 90       	ld	r0, Z+
    5f80:	f0 81       	ld	r31, Z
    5f82:	e0 2d       	mov	r30, r0
    5f84:	83 81       	ldd	r24, Z+3	; 0x03
    5f86:	60 e0       	ldi	r22, 0x00	; 0
    5f88:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    5f8c:	fe 01       	movw	r30, r28
    5f8e:	ee 5b       	subi	r30, 0xBE	; 190
    5f90:	ff 4f       	sbci	r31, 0xFF	; 255
    5f92:	01 90       	ld	r0, Z+
    5f94:	f0 81       	ld	r31, Z
    5f96:	e0 2d       	mov	r30, r0
    5f98:	84 81       	ldd	r24, Z+4	; 0x04
    5f9a:	60 e0       	ldi	r22, 0x00	; 0
    5f9c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    5fa0:	fe 01       	movw	r30, r28
    5fa2:	ee 5b       	subi	r30, 0xBE	; 190
    5fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    5fa6:	01 90       	ld	r0, Z+
    5fa8:	f0 81       	ld	r31, Z
    5faa:	e0 2d       	mov	r30, r0
    5fac:	85 81       	ldd	r24, Z+5	; 0x05
    5fae:	61 e0       	ldi	r22, 0x01	; 1
    5fb0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    5fb4:	fe 01       	movw	r30, r28
    5fb6:	ee 5b       	subi	r30, 0xBE	; 190
    5fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    5fba:	01 90       	ld	r0, Z+
    5fbc:	f0 81       	ld	r31, Z
    5fbe:	e0 2d       	mov	r30, r0
    5fc0:	86 81       	ldd	r24, Z+6	; 0x06
    5fc2:	61 e0       	ldi	r22, 0x01	; 1
    5fc4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    5fc8:	fe 01       	movw	r30, r28
    5fca:	ee 5b       	subi	r30, 0xBE	; 190
    5fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    5fce:	01 90       	ld	r0, Z+
    5fd0:	f0 81       	ld	r31, Z
    5fd2:	e0 2d       	mov	r30, r0
    5fd4:	87 81       	ldd	r24, Z+7	; 0x07
    5fd6:	60 e0       	ldi	r22, 0x00	; 0
    5fd8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    5fdc:	a9 c1       	rjmp	.+850    	; 0x6330 <HMSSD_enDisplayRealNumber+0x16f0>
						break;
					case 4:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    5fde:	fe 01       	movw	r30, r28
    5fe0:	ee 5b       	subi	r30, 0xBE	; 190
    5fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    5fe4:	01 90       	ld	r0, Z+
    5fe6:	f0 81       	ld	r31, Z
    5fe8:	e0 2d       	mov	r30, r0
    5fea:	81 81       	ldd	r24, Z+1	; 0x01
    5fec:	61 e0       	ldi	r22, 0x01	; 1
    5fee:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    5ff2:	fe 01       	movw	r30, r28
    5ff4:	ee 5b       	subi	r30, 0xBE	; 190
    5ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ff8:	01 90       	ld	r0, Z+
    5ffa:	f0 81       	ld	r31, Z
    5ffc:	e0 2d       	mov	r30, r0
    5ffe:	82 81       	ldd	r24, Z+2	; 0x02
    6000:	60 e0       	ldi	r22, 0x00	; 0
    6002:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    6006:	fe 01       	movw	r30, r28
    6008:	ee 5b       	subi	r30, 0xBE	; 190
    600a:	ff 4f       	sbci	r31, 0xFF	; 255
    600c:	01 90       	ld	r0, Z+
    600e:	f0 81       	ld	r31, Z
    6010:	e0 2d       	mov	r30, r0
    6012:	83 81       	ldd	r24, Z+3	; 0x03
    6014:	60 e0       	ldi	r22, 0x00	; 0
    6016:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    601a:	fe 01       	movw	r30, r28
    601c:	ee 5b       	subi	r30, 0xBE	; 190
    601e:	ff 4f       	sbci	r31, 0xFF	; 255
    6020:	01 90       	ld	r0, Z+
    6022:	f0 81       	ld	r31, Z
    6024:	e0 2d       	mov	r30, r0
    6026:	84 81       	ldd	r24, Z+4	; 0x04
    6028:	61 e0       	ldi	r22, 0x01	; 1
    602a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    602e:	fe 01       	movw	r30, r28
    6030:	ee 5b       	subi	r30, 0xBE	; 190
    6032:	ff 4f       	sbci	r31, 0xFF	; 255
    6034:	01 90       	ld	r0, Z+
    6036:	f0 81       	ld	r31, Z
    6038:	e0 2d       	mov	r30, r0
    603a:	85 81       	ldd	r24, Z+5	; 0x05
    603c:	61 e0       	ldi	r22, 0x01	; 1
    603e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    6042:	fe 01       	movw	r30, r28
    6044:	ee 5b       	subi	r30, 0xBE	; 190
    6046:	ff 4f       	sbci	r31, 0xFF	; 255
    6048:	01 90       	ld	r0, Z+
    604a:	f0 81       	ld	r31, Z
    604c:	e0 2d       	mov	r30, r0
    604e:	86 81       	ldd	r24, Z+6	; 0x06
    6050:	60 e0       	ldi	r22, 0x00	; 0
    6052:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    6056:	fe 01       	movw	r30, r28
    6058:	ee 5b       	subi	r30, 0xBE	; 190
    605a:	ff 4f       	sbci	r31, 0xFF	; 255
    605c:	01 90       	ld	r0, Z+
    605e:	f0 81       	ld	r31, Z
    6060:	e0 2d       	mov	r30, r0
    6062:	87 81       	ldd	r24, Z+7	; 0x07
    6064:	60 e0       	ldi	r22, 0x00	; 0
    6066:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    606a:	62 c1       	rjmp	.+708    	; 0x6330 <HMSSD_enDisplayRealNumber+0x16f0>
						break;
					case 5:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    606c:	fe 01       	movw	r30, r28
    606e:	ee 5b       	subi	r30, 0xBE	; 190
    6070:	ff 4f       	sbci	r31, 0xFF	; 255
    6072:	01 90       	ld	r0, Z+
    6074:	f0 81       	ld	r31, Z
    6076:	e0 2d       	mov	r30, r0
    6078:	81 81       	ldd	r24, Z+1	; 0x01
    607a:	60 e0       	ldi	r22, 0x00	; 0
    607c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    6080:	fe 01       	movw	r30, r28
    6082:	ee 5b       	subi	r30, 0xBE	; 190
    6084:	ff 4f       	sbci	r31, 0xFF	; 255
    6086:	01 90       	ld	r0, Z+
    6088:	f0 81       	ld	r31, Z
    608a:	e0 2d       	mov	r30, r0
    608c:	82 81       	ldd	r24, Z+2	; 0x02
    608e:	61 e0       	ldi	r22, 0x01	; 1
    6090:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    6094:	fe 01       	movw	r30, r28
    6096:	ee 5b       	subi	r30, 0xBE	; 190
    6098:	ff 4f       	sbci	r31, 0xFF	; 255
    609a:	01 90       	ld	r0, Z+
    609c:	f0 81       	ld	r31, Z
    609e:	e0 2d       	mov	r30, r0
    60a0:	83 81       	ldd	r24, Z+3	; 0x03
    60a2:	60 e0       	ldi	r22, 0x00	; 0
    60a4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    60a8:	fe 01       	movw	r30, r28
    60aa:	ee 5b       	subi	r30, 0xBE	; 190
    60ac:	ff 4f       	sbci	r31, 0xFF	; 255
    60ae:	01 90       	ld	r0, Z+
    60b0:	f0 81       	ld	r31, Z
    60b2:	e0 2d       	mov	r30, r0
    60b4:	84 81       	ldd	r24, Z+4	; 0x04
    60b6:	60 e0       	ldi	r22, 0x00	; 0
    60b8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    60bc:	fe 01       	movw	r30, r28
    60be:	ee 5b       	subi	r30, 0xBE	; 190
    60c0:	ff 4f       	sbci	r31, 0xFF	; 255
    60c2:	01 90       	ld	r0, Z+
    60c4:	f0 81       	ld	r31, Z
    60c6:	e0 2d       	mov	r30, r0
    60c8:	85 81       	ldd	r24, Z+5	; 0x05
    60ca:	61 e0       	ldi	r22, 0x01	; 1
    60cc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    60d0:	fe 01       	movw	r30, r28
    60d2:	ee 5b       	subi	r30, 0xBE	; 190
    60d4:	ff 4f       	sbci	r31, 0xFF	; 255
    60d6:	01 90       	ld	r0, Z+
    60d8:	f0 81       	ld	r31, Z
    60da:	e0 2d       	mov	r30, r0
    60dc:	86 81       	ldd	r24, Z+6	; 0x06
    60de:	60 e0       	ldi	r22, 0x00	; 0
    60e0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    60e4:	fe 01       	movw	r30, r28
    60e6:	ee 5b       	subi	r30, 0xBE	; 190
    60e8:	ff 4f       	sbci	r31, 0xFF	; 255
    60ea:	01 90       	ld	r0, Z+
    60ec:	f0 81       	ld	r31, Z
    60ee:	e0 2d       	mov	r30, r0
    60f0:	87 81       	ldd	r24, Z+7	; 0x07
    60f2:	60 e0       	ldi	r22, 0x00	; 0
    60f4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    60f8:	1b c1       	rjmp	.+566    	; 0x6330 <HMSSD_enDisplayRealNumber+0x16f0>
						break;
					case 6:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    60fa:	fe 01       	movw	r30, r28
    60fc:	ee 5b       	subi	r30, 0xBE	; 190
    60fe:	ff 4f       	sbci	r31, 0xFF	; 255
    6100:	01 90       	ld	r0, Z+
    6102:	f0 81       	ld	r31, Z
    6104:	e0 2d       	mov	r30, r0
    6106:	81 81       	ldd	r24, Z+1	; 0x01
    6108:	60 e0       	ldi	r22, 0x00	; 0
    610a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    610e:	fe 01       	movw	r30, r28
    6110:	ee 5b       	subi	r30, 0xBE	; 190
    6112:	ff 4f       	sbci	r31, 0xFF	; 255
    6114:	01 90       	ld	r0, Z+
    6116:	f0 81       	ld	r31, Z
    6118:	e0 2d       	mov	r30, r0
    611a:	82 81       	ldd	r24, Z+2	; 0x02
    611c:	61 e0       	ldi	r22, 0x01	; 1
    611e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    6122:	fe 01       	movw	r30, r28
    6124:	ee 5b       	subi	r30, 0xBE	; 190
    6126:	ff 4f       	sbci	r31, 0xFF	; 255
    6128:	01 90       	ld	r0, Z+
    612a:	f0 81       	ld	r31, Z
    612c:	e0 2d       	mov	r30, r0
    612e:	83 81       	ldd	r24, Z+3	; 0x03
    6130:	60 e0       	ldi	r22, 0x00	; 0
    6132:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    6136:	fe 01       	movw	r30, r28
    6138:	ee 5b       	subi	r30, 0xBE	; 190
    613a:	ff 4f       	sbci	r31, 0xFF	; 255
    613c:	01 90       	ld	r0, Z+
    613e:	f0 81       	ld	r31, Z
    6140:	e0 2d       	mov	r30, r0
    6142:	84 81       	ldd	r24, Z+4	; 0x04
    6144:	60 e0       	ldi	r22, 0x00	; 0
    6146:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    614a:	fe 01       	movw	r30, r28
    614c:	ee 5b       	subi	r30, 0xBE	; 190
    614e:	ff 4f       	sbci	r31, 0xFF	; 255
    6150:	01 90       	ld	r0, Z+
    6152:	f0 81       	ld	r31, Z
    6154:	e0 2d       	mov	r30, r0
    6156:	85 81       	ldd	r24, Z+5	; 0x05
    6158:	60 e0       	ldi	r22, 0x00	; 0
    615a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    615e:	fe 01       	movw	r30, r28
    6160:	ee 5b       	subi	r30, 0xBE	; 190
    6162:	ff 4f       	sbci	r31, 0xFF	; 255
    6164:	01 90       	ld	r0, Z+
    6166:	f0 81       	ld	r31, Z
    6168:	e0 2d       	mov	r30, r0
    616a:	86 81       	ldd	r24, Z+6	; 0x06
    616c:	60 e0       	ldi	r22, 0x00	; 0
    616e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    6172:	fe 01       	movw	r30, r28
    6174:	ee 5b       	subi	r30, 0xBE	; 190
    6176:	ff 4f       	sbci	r31, 0xFF	; 255
    6178:	01 90       	ld	r0, Z+
    617a:	f0 81       	ld	r31, Z
    617c:	e0 2d       	mov	r30, r0
    617e:	87 81       	ldd	r24, Z+7	; 0x07
    6180:	60 e0       	ldi	r22, 0x00	; 0
    6182:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    6186:	d4 c0       	rjmp	.+424    	; 0x6330 <HMSSD_enDisplayRealNumber+0x16f0>
						break;
					case 7:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    6188:	fe 01       	movw	r30, r28
    618a:	ee 5b       	subi	r30, 0xBE	; 190
    618c:	ff 4f       	sbci	r31, 0xFF	; 255
    618e:	01 90       	ld	r0, Z+
    6190:	f0 81       	ld	r31, Z
    6192:	e0 2d       	mov	r30, r0
    6194:	81 81       	ldd	r24, Z+1	; 0x01
    6196:	60 e0       	ldi	r22, 0x00	; 0
    6198:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    619c:	fe 01       	movw	r30, r28
    619e:	ee 5b       	subi	r30, 0xBE	; 190
    61a0:	ff 4f       	sbci	r31, 0xFF	; 255
    61a2:	01 90       	ld	r0, Z+
    61a4:	f0 81       	ld	r31, Z
    61a6:	e0 2d       	mov	r30, r0
    61a8:	82 81       	ldd	r24, Z+2	; 0x02
    61aa:	60 e0       	ldi	r22, 0x00	; 0
    61ac:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    61b0:	fe 01       	movw	r30, r28
    61b2:	ee 5b       	subi	r30, 0xBE	; 190
    61b4:	ff 4f       	sbci	r31, 0xFF	; 255
    61b6:	01 90       	ld	r0, Z+
    61b8:	f0 81       	ld	r31, Z
    61ba:	e0 2d       	mov	r30, r0
    61bc:	83 81       	ldd	r24, Z+3	; 0x03
    61be:	60 e0       	ldi	r22, 0x00	; 0
    61c0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    61c4:	fe 01       	movw	r30, r28
    61c6:	ee 5b       	subi	r30, 0xBE	; 190
    61c8:	ff 4f       	sbci	r31, 0xFF	; 255
    61ca:	01 90       	ld	r0, Z+
    61cc:	f0 81       	ld	r31, Z
    61ce:	e0 2d       	mov	r30, r0
    61d0:	84 81       	ldd	r24, Z+4	; 0x04
    61d2:	61 e0       	ldi	r22, 0x01	; 1
    61d4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    61d8:	fe 01       	movw	r30, r28
    61da:	ee 5b       	subi	r30, 0xBE	; 190
    61dc:	ff 4f       	sbci	r31, 0xFF	; 255
    61de:	01 90       	ld	r0, Z+
    61e0:	f0 81       	ld	r31, Z
    61e2:	e0 2d       	mov	r30, r0
    61e4:	85 81       	ldd	r24, Z+5	; 0x05
    61e6:	61 e0       	ldi	r22, 0x01	; 1
    61e8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    61ec:	fe 01       	movw	r30, r28
    61ee:	ee 5b       	subi	r30, 0xBE	; 190
    61f0:	ff 4f       	sbci	r31, 0xFF	; 255
    61f2:	01 90       	ld	r0, Z+
    61f4:	f0 81       	ld	r31, Z
    61f6:	e0 2d       	mov	r30, r0
    61f8:	86 81       	ldd	r24, Z+6	; 0x06
    61fa:	61 e0       	ldi	r22, 0x01	; 1
    61fc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    6200:	fe 01       	movw	r30, r28
    6202:	ee 5b       	subi	r30, 0xBE	; 190
    6204:	ff 4f       	sbci	r31, 0xFF	; 255
    6206:	01 90       	ld	r0, Z+
    6208:	f0 81       	ld	r31, Z
    620a:	e0 2d       	mov	r30, r0
    620c:	87 81       	ldd	r24, Z+7	; 0x07
    620e:	61 e0       	ldi	r22, 0x01	; 1
    6210:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    6214:	8d c0       	rjmp	.+282    	; 0x6330 <HMSSD_enDisplayRealNumber+0x16f0>
						break;
					case 8:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    6216:	fe 01       	movw	r30, r28
    6218:	ee 5b       	subi	r30, 0xBE	; 190
    621a:	ff 4f       	sbci	r31, 0xFF	; 255
    621c:	01 90       	ld	r0, Z+
    621e:	f0 81       	ld	r31, Z
    6220:	e0 2d       	mov	r30, r0
    6222:	81 81       	ldd	r24, Z+1	; 0x01
    6224:	60 e0       	ldi	r22, 0x00	; 0
    6226:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    622a:	fe 01       	movw	r30, r28
    622c:	ee 5b       	subi	r30, 0xBE	; 190
    622e:	ff 4f       	sbci	r31, 0xFF	; 255
    6230:	01 90       	ld	r0, Z+
    6232:	f0 81       	ld	r31, Z
    6234:	e0 2d       	mov	r30, r0
    6236:	82 81       	ldd	r24, Z+2	; 0x02
    6238:	60 e0       	ldi	r22, 0x00	; 0
    623a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    623e:	fe 01       	movw	r30, r28
    6240:	ee 5b       	subi	r30, 0xBE	; 190
    6242:	ff 4f       	sbci	r31, 0xFF	; 255
    6244:	01 90       	ld	r0, Z+
    6246:	f0 81       	ld	r31, Z
    6248:	e0 2d       	mov	r30, r0
    624a:	83 81       	ldd	r24, Z+3	; 0x03
    624c:	60 e0       	ldi	r22, 0x00	; 0
    624e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    6252:	fe 01       	movw	r30, r28
    6254:	ee 5b       	subi	r30, 0xBE	; 190
    6256:	ff 4f       	sbci	r31, 0xFF	; 255
    6258:	01 90       	ld	r0, Z+
    625a:	f0 81       	ld	r31, Z
    625c:	e0 2d       	mov	r30, r0
    625e:	84 81       	ldd	r24, Z+4	; 0x04
    6260:	60 e0       	ldi	r22, 0x00	; 0
    6262:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    6266:	fe 01       	movw	r30, r28
    6268:	ee 5b       	subi	r30, 0xBE	; 190
    626a:	ff 4f       	sbci	r31, 0xFF	; 255
    626c:	01 90       	ld	r0, Z+
    626e:	f0 81       	ld	r31, Z
    6270:	e0 2d       	mov	r30, r0
    6272:	85 81       	ldd	r24, Z+5	; 0x05
    6274:	60 e0       	ldi	r22, 0x00	; 0
    6276:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    627a:	fe 01       	movw	r30, r28
    627c:	ee 5b       	subi	r30, 0xBE	; 190
    627e:	ff 4f       	sbci	r31, 0xFF	; 255
    6280:	01 90       	ld	r0, Z+
    6282:	f0 81       	ld	r31, Z
    6284:	e0 2d       	mov	r30, r0
    6286:	86 81       	ldd	r24, Z+6	; 0x06
    6288:	60 e0       	ldi	r22, 0x00	; 0
    628a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    628e:	fe 01       	movw	r30, r28
    6290:	ee 5b       	subi	r30, 0xBE	; 190
    6292:	ff 4f       	sbci	r31, 0xFF	; 255
    6294:	01 90       	ld	r0, Z+
    6296:	f0 81       	ld	r31, Z
    6298:	e0 2d       	mov	r30, r0
    629a:	87 81       	ldd	r24, Z+7	; 0x07
    629c:	60 e0       	ldi	r22, 0x00	; 0
    629e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    62a2:	46 c0       	rjmp	.+140    	; 0x6330 <HMSSD_enDisplayRealNumber+0x16f0>
						break;
					case 9:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    62a4:	fe 01       	movw	r30, r28
    62a6:	ee 5b       	subi	r30, 0xBE	; 190
    62a8:	ff 4f       	sbci	r31, 0xFF	; 255
    62aa:	01 90       	ld	r0, Z+
    62ac:	f0 81       	ld	r31, Z
    62ae:	e0 2d       	mov	r30, r0
    62b0:	81 81       	ldd	r24, Z+1	; 0x01
    62b2:	60 e0       	ldi	r22, 0x00	; 0
    62b4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    62b8:	fe 01       	movw	r30, r28
    62ba:	ee 5b       	subi	r30, 0xBE	; 190
    62bc:	ff 4f       	sbci	r31, 0xFF	; 255
    62be:	01 90       	ld	r0, Z+
    62c0:	f0 81       	ld	r31, Z
    62c2:	e0 2d       	mov	r30, r0
    62c4:	82 81       	ldd	r24, Z+2	; 0x02
    62c6:	60 e0       	ldi	r22, 0x00	; 0
    62c8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    62cc:	fe 01       	movw	r30, r28
    62ce:	ee 5b       	subi	r30, 0xBE	; 190
    62d0:	ff 4f       	sbci	r31, 0xFF	; 255
    62d2:	01 90       	ld	r0, Z+
    62d4:	f0 81       	ld	r31, Z
    62d6:	e0 2d       	mov	r30, r0
    62d8:	83 81       	ldd	r24, Z+3	; 0x03
    62da:	60 e0       	ldi	r22, 0x00	; 0
    62dc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    62e0:	fe 01       	movw	r30, r28
    62e2:	ee 5b       	subi	r30, 0xBE	; 190
    62e4:	ff 4f       	sbci	r31, 0xFF	; 255
    62e6:	01 90       	ld	r0, Z+
    62e8:	f0 81       	ld	r31, Z
    62ea:	e0 2d       	mov	r30, r0
    62ec:	84 81       	ldd	r24, Z+4	; 0x04
    62ee:	60 e0       	ldi	r22, 0x00	; 0
    62f0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    62f4:	fe 01       	movw	r30, r28
    62f6:	ee 5b       	subi	r30, 0xBE	; 190
    62f8:	ff 4f       	sbci	r31, 0xFF	; 255
    62fa:	01 90       	ld	r0, Z+
    62fc:	f0 81       	ld	r31, Z
    62fe:	e0 2d       	mov	r30, r0
    6300:	85 81       	ldd	r24, Z+5	; 0x05
    6302:	61 e0       	ldi	r22, 0x01	; 1
    6304:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    6308:	fe 01       	movw	r30, r28
    630a:	ee 5b       	subi	r30, 0xBE	; 190
    630c:	ff 4f       	sbci	r31, 0xFF	; 255
    630e:	01 90       	ld	r0, Z+
    6310:	f0 81       	ld	r31, Z
    6312:	e0 2d       	mov	r30, r0
    6314:	86 81       	ldd	r24, Z+6	; 0x06
    6316:	60 e0       	ldi	r22, 0x00	; 0
    6318:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    631c:	fe 01       	movw	r30, r28
    631e:	ee 5b       	subi	r30, 0xBE	; 190
    6320:	ff 4f       	sbci	r31, 0xFF	; 255
    6322:	01 90       	ld	r0, Z+
    6324:	f0 81       	ld	r31, Z
    6326:	e0 2d       	mov	r30, r0
    6328:	87 81       	ldd	r24, Z+7	; 0x07
    632a:	60 e0       	ldi	r22, 0x00	; 0
    632c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    6330:	80 e0       	ldi	r24, 0x00	; 0
    6332:	90 e0       	ldi	r25, 0x00	; 0
    6334:	a0 e2       	ldi	r26, 0x20	; 32
    6336:	b1 e4       	ldi	r27, 0x41	; 65
    6338:	89 8f       	std	Y+25, r24	; 0x19
    633a:	9a 8f       	std	Y+26, r25	; 0x1a
    633c:	ab 8f       	std	Y+27, r26	; 0x1b
    633e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6340:	69 8d       	ldd	r22, Y+25	; 0x19
    6342:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6344:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6346:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6348:	20 e0       	ldi	r18, 0x00	; 0
    634a:	30 e0       	ldi	r19, 0x00	; 0
    634c:	4a e7       	ldi	r20, 0x7A	; 122
    634e:	55 e4       	ldi	r21, 0x45	; 69
    6350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6354:	dc 01       	movw	r26, r24
    6356:	cb 01       	movw	r24, r22
    6358:	8d 8b       	std	Y+21, r24	; 0x15
    635a:	9e 8b       	std	Y+22, r25	; 0x16
    635c:	af 8b       	std	Y+23, r26	; 0x17
    635e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6360:	6d 89       	ldd	r22, Y+21	; 0x15
    6362:	7e 89       	ldd	r23, Y+22	; 0x16
    6364:	8f 89       	ldd	r24, Y+23	; 0x17
    6366:	98 8d       	ldd	r25, Y+24	; 0x18
    6368:	20 e0       	ldi	r18, 0x00	; 0
    636a:	30 e0       	ldi	r19, 0x00	; 0
    636c:	40 e8       	ldi	r20, 0x80	; 128
    636e:	5f e3       	ldi	r21, 0x3F	; 63
    6370:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6374:	88 23       	and	r24, r24
    6376:	2c f4       	brge	.+10     	; 0x6382 <HMSSD_enDisplayRealNumber+0x1742>
		__ticks = 1;
    6378:	81 e0       	ldi	r24, 0x01	; 1
    637a:	90 e0       	ldi	r25, 0x00	; 0
    637c:	9c 8b       	std	Y+20, r25	; 0x14
    637e:	8b 8b       	std	Y+19, r24	; 0x13
    6380:	3f c0       	rjmp	.+126    	; 0x6400 <HMSSD_enDisplayRealNumber+0x17c0>
	else if (__tmp > 65535)
    6382:	6d 89       	ldd	r22, Y+21	; 0x15
    6384:	7e 89       	ldd	r23, Y+22	; 0x16
    6386:	8f 89       	ldd	r24, Y+23	; 0x17
    6388:	98 8d       	ldd	r25, Y+24	; 0x18
    638a:	20 e0       	ldi	r18, 0x00	; 0
    638c:	3f ef       	ldi	r19, 0xFF	; 255
    638e:	4f e7       	ldi	r20, 0x7F	; 127
    6390:	57 e4       	ldi	r21, 0x47	; 71
    6392:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6396:	18 16       	cp	r1, r24
    6398:	4c f5       	brge	.+82     	; 0x63ec <HMSSD_enDisplayRealNumber+0x17ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    639a:	69 8d       	ldd	r22, Y+25	; 0x19
    639c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    639e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    63a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    63a2:	20 e0       	ldi	r18, 0x00	; 0
    63a4:	30 e0       	ldi	r19, 0x00	; 0
    63a6:	40 e2       	ldi	r20, 0x20	; 32
    63a8:	51 e4       	ldi	r21, 0x41	; 65
    63aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    63ae:	dc 01       	movw	r26, r24
    63b0:	cb 01       	movw	r24, r22
    63b2:	bc 01       	movw	r22, r24
    63b4:	cd 01       	movw	r24, r26
    63b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63ba:	dc 01       	movw	r26, r24
    63bc:	cb 01       	movw	r24, r22
    63be:	9c 8b       	std	Y+20, r25	; 0x14
    63c0:	8b 8b       	std	Y+19, r24	; 0x13
    63c2:	0f c0       	rjmp	.+30     	; 0x63e2 <HMSSD_enDisplayRealNumber+0x17a2>
    63c4:	80 e9       	ldi	r24, 0x90	; 144
    63c6:	91 e0       	ldi	r25, 0x01	; 1
    63c8:	9a 8b       	std	Y+18, r25	; 0x12
    63ca:	89 8b       	std	Y+17, r24	; 0x11
    63cc:	89 89       	ldd	r24, Y+17	; 0x11
    63ce:	9a 89       	ldd	r25, Y+18	; 0x12
    63d0:	01 97       	sbiw	r24, 0x01	; 1
    63d2:	f1 f7       	brne	.-4      	; 0x63d0 <HMSSD_enDisplayRealNumber+0x1790>
    63d4:	9a 8b       	std	Y+18, r25	; 0x12
    63d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63d8:	8b 89       	ldd	r24, Y+19	; 0x13
    63da:	9c 89       	ldd	r25, Y+20	; 0x14
    63dc:	01 97       	sbiw	r24, 0x01	; 1
    63de:	9c 8b       	std	Y+20, r25	; 0x14
    63e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63e2:	8b 89       	ldd	r24, Y+19	; 0x13
    63e4:	9c 89       	ldd	r25, Y+20	; 0x14
    63e6:	00 97       	sbiw	r24, 0x00	; 0
    63e8:	69 f7       	brne	.-38     	; 0x63c4 <HMSSD_enDisplayRealNumber+0x1784>
    63ea:	14 c0       	rjmp	.+40     	; 0x6414 <HMSSD_enDisplayRealNumber+0x17d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63ec:	6d 89       	ldd	r22, Y+21	; 0x15
    63ee:	7e 89       	ldd	r23, Y+22	; 0x16
    63f0:	8f 89       	ldd	r24, Y+23	; 0x17
    63f2:	98 8d       	ldd	r25, Y+24	; 0x18
    63f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63f8:	dc 01       	movw	r26, r24
    63fa:	cb 01       	movw	r24, r22
    63fc:	9c 8b       	std	Y+20, r25	; 0x14
    63fe:	8b 8b       	std	Y+19, r24	; 0x13
    6400:	8b 89       	ldd	r24, Y+19	; 0x13
    6402:	9c 89       	ldd	r25, Y+20	; 0x14
    6404:	98 8b       	std	Y+16, r25	; 0x10
    6406:	8f 87       	std	Y+15, r24	; 0x0f
    6408:	8f 85       	ldd	r24, Y+15	; 0x0f
    640a:	98 89       	ldd	r25, Y+16	; 0x10
    640c:	01 97       	sbiw	r24, 0x01	; 1
    640e:	f1 f7       	brne	.-4      	; 0x640c <HMSSD_enDisplayRealNumber+0x17cc>
    6410:	98 8b       	std	Y+16, r25	; 0x10
    6412:	8f 87       	std	Y+15, r24	; 0x0f
						break;
					} // switch on Tens --> CA

					_delay_ms(10);
					// Disable SSD1
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN1, LOW);
    6414:	fe 01       	movw	r30, r28
    6416:	ee 5b       	subi	r30, 0xBE	; 190
    6418:	ff 4f       	sbci	r31, 0xFF	; 255
    641a:	01 90       	ld	r0, Z+
    641c:	f0 81       	ld	r31, Z
    641e:	e0 2d       	mov	r30, r0
    6420:	81 85       	ldd	r24, Z+9	; 0x09
    6422:	60 e0       	ldi	r22, 0x00	; 0
    6424:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					// Disable DP
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_DP, HIGH);
    6428:	fe 01       	movw	r30, r28
    642a:	ee 5b       	subi	r30, 0xBE	; 190
    642c:	ff 4f       	sbci	r31, 0xFF	; 255
    642e:	01 90       	ld	r0, Z+
    6430:	f0 81       	ld	r31, Z
    6432:	e0 2d       	mov	r30, r0
    6434:	80 85       	ldd	r24, Z+8	; 0x08
    6436:	61 e0       	ldi	r22, 0x01	; 1
    6438:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					// Enable SSD2
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN2, HIGH);
    643c:	fe 01       	movw	r30, r28
    643e:	ee 5b       	subi	r30, 0xBE	; 190
    6440:	ff 4f       	sbci	r31, 0xFF	; 255
    6442:	01 90       	ld	r0, Z+
    6444:	f0 81       	ld	r31, Z
    6446:	e0 2d       	mov	r30, r0
    6448:	82 85       	ldd	r24, Z+10	; 0x0a
    644a:	61 e0       	ldi	r22, 0x01	; 1
    644c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>

					switch (Local_u8Units) {
    6450:	8b ad       	ldd	r24, Y+59	; 0x3b
    6452:	28 2f       	mov	r18, r24
    6454:	30 e0       	ldi	r19, 0x00	; 0
    6456:	26 96       	adiw	r28, 0x06	; 6
    6458:	3f af       	std	Y+63, r19	; 0x3f
    645a:	2e af       	std	Y+62, r18	; 0x3e
    645c:	26 97       	sbiw	r28, 0x06	; 6
    645e:	26 96       	adiw	r28, 0x06	; 6
    6460:	8e ad       	ldd	r24, Y+62	; 0x3e
    6462:	9f ad       	ldd	r25, Y+63	; 0x3f
    6464:	26 97       	sbiw	r28, 0x06	; 6
    6466:	84 30       	cpi	r24, 0x04	; 4
    6468:	91 05       	cpc	r25, r1
    646a:	09 f4       	brne	.+2      	; 0x646e <HMSSD_enDisplayRealNumber+0x182e>
    646c:	7c c1       	rjmp	.+760    	; 0x6766 <HMSSD_enDisplayRealNumber+0x1b26>
    646e:	26 96       	adiw	r28, 0x06	; 6
    6470:	2e ad       	ldd	r18, Y+62	; 0x3e
    6472:	3f ad       	ldd	r19, Y+63	; 0x3f
    6474:	26 97       	sbiw	r28, 0x06	; 6
    6476:	25 30       	cpi	r18, 0x05	; 5
    6478:	31 05       	cpc	r19, r1
    647a:	44 f5       	brge	.+80     	; 0x64cc <HMSSD_enDisplayRealNumber+0x188c>
    647c:	26 96       	adiw	r28, 0x06	; 6
    647e:	8e ad       	ldd	r24, Y+62	; 0x3e
    6480:	9f ad       	ldd	r25, Y+63	; 0x3f
    6482:	26 97       	sbiw	r28, 0x06	; 6
    6484:	81 30       	cpi	r24, 0x01	; 1
    6486:	91 05       	cpc	r25, r1
    6488:	09 f4       	brne	.+2      	; 0x648c <HMSSD_enDisplayRealNumber+0x184c>
    648a:	98 c0       	rjmp	.+304    	; 0x65bc <HMSSD_enDisplayRealNumber+0x197c>
    648c:	26 96       	adiw	r28, 0x06	; 6
    648e:	2e ad       	ldd	r18, Y+62	; 0x3e
    6490:	3f ad       	ldd	r19, Y+63	; 0x3f
    6492:	26 97       	sbiw	r28, 0x06	; 6
    6494:	22 30       	cpi	r18, 0x02	; 2
    6496:	31 05       	cpc	r19, r1
    6498:	44 f4       	brge	.+16     	; 0x64aa <HMSSD_enDisplayRealNumber+0x186a>
    649a:	26 96       	adiw	r28, 0x06	; 6
    649c:	8e ad       	ldd	r24, Y+62	; 0x3e
    649e:	9f ad       	ldd	r25, Y+63	; 0x3f
    64a0:	26 97       	sbiw	r28, 0x06	; 6
    64a2:	00 97       	sbiw	r24, 0x00	; 0
    64a4:	09 f4       	brne	.+2      	; 0x64a8 <HMSSD_enDisplayRealNumber+0x1868>
    64a6:	43 c0       	rjmp	.+134    	; 0x652e <HMSSD_enDisplayRealNumber+0x18ee>
    64a8:	07 c3       	rjmp	.+1550   	; 0x6ab8 <HMSSD_enDisplayRealNumber+0x1e78>
    64aa:	26 96       	adiw	r28, 0x06	; 6
    64ac:	2e ad       	ldd	r18, Y+62	; 0x3e
    64ae:	3f ad       	ldd	r19, Y+63	; 0x3f
    64b0:	26 97       	sbiw	r28, 0x06	; 6
    64b2:	22 30       	cpi	r18, 0x02	; 2
    64b4:	31 05       	cpc	r19, r1
    64b6:	09 f4       	brne	.+2      	; 0x64ba <HMSSD_enDisplayRealNumber+0x187a>
    64b8:	c8 c0       	rjmp	.+400    	; 0x664a <HMSSD_enDisplayRealNumber+0x1a0a>
    64ba:	26 96       	adiw	r28, 0x06	; 6
    64bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    64be:	9f ad       	ldd	r25, Y+63	; 0x3f
    64c0:	26 97       	sbiw	r28, 0x06	; 6
    64c2:	83 30       	cpi	r24, 0x03	; 3
    64c4:	91 05       	cpc	r25, r1
    64c6:	09 f4       	brne	.+2      	; 0x64ca <HMSSD_enDisplayRealNumber+0x188a>
    64c8:	07 c1       	rjmp	.+526    	; 0x66d8 <HMSSD_enDisplayRealNumber+0x1a98>
    64ca:	f6 c2       	rjmp	.+1516   	; 0x6ab8 <HMSSD_enDisplayRealNumber+0x1e78>
    64cc:	26 96       	adiw	r28, 0x06	; 6
    64ce:	2e ad       	ldd	r18, Y+62	; 0x3e
    64d0:	3f ad       	ldd	r19, Y+63	; 0x3f
    64d2:	26 97       	sbiw	r28, 0x06	; 6
    64d4:	27 30       	cpi	r18, 0x07	; 7
    64d6:	31 05       	cpc	r19, r1
    64d8:	09 f4       	brne	.+2      	; 0x64dc <HMSSD_enDisplayRealNumber+0x189c>
    64da:	1a c2       	rjmp	.+1076   	; 0x6910 <HMSSD_enDisplayRealNumber+0x1cd0>
    64dc:	26 96       	adiw	r28, 0x06	; 6
    64de:	8e ad       	ldd	r24, Y+62	; 0x3e
    64e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    64e2:	26 97       	sbiw	r28, 0x06	; 6
    64e4:	88 30       	cpi	r24, 0x08	; 8
    64e6:	91 05       	cpc	r25, r1
    64e8:	8c f4       	brge	.+34     	; 0x650c <HMSSD_enDisplayRealNumber+0x18cc>
    64ea:	26 96       	adiw	r28, 0x06	; 6
    64ec:	2e ad       	ldd	r18, Y+62	; 0x3e
    64ee:	3f ad       	ldd	r19, Y+63	; 0x3f
    64f0:	26 97       	sbiw	r28, 0x06	; 6
    64f2:	25 30       	cpi	r18, 0x05	; 5
    64f4:	31 05       	cpc	r19, r1
    64f6:	09 f4       	brne	.+2      	; 0x64fa <HMSSD_enDisplayRealNumber+0x18ba>
    64f8:	7d c1       	rjmp	.+762    	; 0x67f4 <HMSSD_enDisplayRealNumber+0x1bb4>
    64fa:	26 96       	adiw	r28, 0x06	; 6
    64fc:	8e ad       	ldd	r24, Y+62	; 0x3e
    64fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    6500:	26 97       	sbiw	r28, 0x06	; 6
    6502:	86 30       	cpi	r24, 0x06	; 6
    6504:	91 05       	cpc	r25, r1
    6506:	09 f4       	brne	.+2      	; 0x650a <HMSSD_enDisplayRealNumber+0x18ca>
    6508:	bc c1       	rjmp	.+888    	; 0x6882 <HMSSD_enDisplayRealNumber+0x1c42>
    650a:	d6 c2       	rjmp	.+1452   	; 0x6ab8 <HMSSD_enDisplayRealNumber+0x1e78>
    650c:	26 96       	adiw	r28, 0x06	; 6
    650e:	2e ad       	ldd	r18, Y+62	; 0x3e
    6510:	3f ad       	ldd	r19, Y+63	; 0x3f
    6512:	26 97       	sbiw	r28, 0x06	; 6
    6514:	28 30       	cpi	r18, 0x08	; 8
    6516:	31 05       	cpc	r19, r1
    6518:	09 f4       	brne	.+2      	; 0x651c <HMSSD_enDisplayRealNumber+0x18dc>
    651a:	41 c2       	rjmp	.+1154   	; 0x699e <HMSSD_enDisplayRealNumber+0x1d5e>
    651c:	26 96       	adiw	r28, 0x06	; 6
    651e:	8e ad       	ldd	r24, Y+62	; 0x3e
    6520:	9f ad       	ldd	r25, Y+63	; 0x3f
    6522:	26 97       	sbiw	r28, 0x06	; 6
    6524:	89 30       	cpi	r24, 0x09	; 9
    6526:	91 05       	cpc	r25, r1
    6528:	09 f4       	brne	.+2      	; 0x652c <HMSSD_enDisplayRealNumber+0x18ec>
    652a:	80 c2       	rjmp	.+1280   	; 0x6a2c <HMSSD_enDisplayRealNumber+0x1dec>
    652c:	c5 c2       	rjmp	.+1418   	; 0x6ab8 <HMSSD_enDisplayRealNumber+0x1e78>
					case 0:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    652e:	fe 01       	movw	r30, r28
    6530:	ee 5b       	subi	r30, 0xBE	; 190
    6532:	ff 4f       	sbci	r31, 0xFF	; 255
    6534:	01 90       	ld	r0, Z+
    6536:	f0 81       	ld	r31, Z
    6538:	e0 2d       	mov	r30, r0
    653a:	81 81       	ldd	r24, Z+1	; 0x01
    653c:	60 e0       	ldi	r22, 0x00	; 0
    653e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    6542:	fe 01       	movw	r30, r28
    6544:	ee 5b       	subi	r30, 0xBE	; 190
    6546:	ff 4f       	sbci	r31, 0xFF	; 255
    6548:	01 90       	ld	r0, Z+
    654a:	f0 81       	ld	r31, Z
    654c:	e0 2d       	mov	r30, r0
    654e:	82 81       	ldd	r24, Z+2	; 0x02
    6550:	60 e0       	ldi	r22, 0x00	; 0
    6552:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    6556:	fe 01       	movw	r30, r28
    6558:	ee 5b       	subi	r30, 0xBE	; 190
    655a:	ff 4f       	sbci	r31, 0xFF	; 255
    655c:	01 90       	ld	r0, Z+
    655e:	f0 81       	ld	r31, Z
    6560:	e0 2d       	mov	r30, r0
    6562:	83 81       	ldd	r24, Z+3	; 0x03
    6564:	60 e0       	ldi	r22, 0x00	; 0
    6566:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    656a:	fe 01       	movw	r30, r28
    656c:	ee 5b       	subi	r30, 0xBE	; 190
    656e:	ff 4f       	sbci	r31, 0xFF	; 255
    6570:	01 90       	ld	r0, Z+
    6572:	f0 81       	ld	r31, Z
    6574:	e0 2d       	mov	r30, r0
    6576:	84 81       	ldd	r24, Z+4	; 0x04
    6578:	60 e0       	ldi	r22, 0x00	; 0
    657a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    657e:	fe 01       	movw	r30, r28
    6580:	ee 5b       	subi	r30, 0xBE	; 190
    6582:	ff 4f       	sbci	r31, 0xFF	; 255
    6584:	01 90       	ld	r0, Z+
    6586:	f0 81       	ld	r31, Z
    6588:	e0 2d       	mov	r30, r0
    658a:	85 81       	ldd	r24, Z+5	; 0x05
    658c:	60 e0       	ldi	r22, 0x00	; 0
    658e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    6592:	fe 01       	movw	r30, r28
    6594:	ee 5b       	subi	r30, 0xBE	; 190
    6596:	ff 4f       	sbci	r31, 0xFF	; 255
    6598:	01 90       	ld	r0, Z+
    659a:	f0 81       	ld	r31, Z
    659c:	e0 2d       	mov	r30, r0
    659e:	86 81       	ldd	r24, Z+6	; 0x06
    65a0:	60 e0       	ldi	r22, 0x00	; 0
    65a2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    65a6:	fe 01       	movw	r30, r28
    65a8:	ee 5b       	subi	r30, 0xBE	; 190
    65aa:	ff 4f       	sbci	r31, 0xFF	; 255
    65ac:	01 90       	ld	r0, Z+
    65ae:	f0 81       	ld	r31, Z
    65b0:	e0 2d       	mov	r30, r0
    65b2:	87 81       	ldd	r24, Z+7	; 0x07
    65b4:	61 e0       	ldi	r22, 0x01	; 1
    65b6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    65ba:	7e c2       	rjmp	.+1276   	; 0x6ab8 <HMSSD_enDisplayRealNumber+0x1e78>
						break;
					case 1:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    65bc:	fe 01       	movw	r30, r28
    65be:	ee 5b       	subi	r30, 0xBE	; 190
    65c0:	ff 4f       	sbci	r31, 0xFF	; 255
    65c2:	01 90       	ld	r0, Z+
    65c4:	f0 81       	ld	r31, Z
    65c6:	e0 2d       	mov	r30, r0
    65c8:	81 81       	ldd	r24, Z+1	; 0x01
    65ca:	61 e0       	ldi	r22, 0x01	; 1
    65cc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    65d0:	fe 01       	movw	r30, r28
    65d2:	ee 5b       	subi	r30, 0xBE	; 190
    65d4:	ff 4f       	sbci	r31, 0xFF	; 255
    65d6:	01 90       	ld	r0, Z+
    65d8:	f0 81       	ld	r31, Z
    65da:	e0 2d       	mov	r30, r0
    65dc:	82 81       	ldd	r24, Z+2	; 0x02
    65de:	60 e0       	ldi	r22, 0x00	; 0
    65e0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    65e4:	fe 01       	movw	r30, r28
    65e6:	ee 5b       	subi	r30, 0xBE	; 190
    65e8:	ff 4f       	sbci	r31, 0xFF	; 255
    65ea:	01 90       	ld	r0, Z+
    65ec:	f0 81       	ld	r31, Z
    65ee:	e0 2d       	mov	r30, r0
    65f0:	83 81       	ldd	r24, Z+3	; 0x03
    65f2:	60 e0       	ldi	r22, 0x00	; 0
    65f4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    65f8:	fe 01       	movw	r30, r28
    65fa:	ee 5b       	subi	r30, 0xBE	; 190
    65fc:	ff 4f       	sbci	r31, 0xFF	; 255
    65fe:	01 90       	ld	r0, Z+
    6600:	f0 81       	ld	r31, Z
    6602:	e0 2d       	mov	r30, r0
    6604:	84 81       	ldd	r24, Z+4	; 0x04
    6606:	61 e0       	ldi	r22, 0x01	; 1
    6608:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    660c:	fe 01       	movw	r30, r28
    660e:	ee 5b       	subi	r30, 0xBE	; 190
    6610:	ff 4f       	sbci	r31, 0xFF	; 255
    6612:	01 90       	ld	r0, Z+
    6614:	f0 81       	ld	r31, Z
    6616:	e0 2d       	mov	r30, r0
    6618:	85 81       	ldd	r24, Z+5	; 0x05
    661a:	61 e0       	ldi	r22, 0x01	; 1
    661c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    6620:	fe 01       	movw	r30, r28
    6622:	ee 5b       	subi	r30, 0xBE	; 190
    6624:	ff 4f       	sbci	r31, 0xFF	; 255
    6626:	01 90       	ld	r0, Z+
    6628:	f0 81       	ld	r31, Z
    662a:	e0 2d       	mov	r30, r0
    662c:	86 81       	ldd	r24, Z+6	; 0x06
    662e:	61 e0       	ldi	r22, 0x01	; 1
    6630:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    6634:	fe 01       	movw	r30, r28
    6636:	ee 5b       	subi	r30, 0xBE	; 190
    6638:	ff 4f       	sbci	r31, 0xFF	; 255
    663a:	01 90       	ld	r0, Z+
    663c:	f0 81       	ld	r31, Z
    663e:	e0 2d       	mov	r30, r0
    6640:	87 81       	ldd	r24, Z+7	; 0x07
    6642:	61 e0       	ldi	r22, 0x01	; 1
    6644:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    6648:	37 c2       	rjmp	.+1134   	; 0x6ab8 <HMSSD_enDisplayRealNumber+0x1e78>
						break;
					case 2:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    664a:	fe 01       	movw	r30, r28
    664c:	ee 5b       	subi	r30, 0xBE	; 190
    664e:	ff 4f       	sbci	r31, 0xFF	; 255
    6650:	01 90       	ld	r0, Z+
    6652:	f0 81       	ld	r31, Z
    6654:	e0 2d       	mov	r30, r0
    6656:	81 81       	ldd	r24, Z+1	; 0x01
    6658:	60 e0       	ldi	r22, 0x00	; 0
    665a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    665e:	fe 01       	movw	r30, r28
    6660:	ee 5b       	subi	r30, 0xBE	; 190
    6662:	ff 4f       	sbci	r31, 0xFF	; 255
    6664:	01 90       	ld	r0, Z+
    6666:	f0 81       	ld	r31, Z
    6668:	e0 2d       	mov	r30, r0
    666a:	82 81       	ldd	r24, Z+2	; 0x02
    666c:	60 e0       	ldi	r22, 0x00	; 0
    666e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, HIGH);
    6672:	fe 01       	movw	r30, r28
    6674:	ee 5b       	subi	r30, 0xBE	; 190
    6676:	ff 4f       	sbci	r31, 0xFF	; 255
    6678:	01 90       	ld	r0, Z+
    667a:	f0 81       	ld	r31, Z
    667c:	e0 2d       	mov	r30, r0
    667e:	83 81       	ldd	r24, Z+3	; 0x03
    6680:	61 e0       	ldi	r22, 0x01	; 1
    6682:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    6686:	fe 01       	movw	r30, r28
    6688:	ee 5b       	subi	r30, 0xBE	; 190
    668a:	ff 4f       	sbci	r31, 0xFF	; 255
    668c:	01 90       	ld	r0, Z+
    668e:	f0 81       	ld	r31, Z
    6690:	e0 2d       	mov	r30, r0
    6692:	84 81       	ldd	r24, Z+4	; 0x04
    6694:	60 e0       	ldi	r22, 0x00	; 0
    6696:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    669a:	fe 01       	movw	r30, r28
    669c:	ee 5b       	subi	r30, 0xBE	; 190
    669e:	ff 4f       	sbci	r31, 0xFF	; 255
    66a0:	01 90       	ld	r0, Z+
    66a2:	f0 81       	ld	r31, Z
    66a4:	e0 2d       	mov	r30, r0
    66a6:	85 81       	ldd	r24, Z+5	; 0x05
    66a8:	60 e0       	ldi	r22, 0x00	; 0
    66aa:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    66ae:	fe 01       	movw	r30, r28
    66b0:	ee 5b       	subi	r30, 0xBE	; 190
    66b2:	ff 4f       	sbci	r31, 0xFF	; 255
    66b4:	01 90       	ld	r0, Z+
    66b6:	f0 81       	ld	r31, Z
    66b8:	e0 2d       	mov	r30, r0
    66ba:	86 81       	ldd	r24, Z+6	; 0x06
    66bc:	61 e0       	ldi	r22, 0x01	; 1
    66be:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    66c2:	fe 01       	movw	r30, r28
    66c4:	ee 5b       	subi	r30, 0xBE	; 190
    66c6:	ff 4f       	sbci	r31, 0xFF	; 255
    66c8:	01 90       	ld	r0, Z+
    66ca:	f0 81       	ld	r31, Z
    66cc:	e0 2d       	mov	r30, r0
    66ce:	87 81       	ldd	r24, Z+7	; 0x07
    66d0:	60 e0       	ldi	r22, 0x00	; 0
    66d2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    66d6:	f0 c1       	rjmp	.+992    	; 0x6ab8 <HMSSD_enDisplayRealNumber+0x1e78>
						break;
					case 3:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    66d8:	fe 01       	movw	r30, r28
    66da:	ee 5b       	subi	r30, 0xBE	; 190
    66dc:	ff 4f       	sbci	r31, 0xFF	; 255
    66de:	01 90       	ld	r0, Z+
    66e0:	f0 81       	ld	r31, Z
    66e2:	e0 2d       	mov	r30, r0
    66e4:	81 81       	ldd	r24, Z+1	; 0x01
    66e6:	60 e0       	ldi	r22, 0x00	; 0
    66e8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    66ec:	fe 01       	movw	r30, r28
    66ee:	ee 5b       	subi	r30, 0xBE	; 190
    66f0:	ff 4f       	sbci	r31, 0xFF	; 255
    66f2:	01 90       	ld	r0, Z+
    66f4:	f0 81       	ld	r31, Z
    66f6:	e0 2d       	mov	r30, r0
    66f8:	82 81       	ldd	r24, Z+2	; 0x02
    66fa:	60 e0       	ldi	r22, 0x00	; 0
    66fc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    6700:	fe 01       	movw	r30, r28
    6702:	ee 5b       	subi	r30, 0xBE	; 190
    6704:	ff 4f       	sbci	r31, 0xFF	; 255
    6706:	01 90       	ld	r0, Z+
    6708:	f0 81       	ld	r31, Z
    670a:	e0 2d       	mov	r30, r0
    670c:	83 81       	ldd	r24, Z+3	; 0x03
    670e:	60 e0       	ldi	r22, 0x00	; 0
    6710:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    6714:	fe 01       	movw	r30, r28
    6716:	ee 5b       	subi	r30, 0xBE	; 190
    6718:	ff 4f       	sbci	r31, 0xFF	; 255
    671a:	01 90       	ld	r0, Z+
    671c:	f0 81       	ld	r31, Z
    671e:	e0 2d       	mov	r30, r0
    6720:	84 81       	ldd	r24, Z+4	; 0x04
    6722:	60 e0       	ldi	r22, 0x00	; 0
    6724:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    6728:	fe 01       	movw	r30, r28
    672a:	ee 5b       	subi	r30, 0xBE	; 190
    672c:	ff 4f       	sbci	r31, 0xFF	; 255
    672e:	01 90       	ld	r0, Z+
    6730:	f0 81       	ld	r31, Z
    6732:	e0 2d       	mov	r30, r0
    6734:	85 81       	ldd	r24, Z+5	; 0x05
    6736:	61 e0       	ldi	r22, 0x01	; 1
    6738:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    673c:	fe 01       	movw	r30, r28
    673e:	ee 5b       	subi	r30, 0xBE	; 190
    6740:	ff 4f       	sbci	r31, 0xFF	; 255
    6742:	01 90       	ld	r0, Z+
    6744:	f0 81       	ld	r31, Z
    6746:	e0 2d       	mov	r30, r0
    6748:	86 81       	ldd	r24, Z+6	; 0x06
    674a:	61 e0       	ldi	r22, 0x01	; 1
    674c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    6750:	fe 01       	movw	r30, r28
    6752:	ee 5b       	subi	r30, 0xBE	; 190
    6754:	ff 4f       	sbci	r31, 0xFF	; 255
    6756:	01 90       	ld	r0, Z+
    6758:	f0 81       	ld	r31, Z
    675a:	e0 2d       	mov	r30, r0
    675c:	87 81       	ldd	r24, Z+7	; 0x07
    675e:	60 e0       	ldi	r22, 0x00	; 0
    6760:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    6764:	a9 c1       	rjmp	.+850    	; 0x6ab8 <HMSSD_enDisplayRealNumber+0x1e78>
						break;
					case 4:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, HIGH);
    6766:	fe 01       	movw	r30, r28
    6768:	ee 5b       	subi	r30, 0xBE	; 190
    676a:	ff 4f       	sbci	r31, 0xFF	; 255
    676c:	01 90       	ld	r0, Z+
    676e:	f0 81       	ld	r31, Z
    6770:	e0 2d       	mov	r30, r0
    6772:	81 81       	ldd	r24, Z+1	; 0x01
    6774:	61 e0       	ldi	r22, 0x01	; 1
    6776:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    677a:	fe 01       	movw	r30, r28
    677c:	ee 5b       	subi	r30, 0xBE	; 190
    677e:	ff 4f       	sbci	r31, 0xFF	; 255
    6780:	01 90       	ld	r0, Z+
    6782:	f0 81       	ld	r31, Z
    6784:	e0 2d       	mov	r30, r0
    6786:	82 81       	ldd	r24, Z+2	; 0x02
    6788:	60 e0       	ldi	r22, 0x00	; 0
    678a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    678e:	fe 01       	movw	r30, r28
    6790:	ee 5b       	subi	r30, 0xBE	; 190
    6792:	ff 4f       	sbci	r31, 0xFF	; 255
    6794:	01 90       	ld	r0, Z+
    6796:	f0 81       	ld	r31, Z
    6798:	e0 2d       	mov	r30, r0
    679a:	83 81       	ldd	r24, Z+3	; 0x03
    679c:	60 e0       	ldi	r22, 0x00	; 0
    679e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    67a2:	fe 01       	movw	r30, r28
    67a4:	ee 5b       	subi	r30, 0xBE	; 190
    67a6:	ff 4f       	sbci	r31, 0xFF	; 255
    67a8:	01 90       	ld	r0, Z+
    67aa:	f0 81       	ld	r31, Z
    67ac:	e0 2d       	mov	r30, r0
    67ae:	84 81       	ldd	r24, Z+4	; 0x04
    67b0:	61 e0       	ldi	r22, 0x01	; 1
    67b2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    67b6:	fe 01       	movw	r30, r28
    67b8:	ee 5b       	subi	r30, 0xBE	; 190
    67ba:	ff 4f       	sbci	r31, 0xFF	; 255
    67bc:	01 90       	ld	r0, Z+
    67be:	f0 81       	ld	r31, Z
    67c0:	e0 2d       	mov	r30, r0
    67c2:	85 81       	ldd	r24, Z+5	; 0x05
    67c4:	61 e0       	ldi	r22, 0x01	; 1
    67c6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    67ca:	fe 01       	movw	r30, r28
    67cc:	ee 5b       	subi	r30, 0xBE	; 190
    67ce:	ff 4f       	sbci	r31, 0xFF	; 255
    67d0:	01 90       	ld	r0, Z+
    67d2:	f0 81       	ld	r31, Z
    67d4:	e0 2d       	mov	r30, r0
    67d6:	86 81       	ldd	r24, Z+6	; 0x06
    67d8:	60 e0       	ldi	r22, 0x00	; 0
    67da:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    67de:	fe 01       	movw	r30, r28
    67e0:	ee 5b       	subi	r30, 0xBE	; 190
    67e2:	ff 4f       	sbci	r31, 0xFF	; 255
    67e4:	01 90       	ld	r0, Z+
    67e6:	f0 81       	ld	r31, Z
    67e8:	e0 2d       	mov	r30, r0
    67ea:	87 81       	ldd	r24, Z+7	; 0x07
    67ec:	60 e0       	ldi	r22, 0x00	; 0
    67ee:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    67f2:	62 c1       	rjmp	.+708    	; 0x6ab8 <HMSSD_enDisplayRealNumber+0x1e78>
						break;
					case 5:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    67f4:	fe 01       	movw	r30, r28
    67f6:	ee 5b       	subi	r30, 0xBE	; 190
    67f8:	ff 4f       	sbci	r31, 0xFF	; 255
    67fa:	01 90       	ld	r0, Z+
    67fc:	f0 81       	ld	r31, Z
    67fe:	e0 2d       	mov	r30, r0
    6800:	81 81       	ldd	r24, Z+1	; 0x01
    6802:	60 e0       	ldi	r22, 0x00	; 0
    6804:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    6808:	fe 01       	movw	r30, r28
    680a:	ee 5b       	subi	r30, 0xBE	; 190
    680c:	ff 4f       	sbci	r31, 0xFF	; 255
    680e:	01 90       	ld	r0, Z+
    6810:	f0 81       	ld	r31, Z
    6812:	e0 2d       	mov	r30, r0
    6814:	82 81       	ldd	r24, Z+2	; 0x02
    6816:	61 e0       	ldi	r22, 0x01	; 1
    6818:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    681c:	fe 01       	movw	r30, r28
    681e:	ee 5b       	subi	r30, 0xBE	; 190
    6820:	ff 4f       	sbci	r31, 0xFF	; 255
    6822:	01 90       	ld	r0, Z+
    6824:	f0 81       	ld	r31, Z
    6826:	e0 2d       	mov	r30, r0
    6828:	83 81       	ldd	r24, Z+3	; 0x03
    682a:	60 e0       	ldi	r22, 0x00	; 0
    682c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    6830:	fe 01       	movw	r30, r28
    6832:	ee 5b       	subi	r30, 0xBE	; 190
    6834:	ff 4f       	sbci	r31, 0xFF	; 255
    6836:	01 90       	ld	r0, Z+
    6838:	f0 81       	ld	r31, Z
    683a:	e0 2d       	mov	r30, r0
    683c:	84 81       	ldd	r24, Z+4	; 0x04
    683e:	60 e0       	ldi	r22, 0x00	; 0
    6840:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    6844:	fe 01       	movw	r30, r28
    6846:	ee 5b       	subi	r30, 0xBE	; 190
    6848:	ff 4f       	sbci	r31, 0xFF	; 255
    684a:	01 90       	ld	r0, Z+
    684c:	f0 81       	ld	r31, Z
    684e:	e0 2d       	mov	r30, r0
    6850:	85 81       	ldd	r24, Z+5	; 0x05
    6852:	61 e0       	ldi	r22, 0x01	; 1
    6854:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    6858:	fe 01       	movw	r30, r28
    685a:	ee 5b       	subi	r30, 0xBE	; 190
    685c:	ff 4f       	sbci	r31, 0xFF	; 255
    685e:	01 90       	ld	r0, Z+
    6860:	f0 81       	ld	r31, Z
    6862:	e0 2d       	mov	r30, r0
    6864:	86 81       	ldd	r24, Z+6	; 0x06
    6866:	60 e0       	ldi	r22, 0x00	; 0
    6868:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    686c:	fe 01       	movw	r30, r28
    686e:	ee 5b       	subi	r30, 0xBE	; 190
    6870:	ff 4f       	sbci	r31, 0xFF	; 255
    6872:	01 90       	ld	r0, Z+
    6874:	f0 81       	ld	r31, Z
    6876:	e0 2d       	mov	r30, r0
    6878:	87 81       	ldd	r24, Z+7	; 0x07
    687a:	60 e0       	ldi	r22, 0x00	; 0
    687c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    6880:	1b c1       	rjmp	.+566    	; 0x6ab8 <HMSSD_enDisplayRealNumber+0x1e78>
						break;
					case 6:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    6882:	fe 01       	movw	r30, r28
    6884:	ee 5b       	subi	r30, 0xBE	; 190
    6886:	ff 4f       	sbci	r31, 0xFF	; 255
    6888:	01 90       	ld	r0, Z+
    688a:	f0 81       	ld	r31, Z
    688c:	e0 2d       	mov	r30, r0
    688e:	81 81       	ldd	r24, Z+1	; 0x01
    6890:	60 e0       	ldi	r22, 0x00	; 0
    6892:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, HIGH);
    6896:	fe 01       	movw	r30, r28
    6898:	ee 5b       	subi	r30, 0xBE	; 190
    689a:	ff 4f       	sbci	r31, 0xFF	; 255
    689c:	01 90       	ld	r0, Z+
    689e:	f0 81       	ld	r31, Z
    68a0:	e0 2d       	mov	r30, r0
    68a2:	82 81       	ldd	r24, Z+2	; 0x02
    68a4:	61 e0       	ldi	r22, 0x01	; 1
    68a6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    68aa:	fe 01       	movw	r30, r28
    68ac:	ee 5b       	subi	r30, 0xBE	; 190
    68ae:	ff 4f       	sbci	r31, 0xFF	; 255
    68b0:	01 90       	ld	r0, Z+
    68b2:	f0 81       	ld	r31, Z
    68b4:	e0 2d       	mov	r30, r0
    68b6:	83 81       	ldd	r24, Z+3	; 0x03
    68b8:	60 e0       	ldi	r22, 0x00	; 0
    68ba:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    68be:	fe 01       	movw	r30, r28
    68c0:	ee 5b       	subi	r30, 0xBE	; 190
    68c2:	ff 4f       	sbci	r31, 0xFF	; 255
    68c4:	01 90       	ld	r0, Z+
    68c6:	f0 81       	ld	r31, Z
    68c8:	e0 2d       	mov	r30, r0
    68ca:	84 81       	ldd	r24, Z+4	; 0x04
    68cc:	60 e0       	ldi	r22, 0x00	; 0
    68ce:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    68d2:	fe 01       	movw	r30, r28
    68d4:	ee 5b       	subi	r30, 0xBE	; 190
    68d6:	ff 4f       	sbci	r31, 0xFF	; 255
    68d8:	01 90       	ld	r0, Z+
    68da:	f0 81       	ld	r31, Z
    68dc:	e0 2d       	mov	r30, r0
    68de:	85 81       	ldd	r24, Z+5	; 0x05
    68e0:	60 e0       	ldi	r22, 0x00	; 0
    68e2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    68e6:	fe 01       	movw	r30, r28
    68e8:	ee 5b       	subi	r30, 0xBE	; 190
    68ea:	ff 4f       	sbci	r31, 0xFF	; 255
    68ec:	01 90       	ld	r0, Z+
    68ee:	f0 81       	ld	r31, Z
    68f0:	e0 2d       	mov	r30, r0
    68f2:	86 81       	ldd	r24, Z+6	; 0x06
    68f4:	60 e0       	ldi	r22, 0x00	; 0
    68f6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    68fa:	fe 01       	movw	r30, r28
    68fc:	ee 5b       	subi	r30, 0xBE	; 190
    68fe:	ff 4f       	sbci	r31, 0xFF	; 255
    6900:	01 90       	ld	r0, Z+
    6902:	f0 81       	ld	r31, Z
    6904:	e0 2d       	mov	r30, r0
    6906:	87 81       	ldd	r24, Z+7	; 0x07
    6908:	60 e0       	ldi	r22, 0x00	; 0
    690a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    690e:	d4 c0       	rjmp	.+424    	; 0x6ab8 <HMSSD_enDisplayRealNumber+0x1e78>
						break;
					case 7:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    6910:	fe 01       	movw	r30, r28
    6912:	ee 5b       	subi	r30, 0xBE	; 190
    6914:	ff 4f       	sbci	r31, 0xFF	; 255
    6916:	01 90       	ld	r0, Z+
    6918:	f0 81       	ld	r31, Z
    691a:	e0 2d       	mov	r30, r0
    691c:	81 81       	ldd	r24, Z+1	; 0x01
    691e:	60 e0       	ldi	r22, 0x00	; 0
    6920:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    6924:	fe 01       	movw	r30, r28
    6926:	ee 5b       	subi	r30, 0xBE	; 190
    6928:	ff 4f       	sbci	r31, 0xFF	; 255
    692a:	01 90       	ld	r0, Z+
    692c:	f0 81       	ld	r31, Z
    692e:	e0 2d       	mov	r30, r0
    6930:	82 81       	ldd	r24, Z+2	; 0x02
    6932:	60 e0       	ldi	r22, 0x00	; 0
    6934:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    6938:	fe 01       	movw	r30, r28
    693a:	ee 5b       	subi	r30, 0xBE	; 190
    693c:	ff 4f       	sbci	r31, 0xFF	; 255
    693e:	01 90       	ld	r0, Z+
    6940:	f0 81       	ld	r31, Z
    6942:	e0 2d       	mov	r30, r0
    6944:	83 81       	ldd	r24, Z+3	; 0x03
    6946:	60 e0       	ldi	r22, 0x00	; 0
    6948:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, HIGH);
    694c:	fe 01       	movw	r30, r28
    694e:	ee 5b       	subi	r30, 0xBE	; 190
    6950:	ff 4f       	sbci	r31, 0xFF	; 255
    6952:	01 90       	ld	r0, Z+
    6954:	f0 81       	ld	r31, Z
    6956:	e0 2d       	mov	r30, r0
    6958:	84 81       	ldd	r24, Z+4	; 0x04
    695a:	61 e0       	ldi	r22, 0x01	; 1
    695c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    6960:	fe 01       	movw	r30, r28
    6962:	ee 5b       	subi	r30, 0xBE	; 190
    6964:	ff 4f       	sbci	r31, 0xFF	; 255
    6966:	01 90       	ld	r0, Z+
    6968:	f0 81       	ld	r31, Z
    696a:	e0 2d       	mov	r30, r0
    696c:	85 81       	ldd	r24, Z+5	; 0x05
    696e:	61 e0       	ldi	r22, 0x01	; 1
    6970:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, HIGH);
    6974:	fe 01       	movw	r30, r28
    6976:	ee 5b       	subi	r30, 0xBE	; 190
    6978:	ff 4f       	sbci	r31, 0xFF	; 255
    697a:	01 90       	ld	r0, Z+
    697c:	f0 81       	ld	r31, Z
    697e:	e0 2d       	mov	r30, r0
    6980:	86 81       	ldd	r24, Z+6	; 0x06
    6982:	61 e0       	ldi	r22, 0x01	; 1
    6984:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, HIGH);
    6988:	fe 01       	movw	r30, r28
    698a:	ee 5b       	subi	r30, 0xBE	; 190
    698c:	ff 4f       	sbci	r31, 0xFF	; 255
    698e:	01 90       	ld	r0, Z+
    6990:	f0 81       	ld	r31, Z
    6992:	e0 2d       	mov	r30, r0
    6994:	87 81       	ldd	r24, Z+7	; 0x07
    6996:	61 e0       	ldi	r22, 0x01	; 1
    6998:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    699c:	8d c0       	rjmp	.+282    	; 0x6ab8 <HMSSD_enDisplayRealNumber+0x1e78>
						break;
					case 8:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    699e:	fe 01       	movw	r30, r28
    69a0:	ee 5b       	subi	r30, 0xBE	; 190
    69a2:	ff 4f       	sbci	r31, 0xFF	; 255
    69a4:	01 90       	ld	r0, Z+
    69a6:	f0 81       	ld	r31, Z
    69a8:	e0 2d       	mov	r30, r0
    69aa:	81 81       	ldd	r24, Z+1	; 0x01
    69ac:	60 e0       	ldi	r22, 0x00	; 0
    69ae:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    69b2:	fe 01       	movw	r30, r28
    69b4:	ee 5b       	subi	r30, 0xBE	; 190
    69b6:	ff 4f       	sbci	r31, 0xFF	; 255
    69b8:	01 90       	ld	r0, Z+
    69ba:	f0 81       	ld	r31, Z
    69bc:	e0 2d       	mov	r30, r0
    69be:	82 81       	ldd	r24, Z+2	; 0x02
    69c0:	60 e0       	ldi	r22, 0x00	; 0
    69c2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    69c6:	fe 01       	movw	r30, r28
    69c8:	ee 5b       	subi	r30, 0xBE	; 190
    69ca:	ff 4f       	sbci	r31, 0xFF	; 255
    69cc:	01 90       	ld	r0, Z+
    69ce:	f0 81       	ld	r31, Z
    69d0:	e0 2d       	mov	r30, r0
    69d2:	83 81       	ldd	r24, Z+3	; 0x03
    69d4:	60 e0       	ldi	r22, 0x00	; 0
    69d6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    69da:	fe 01       	movw	r30, r28
    69dc:	ee 5b       	subi	r30, 0xBE	; 190
    69de:	ff 4f       	sbci	r31, 0xFF	; 255
    69e0:	01 90       	ld	r0, Z+
    69e2:	f0 81       	ld	r31, Z
    69e4:	e0 2d       	mov	r30, r0
    69e6:	84 81       	ldd	r24, Z+4	; 0x04
    69e8:	60 e0       	ldi	r22, 0x00	; 0
    69ea:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, LOW);
    69ee:	fe 01       	movw	r30, r28
    69f0:	ee 5b       	subi	r30, 0xBE	; 190
    69f2:	ff 4f       	sbci	r31, 0xFF	; 255
    69f4:	01 90       	ld	r0, Z+
    69f6:	f0 81       	ld	r31, Z
    69f8:	e0 2d       	mov	r30, r0
    69fa:	85 81       	ldd	r24, Z+5	; 0x05
    69fc:	60 e0       	ldi	r22, 0x00	; 0
    69fe:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    6a02:	fe 01       	movw	r30, r28
    6a04:	ee 5b       	subi	r30, 0xBE	; 190
    6a06:	ff 4f       	sbci	r31, 0xFF	; 255
    6a08:	01 90       	ld	r0, Z+
    6a0a:	f0 81       	ld	r31, Z
    6a0c:	e0 2d       	mov	r30, r0
    6a0e:	86 81       	ldd	r24, Z+6	; 0x06
    6a10:	60 e0       	ldi	r22, 0x00	; 0
    6a12:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    6a16:	fe 01       	movw	r30, r28
    6a18:	ee 5b       	subi	r30, 0xBE	; 190
    6a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    6a1c:	01 90       	ld	r0, Z+
    6a1e:	f0 81       	ld	r31, Z
    6a20:	e0 2d       	mov	r30, r0
    6a22:	87 81       	ldd	r24, Z+7	; 0x07
    6a24:	60 e0       	ldi	r22, 0x00	; 0
    6a26:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    6a2a:	46 c0       	rjmp	.+140    	; 0x6ab8 <HMSSD_enDisplayRealNumber+0x1e78>
						break;
					case 9:
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_A, LOW);
    6a2c:	fe 01       	movw	r30, r28
    6a2e:	ee 5b       	subi	r30, 0xBE	; 190
    6a30:	ff 4f       	sbci	r31, 0xFF	; 255
    6a32:	01 90       	ld	r0, Z+
    6a34:	f0 81       	ld	r31, Z
    6a36:	e0 2d       	mov	r30, r0
    6a38:	81 81       	ldd	r24, Z+1	; 0x01
    6a3a:	60 e0       	ldi	r22, 0x00	; 0
    6a3c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_B, LOW);
    6a40:	fe 01       	movw	r30, r28
    6a42:	ee 5b       	subi	r30, 0xBE	; 190
    6a44:	ff 4f       	sbci	r31, 0xFF	; 255
    6a46:	01 90       	ld	r0, Z+
    6a48:	f0 81       	ld	r31, Z
    6a4a:	e0 2d       	mov	r30, r0
    6a4c:	82 81       	ldd	r24, Z+2	; 0x02
    6a4e:	60 e0       	ldi	r22, 0x00	; 0
    6a50:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_C, LOW);
    6a54:	fe 01       	movw	r30, r28
    6a56:	ee 5b       	subi	r30, 0xBE	; 190
    6a58:	ff 4f       	sbci	r31, 0xFF	; 255
    6a5a:	01 90       	ld	r0, Z+
    6a5c:	f0 81       	ld	r31, Z
    6a5e:	e0 2d       	mov	r30, r0
    6a60:	83 81       	ldd	r24, Z+3	; 0x03
    6a62:	60 e0       	ldi	r22, 0x00	; 0
    6a64:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_D, LOW);
    6a68:	fe 01       	movw	r30, r28
    6a6a:	ee 5b       	subi	r30, 0xBE	; 190
    6a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    6a6e:	01 90       	ld	r0, Z+
    6a70:	f0 81       	ld	r31, Z
    6a72:	e0 2d       	mov	r30, r0
    6a74:	84 81       	ldd	r24, Z+4	; 0x04
    6a76:	60 e0       	ldi	r22, 0x00	; 0
    6a78:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_E, HIGH);
    6a7c:	fe 01       	movw	r30, r28
    6a7e:	ee 5b       	subi	r30, 0xBE	; 190
    6a80:	ff 4f       	sbci	r31, 0xFF	; 255
    6a82:	01 90       	ld	r0, Z+
    6a84:	f0 81       	ld	r31, Z
    6a86:	e0 2d       	mov	r30, r0
    6a88:	85 81       	ldd	r24, Z+5	; 0x05
    6a8a:	61 e0       	ldi	r22, 0x01	; 1
    6a8c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_F, LOW);
    6a90:	fe 01       	movw	r30, r28
    6a92:	ee 5b       	subi	r30, 0xBE	; 190
    6a94:	ff 4f       	sbci	r31, 0xFF	; 255
    6a96:	01 90       	ld	r0, Z+
    6a98:	f0 81       	ld	r31, Z
    6a9a:	e0 2d       	mov	r30, r0
    6a9c:	86 81       	ldd	r24, Z+6	; 0x06
    6a9e:	60 e0       	ldi	r22, 0x00	; 0
    6aa0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
						MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_G, LOW);
    6aa4:	fe 01       	movw	r30, r28
    6aa6:	ee 5b       	subi	r30, 0xBE	; 190
    6aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    6aaa:	01 90       	ld	r0, Z+
    6aac:	f0 81       	ld	r31, Z
    6aae:	e0 2d       	mov	r30, r0
    6ab0:	87 81       	ldd	r24, Z+7	; 0x07
    6ab2:	60 e0       	ldi	r22, 0x00	; 0
    6ab4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    6ab8:	80 e0       	ldi	r24, 0x00	; 0
    6aba:	90 e0       	ldi	r25, 0x00	; 0
    6abc:	a0 e2       	ldi	r26, 0x20	; 32
    6abe:	b1 e4       	ldi	r27, 0x41	; 65
    6ac0:	8b 87       	std	Y+11, r24	; 0x0b
    6ac2:	9c 87       	std	Y+12, r25	; 0x0c
    6ac4:	ad 87       	std	Y+13, r26	; 0x0d
    6ac6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6ac8:	6b 85       	ldd	r22, Y+11	; 0x0b
    6aca:	7c 85       	ldd	r23, Y+12	; 0x0c
    6acc:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ace:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ad0:	20 e0       	ldi	r18, 0x00	; 0
    6ad2:	30 e0       	ldi	r19, 0x00	; 0
    6ad4:	4a e7       	ldi	r20, 0x7A	; 122
    6ad6:	55 e4       	ldi	r21, 0x45	; 69
    6ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6adc:	dc 01       	movw	r26, r24
    6ade:	cb 01       	movw	r24, r22
    6ae0:	8f 83       	std	Y+7, r24	; 0x07
    6ae2:	98 87       	std	Y+8, r25	; 0x08
    6ae4:	a9 87       	std	Y+9, r26	; 0x09
    6ae6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    6aea:	78 85       	ldd	r23, Y+8	; 0x08
    6aec:	89 85       	ldd	r24, Y+9	; 0x09
    6aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    6af0:	20 e0       	ldi	r18, 0x00	; 0
    6af2:	30 e0       	ldi	r19, 0x00	; 0
    6af4:	40 e8       	ldi	r20, 0x80	; 128
    6af6:	5f e3       	ldi	r21, 0x3F	; 63
    6af8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6afc:	88 23       	and	r24, r24
    6afe:	2c f4       	brge	.+10     	; 0x6b0a <HMSSD_enDisplayRealNumber+0x1eca>
		__ticks = 1;
    6b00:	81 e0       	ldi	r24, 0x01	; 1
    6b02:	90 e0       	ldi	r25, 0x00	; 0
    6b04:	9e 83       	std	Y+6, r25	; 0x06
    6b06:	8d 83       	std	Y+5, r24	; 0x05
    6b08:	3f c0       	rjmp	.+126    	; 0x6b88 <HMSSD_enDisplayRealNumber+0x1f48>
	else if (__tmp > 65535)
    6b0a:	6f 81       	ldd	r22, Y+7	; 0x07
    6b0c:	78 85       	ldd	r23, Y+8	; 0x08
    6b0e:	89 85       	ldd	r24, Y+9	; 0x09
    6b10:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b12:	20 e0       	ldi	r18, 0x00	; 0
    6b14:	3f ef       	ldi	r19, 0xFF	; 255
    6b16:	4f e7       	ldi	r20, 0x7F	; 127
    6b18:	57 e4       	ldi	r21, 0x47	; 71
    6b1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6b1e:	18 16       	cp	r1, r24
    6b20:	4c f5       	brge	.+82     	; 0x6b74 <HMSSD_enDisplayRealNumber+0x1f34>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b22:	6b 85       	ldd	r22, Y+11	; 0x0b
    6b24:	7c 85       	ldd	r23, Y+12	; 0x0c
    6b26:	8d 85       	ldd	r24, Y+13	; 0x0d
    6b28:	9e 85       	ldd	r25, Y+14	; 0x0e
    6b2a:	20 e0       	ldi	r18, 0x00	; 0
    6b2c:	30 e0       	ldi	r19, 0x00	; 0
    6b2e:	40 e2       	ldi	r20, 0x20	; 32
    6b30:	51 e4       	ldi	r21, 0x41	; 65
    6b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b36:	dc 01       	movw	r26, r24
    6b38:	cb 01       	movw	r24, r22
    6b3a:	bc 01       	movw	r22, r24
    6b3c:	cd 01       	movw	r24, r26
    6b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b42:	dc 01       	movw	r26, r24
    6b44:	cb 01       	movw	r24, r22
    6b46:	9e 83       	std	Y+6, r25	; 0x06
    6b48:	8d 83       	std	Y+5, r24	; 0x05
    6b4a:	0f c0       	rjmp	.+30     	; 0x6b6a <HMSSD_enDisplayRealNumber+0x1f2a>
    6b4c:	80 e9       	ldi	r24, 0x90	; 144
    6b4e:	91 e0       	ldi	r25, 0x01	; 1
    6b50:	9c 83       	std	Y+4, r25	; 0x04
    6b52:	8b 83       	std	Y+3, r24	; 0x03
    6b54:	8b 81       	ldd	r24, Y+3	; 0x03
    6b56:	9c 81       	ldd	r25, Y+4	; 0x04
    6b58:	01 97       	sbiw	r24, 0x01	; 1
    6b5a:	f1 f7       	brne	.-4      	; 0x6b58 <HMSSD_enDisplayRealNumber+0x1f18>
    6b5c:	9c 83       	std	Y+4, r25	; 0x04
    6b5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b60:	8d 81       	ldd	r24, Y+5	; 0x05
    6b62:	9e 81       	ldd	r25, Y+6	; 0x06
    6b64:	01 97       	sbiw	r24, 0x01	; 1
    6b66:	9e 83       	std	Y+6, r25	; 0x06
    6b68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    6b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    6b6e:	00 97       	sbiw	r24, 0x00	; 0
    6b70:	69 f7       	brne	.-38     	; 0x6b4c <HMSSD_enDisplayRealNumber+0x1f0c>
    6b72:	14 c0       	rjmp	.+40     	; 0x6b9c <HMSSD_enDisplayRealNumber+0x1f5c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b74:	6f 81       	ldd	r22, Y+7	; 0x07
    6b76:	78 85       	ldd	r23, Y+8	; 0x08
    6b78:	89 85       	ldd	r24, Y+9	; 0x09
    6b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b80:	dc 01       	movw	r26, r24
    6b82:	cb 01       	movw	r24, r22
    6b84:	9e 83       	std	Y+6, r25	; 0x06
    6b86:	8d 83       	std	Y+5, r24	; 0x05
    6b88:	8d 81       	ldd	r24, Y+5	; 0x05
    6b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    6b8c:	9a 83       	std	Y+2, r25	; 0x02
    6b8e:	89 83       	std	Y+1, r24	; 0x01
    6b90:	89 81       	ldd	r24, Y+1	; 0x01
    6b92:	9a 81       	ldd	r25, Y+2	; 0x02
    6b94:	01 97       	sbiw	r24, 0x01	; 1
    6b96:	f1 f7       	brne	.-4      	; 0x6b94 <HMSSD_enDisplayRealNumber+0x1f54>
    6b98:	9a 83       	std	Y+2, r25	; 0x02
    6b9a:	89 83       	std	Y+1, r24	; 0x01
						break;
					} // switch on Units --> CA

					_delay_ms(10);
					// Disable SSD2
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN2, LOW);
    6b9c:	fe 01       	movw	r30, r28
    6b9e:	ee 5b       	subi	r30, 0xBE	; 190
    6ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    6ba2:	01 90       	ld	r0, Z+
    6ba4:	f0 81       	ld	r31, Z
    6ba6:	e0 2d       	mov	r30, r0
    6ba8:	82 85       	ldd	r24, Z+10	; 0x0a
    6baa:	60 e0       	ldi	r22, 0x00	; 0
    6bac:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN2, HIGH);

				} // for
			} // Type = CC
			else if (PtrMSSD->MSSD_Type == C_ANODE) {
				for (i = 0; i < PtrMSSD->MSSD_Duration; i++) {
    6bb0:	89 ad       	ldd	r24, Y+57	; 0x39
    6bb2:	9a ad       	ldd	r25, Y+58	; 0x3a
    6bb4:	01 96       	adiw	r24, 0x01	; 1
    6bb6:	9a af       	std	Y+58, r25	; 0x3a
    6bb8:	89 af       	std	Y+57, r24	; 0x39
    6bba:	fe 01       	movw	r30, r28
    6bbc:	ee 5b       	subi	r30, 0xBE	; 190
    6bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    6bc0:	01 90       	ld	r0, Z+
    6bc2:	f0 81       	ld	r31, Z
    6bc4:	e0 2d       	mov	r30, r0
    6bc6:	23 85       	ldd	r18, Z+11	; 0x0b
    6bc8:	34 85       	ldd	r19, Z+12	; 0x0c
    6bca:	89 ad       	ldd	r24, Y+57	; 0x39
    6bcc:	9a ad       	ldd	r25, Y+58	; 0x3a
    6bce:	82 17       	cp	r24, r18
    6bd0:	93 07       	cpc	r25, r19
    6bd2:	08 f4       	brcc	.+2      	; 0x6bd6 <HMSSD_enDisplayRealNumber+0x1f96>
    6bd4:	65 c8       	rjmp	.-3894   	; 0x5ca0 <HMSSD_enDisplayRealNumber+0x1060>
    6bd6:	05 c0       	rjmp	.+10     	; 0x6be2 <HMSSD_enDisplayRealNumber+0x1fa2>
					MDIO_enSetPinValue(PtrMSSD->MSSD_Pin_EN2, LOW);

				} // for
			} // Type CA
			else {
				Local_enState = OUT_OF_RANGE;
    6bd8:	81 e0       	ldi	r24, 0x01	; 1
    6bda:	8d af       	std	Y+61, r24	; 0x3d
    6bdc:	02 c0       	rjmp	.+4      	; 0x6be2 <HMSSD_enDisplayRealNumber+0x1fa2>
			}
		} // if --> PtrSSD != NULL
		else {
			Local_enState = NULL_POINTER;
    6bde:	82 e0       	ldi	r24, 0x02	; 2
    6be0:	8d af       	std	Y+61, r24	; 0x3d
		} // else --> PtrSSD == NULL
	} // else --> Valid Number
	return Local_enState;
    6be2:	8d ad       	ldd	r24, Y+61	; 0x3d
}
    6be4:	c5 5b       	subi	r28, 0xB5	; 181
    6be6:	df 4f       	sbci	r29, 0xFF	; 255
    6be8:	0f b6       	in	r0, 0x3f	; 63
    6bea:	f8 94       	cli
    6bec:	de bf       	out	0x3e, r29	; 62
    6bee:	0f be       	out	0x3f, r0	; 63
    6bf0:	cd bf       	out	0x3d, r28	; 61
    6bf2:	cf 91       	pop	r28
    6bf4:	df 91       	pop	r29
    6bf6:	08 95       	ret

00006bf8 <HLM35_enInit>:
#include <MADC_interface.h>
#include <HLM35_private.h>
#include <HLM35_config.h>
#include <HLM35_interface.h>

ErrorState_t HLM35_enInit(void) {
    6bf8:	df 93       	push	r29
    6bfa:	cf 93       	push	r28
    6bfc:	cd b7       	in	r28, 0x3d	; 61
    6bfe:	de b7       	in	r29, 0x3e	; 62
	MADC_enInit();
    6c00:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <MADC_enInit>
	return SUCCESS;
    6c04:	80 e0       	ldi	r24, 0x00	; 0
}
    6c06:	cf 91       	pop	r28
    6c08:	df 91       	pop	r29
    6c0a:	08 95       	ret

00006c0c <HLM35_enReadTemp>:

ErrorState_t HLM35_enReadTemp(u8 *ptrTempValue) {
    6c0c:	df 93       	push	r29
    6c0e:	cf 93       	push	r28
    6c10:	cd b7       	in	r28, 0x3d	; 61
    6c12:	de b7       	in	r29, 0x3e	; 62
    6c14:	27 97       	sbiw	r28, 0x07	; 7
    6c16:	0f b6       	in	r0, 0x3f	; 63
    6c18:	f8 94       	cli
    6c1a:	de bf       	out	0x3e, r29	; 62
    6c1c:	0f be       	out	0x3f, r0	; 63
    6c1e:	cd bf       	out	0x3d, r28	; 61
    6c20:	9f 83       	std	Y+7, r25	; 0x07
    6c22:	8e 83       	std	Y+6, r24	; 0x06
	ErrorState_t Local_enState = SUCCESS;
    6c24:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16DigitalValue;
	u16 Local_u16AnalogValue;
	if (ptrTempValue == NULL) {
    6c26:	8e 81       	ldd	r24, Y+6	; 0x06
    6c28:	9f 81       	ldd	r25, Y+7	; 0x07
    6c2a:	00 97       	sbiw	r24, 0x00	; 0
    6c2c:	19 f4       	brne	.+6      	; 0x6c34 <HLM35_enReadTemp+0x28>
		Local_enState = NULL_POINTER;
    6c2e:	82 e0       	ldi	r24, 0x02	; 2
    6c30:	8b 83       	std	Y+3, r24	; 0x03
    6c32:	2c c0       	rjmp	.+88     	; 0x6c8c <HLM35_enReadTemp+0x80>
	} else {
		MADC_enStartConversionSynch(HLM35_ADC_CHANNEL, &Local_u16DigitalValue);
    6c34:	9e 01       	movw	r18, r28
    6c36:	2c 5f       	subi	r18, 0xFC	; 252
    6c38:	3f 4f       	sbci	r19, 0xFF	; 255
    6c3a:	80 e0       	ldi	r24, 0x00	; 0
    6c3c:	b9 01       	movw	r22, r18
    6c3e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <MADC_enStartConversionSynch>
		// Analog Value in MilliVolt
		Local_u16AnalogValue = ((u32) Local_u16DigitalValue
				* HLM35_ADC_REFERENCE_VOLTAGE * 1000UL) / 256UL;
#elif(HLM35_ADC_RESOLUTION == _10BIT)
		// Analog Value in MilliVolt
		Local_u16AnalogValue = ((u32) Local_u16DigitalValue
    6c42:	8c 81       	ldd	r24, Y+4	; 0x04
    6c44:	9d 81       	ldd	r25, Y+5	; 0x05
    6c46:	cc 01       	movw	r24, r24
    6c48:	a0 e0       	ldi	r26, 0x00	; 0
    6c4a:	b0 e0       	ldi	r27, 0x00	; 0
    6c4c:	28 e8       	ldi	r18, 0x88	; 136
    6c4e:	33 e1       	ldi	r19, 0x13	; 19
    6c50:	40 e0       	ldi	r20, 0x00	; 0
    6c52:	50 e0       	ldi	r21, 0x00	; 0
    6c54:	bc 01       	movw	r22, r24
    6c56:	cd 01       	movw	r24, r26
    6c58:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <__mulsi3>
    6c5c:	dc 01       	movw	r26, r24
    6c5e:	cb 01       	movw	r24, r22
    6c60:	07 2e       	mov	r0, r23
    6c62:	7a e0       	ldi	r23, 0x0A	; 10
    6c64:	b6 95       	lsr	r27
    6c66:	a7 95       	ror	r26
    6c68:	97 95       	ror	r25
    6c6a:	87 95       	ror	r24
    6c6c:	7a 95       	dec	r23
    6c6e:	d1 f7       	brne	.-12     	; 0x6c64 <HLM35_enReadTemp+0x58>
    6c70:	70 2d       	mov	r23, r0
    6c72:	9a 83       	std	Y+2, r25	; 0x02
    6c74:	89 83       	std	Y+1, r24	; 0x01
				* HLM35_ADC_REFERENCE_VOLTAGE * 1000UL) / 1024UL;
#else
		#error("Wrong ADC Resolution for LM35")
		#endif
		*ptrTempValue = (Local_u16AnalogValue / 10);
    6c76:	89 81       	ldd	r24, Y+1	; 0x01
    6c78:	9a 81       	ldd	r25, Y+2	; 0x02
    6c7a:	2a e0       	ldi	r18, 0x0A	; 10
    6c7c:	30 e0       	ldi	r19, 0x00	; 0
    6c7e:	b9 01       	movw	r22, r18
    6c80:	0e 94 0c 41 	call	0x8218	; 0x8218 <__udivmodhi4>
    6c84:	cb 01       	movw	r24, r22
    6c86:	ee 81       	ldd	r30, Y+6	; 0x06
    6c88:	ff 81       	ldd	r31, Y+7	; 0x07
    6c8a:	80 83       	st	Z, r24
	}
	return Local_enState;
    6c8c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    6c8e:	27 96       	adiw	r28, 0x07	; 7
    6c90:	0f b6       	in	r0, 0x3f	; 63
    6c92:	f8 94       	cli
    6c94:	de bf       	out	0x3e, r29	; 62
    6c96:	0f be       	out	0x3f, r0	; 63
    6c98:	cd bf       	out	0x3d, r28	; 61
    6c9a:	cf 91       	pop	r28
    6c9c:	df 91       	pop	r29
    6c9e:	08 95       	ret

00006ca0 <HLED_enInit>:
#include <MDIO_interface.h>
#include <HLED_private.h>
#include <HLED_config.h>
#include <HLED_interface.h>

ErrorState_t HLED_enInit(Led_t *PtrLed) {
    6ca0:	df 93       	push	r29
    6ca2:	cf 93       	push	r28
    6ca4:	00 d0       	rcall	.+0      	; 0x6ca6 <HLED_enInit+0x6>
    6ca6:	00 d0       	rcall	.+0      	; 0x6ca8 <HLED_enInit+0x8>
    6ca8:	0f 92       	push	r0
    6caa:	cd b7       	in	r28, 0x3d	; 61
    6cac:	de b7       	in	r29, 0x3e	; 62
    6cae:	9b 83       	std	Y+3, r25	; 0x03
    6cb0:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    6cb2:	19 82       	std	Y+1, r1	; 0x01
	if (PtrLed != NULL) {
    6cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    6cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    6cb8:	00 97       	sbiw	r24, 0x00	; 0
    6cba:	41 f1       	breq	.+80     	; 0x6d0c <HLED_enInit+0x6c>
		MDIO_enSetPinDirection(PtrLed->LED_Pin, OUTPUT);
    6cbc:	ea 81       	ldd	r30, Y+2	; 0x02
    6cbe:	fb 81       	ldd	r31, Y+3	; 0x03
    6cc0:	80 81       	ld	r24, Z
    6cc2:	61 e0       	ldi	r22, 0x01	; 1
    6cc4:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
		switch (PtrLed->LED_Connection) {
    6cc8:	ea 81       	ldd	r30, Y+2	; 0x02
    6cca:	fb 81       	ldd	r31, Y+3	; 0x03
    6ccc:	81 81       	ldd	r24, Z+1	; 0x01
    6cce:	28 2f       	mov	r18, r24
    6cd0:	30 e0       	ldi	r19, 0x00	; 0
    6cd2:	3d 83       	std	Y+5, r19	; 0x05
    6cd4:	2c 83       	std	Y+4, r18	; 0x04
    6cd6:	8c 81       	ldd	r24, Y+4	; 0x04
    6cd8:	9d 81       	ldd	r25, Y+5	; 0x05
    6cda:	00 97       	sbiw	r24, 0x00	; 0
    6cdc:	31 f0       	breq	.+12     	; 0x6cea <HLED_enInit+0x4a>
    6cde:	2c 81       	ldd	r18, Y+4	; 0x04
    6ce0:	3d 81       	ldd	r19, Y+5	; 0x05
    6ce2:	21 30       	cpi	r18, 0x01	; 1
    6ce4:	31 05       	cpc	r19, r1
    6ce6:	41 f0       	breq	.+16     	; 0x6cf8 <HLED_enInit+0x58>
    6ce8:	0e c0       	rjmp	.+28     	; 0x6d06 <HLED_enInit+0x66>
		case SOURCE:
			MDIO_enSetPinValue(PtrLed->LED_Pin, LOW);
    6cea:	ea 81       	ldd	r30, Y+2	; 0x02
    6cec:	fb 81       	ldd	r31, Y+3	; 0x03
    6cee:	80 81       	ld	r24, Z
    6cf0:	60 e0       	ldi	r22, 0x00	; 0
    6cf2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    6cf6:	0c c0       	rjmp	.+24     	; 0x6d10 <HLED_enInit+0x70>
			break;
		case SINK:
			MDIO_enSetPinValue(PtrLed->LED_Pin, HIGH);
    6cf8:	ea 81       	ldd	r30, Y+2	; 0x02
    6cfa:	fb 81       	ldd	r31, Y+3	; 0x03
    6cfc:	80 81       	ld	r24, Z
    6cfe:	61 e0       	ldi	r22, 0x01	; 1
    6d00:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    6d04:	05 c0       	rjmp	.+10     	; 0x6d10 <HLED_enInit+0x70>
			break;
		default:
			Local_enState = OUT_OF_RANGE;
    6d06:	81 e0       	ldi	r24, 0x01	; 1
    6d08:	89 83       	std	Y+1, r24	; 0x01
    6d0a:	02 c0       	rjmp	.+4      	; 0x6d10 <HLED_enInit+0x70>
			break;
		}
	} // if --> PtrLed != NULL
	else {
		Local_enState = NULL_POINTER;
    6d0c:	82 e0       	ldi	r24, 0x02	; 2
    6d0e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enState;
    6d10:	89 81       	ldd	r24, Y+1	; 0x01
}
    6d12:	0f 90       	pop	r0
    6d14:	0f 90       	pop	r0
    6d16:	0f 90       	pop	r0
    6d18:	0f 90       	pop	r0
    6d1a:	0f 90       	pop	r0
    6d1c:	cf 91       	pop	r28
    6d1e:	df 91       	pop	r29
    6d20:	08 95       	ret

00006d22 <HLED_enEnable>:

ErrorState_t HLED_enEnable(Led_t *PtrLed) {
    6d22:	df 93       	push	r29
    6d24:	cf 93       	push	r28
    6d26:	00 d0       	rcall	.+0      	; 0x6d28 <HLED_enEnable+0x6>
    6d28:	00 d0       	rcall	.+0      	; 0x6d2a <HLED_enEnable+0x8>
    6d2a:	0f 92       	push	r0
    6d2c:	cd b7       	in	r28, 0x3d	; 61
    6d2e:	de b7       	in	r29, 0x3e	; 62
    6d30:	9b 83       	std	Y+3, r25	; 0x03
    6d32:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    6d34:	19 82       	std	Y+1, r1	; 0x01
	if (PtrLed != NULL) {
    6d36:	8a 81       	ldd	r24, Y+2	; 0x02
    6d38:	9b 81       	ldd	r25, Y+3	; 0x03
    6d3a:	00 97       	sbiw	r24, 0x00	; 0
    6d3c:	11 f1       	breq	.+68     	; 0x6d82 <HLED_enEnable+0x60>
		switch (PtrLed->LED_Connection) {
    6d3e:	ea 81       	ldd	r30, Y+2	; 0x02
    6d40:	fb 81       	ldd	r31, Y+3	; 0x03
    6d42:	81 81       	ldd	r24, Z+1	; 0x01
    6d44:	28 2f       	mov	r18, r24
    6d46:	30 e0       	ldi	r19, 0x00	; 0
    6d48:	3d 83       	std	Y+5, r19	; 0x05
    6d4a:	2c 83       	std	Y+4, r18	; 0x04
    6d4c:	8c 81       	ldd	r24, Y+4	; 0x04
    6d4e:	9d 81       	ldd	r25, Y+5	; 0x05
    6d50:	00 97       	sbiw	r24, 0x00	; 0
    6d52:	31 f0       	breq	.+12     	; 0x6d60 <HLED_enEnable+0x3e>
    6d54:	2c 81       	ldd	r18, Y+4	; 0x04
    6d56:	3d 81       	ldd	r19, Y+5	; 0x05
    6d58:	21 30       	cpi	r18, 0x01	; 1
    6d5a:	31 05       	cpc	r19, r1
    6d5c:	41 f0       	breq	.+16     	; 0x6d6e <HLED_enEnable+0x4c>
    6d5e:	0e c0       	rjmp	.+28     	; 0x6d7c <HLED_enEnable+0x5a>
		case SOURCE:
			MDIO_enSetPinValue(PtrLed->LED_Pin, HIGH);
    6d60:	ea 81       	ldd	r30, Y+2	; 0x02
    6d62:	fb 81       	ldd	r31, Y+3	; 0x03
    6d64:	80 81       	ld	r24, Z
    6d66:	61 e0       	ldi	r22, 0x01	; 1
    6d68:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    6d6c:	0c c0       	rjmp	.+24     	; 0x6d86 <HLED_enEnable+0x64>
			break;
		case SINK:
			MDIO_enSetPinValue(PtrLed->LED_Pin, LOW);
    6d6e:	ea 81       	ldd	r30, Y+2	; 0x02
    6d70:	fb 81       	ldd	r31, Y+3	; 0x03
    6d72:	80 81       	ld	r24, Z
    6d74:	60 e0       	ldi	r22, 0x00	; 0
    6d76:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    6d7a:	05 c0       	rjmp	.+10     	; 0x6d86 <HLED_enEnable+0x64>
			break;
		default:
			Local_enState = OUT_OF_RANGE;
    6d7c:	81 e0       	ldi	r24, 0x01	; 1
    6d7e:	89 83       	std	Y+1, r24	; 0x01
    6d80:	02 c0       	rjmp	.+4      	; 0x6d86 <HLED_enEnable+0x64>
			break;
		}
	} // if --> PtrLed != NULL
	else {
		Local_enState = NULL_POINTER;
    6d82:	82 e0       	ldi	r24, 0x02	; 2
    6d84:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enState;
    6d86:	89 81       	ldd	r24, Y+1	; 0x01
}
    6d88:	0f 90       	pop	r0
    6d8a:	0f 90       	pop	r0
    6d8c:	0f 90       	pop	r0
    6d8e:	0f 90       	pop	r0
    6d90:	0f 90       	pop	r0
    6d92:	cf 91       	pop	r28
    6d94:	df 91       	pop	r29
    6d96:	08 95       	ret

00006d98 <HLED_enDisable>:

ErrorState_t HLED_enDisable(Led_t *PtrLed) {
    6d98:	df 93       	push	r29
    6d9a:	cf 93       	push	r28
    6d9c:	00 d0       	rcall	.+0      	; 0x6d9e <HLED_enDisable+0x6>
    6d9e:	00 d0       	rcall	.+0      	; 0x6da0 <HLED_enDisable+0x8>
    6da0:	0f 92       	push	r0
    6da2:	cd b7       	in	r28, 0x3d	; 61
    6da4:	de b7       	in	r29, 0x3e	; 62
    6da6:	9b 83       	std	Y+3, r25	; 0x03
    6da8:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    6daa:	19 82       	std	Y+1, r1	; 0x01
	if (PtrLed != NULL) {
    6dac:	8a 81       	ldd	r24, Y+2	; 0x02
    6dae:	9b 81       	ldd	r25, Y+3	; 0x03
    6db0:	00 97       	sbiw	r24, 0x00	; 0
    6db2:	11 f1       	breq	.+68     	; 0x6df8 <HLED_enDisable+0x60>
		switch (PtrLed->LED_Connection) {
    6db4:	ea 81       	ldd	r30, Y+2	; 0x02
    6db6:	fb 81       	ldd	r31, Y+3	; 0x03
    6db8:	81 81       	ldd	r24, Z+1	; 0x01
    6dba:	28 2f       	mov	r18, r24
    6dbc:	30 e0       	ldi	r19, 0x00	; 0
    6dbe:	3d 83       	std	Y+5, r19	; 0x05
    6dc0:	2c 83       	std	Y+4, r18	; 0x04
    6dc2:	8c 81       	ldd	r24, Y+4	; 0x04
    6dc4:	9d 81       	ldd	r25, Y+5	; 0x05
    6dc6:	00 97       	sbiw	r24, 0x00	; 0
    6dc8:	31 f0       	breq	.+12     	; 0x6dd6 <HLED_enDisable+0x3e>
    6dca:	2c 81       	ldd	r18, Y+4	; 0x04
    6dcc:	3d 81       	ldd	r19, Y+5	; 0x05
    6dce:	21 30       	cpi	r18, 0x01	; 1
    6dd0:	31 05       	cpc	r19, r1
    6dd2:	41 f0       	breq	.+16     	; 0x6de4 <HLED_enDisable+0x4c>
    6dd4:	0e c0       	rjmp	.+28     	; 0x6df2 <HLED_enDisable+0x5a>
		case SOURCE:
			MDIO_enSetPinValue(PtrLed->LED_Pin, LOW);
    6dd6:	ea 81       	ldd	r30, Y+2	; 0x02
    6dd8:	fb 81       	ldd	r31, Y+3	; 0x03
    6dda:	80 81       	ld	r24, Z
    6ddc:	60 e0       	ldi	r22, 0x00	; 0
    6dde:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    6de2:	0c c0       	rjmp	.+24     	; 0x6dfc <HLED_enDisable+0x64>
			break;
		case SINK:
			MDIO_enSetPinValue(PtrLed->LED_Pin, HIGH);
    6de4:	ea 81       	ldd	r30, Y+2	; 0x02
    6de6:	fb 81       	ldd	r31, Y+3	; 0x03
    6de8:	80 81       	ld	r24, Z
    6dea:	61 e0       	ldi	r22, 0x01	; 1
    6dec:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    6df0:	05 c0       	rjmp	.+10     	; 0x6dfc <HLED_enDisable+0x64>
			break;
		default:
			Local_enState = OUT_OF_RANGE;
    6df2:	81 e0       	ldi	r24, 0x01	; 1
    6df4:	89 83       	std	Y+1, r24	; 0x01
    6df6:	02 c0       	rjmp	.+4      	; 0x6dfc <HLED_enDisable+0x64>
			break;
		}
	} // if --> PtrLed != NULL
	else {
		Local_enState = NULL_POINTER;
    6df8:	82 e0       	ldi	r24, 0x02	; 2
    6dfa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enState;
    6dfc:	89 81       	ldd	r24, Y+1	; 0x01
}
    6dfe:	0f 90       	pop	r0
    6e00:	0f 90       	pop	r0
    6e02:	0f 90       	pop	r0
    6e04:	0f 90       	pop	r0
    6e06:	0f 90       	pop	r0
    6e08:	cf 91       	pop	r28
    6e0a:	df 91       	pop	r29
    6e0c:	08 95       	ret

00006e0e <HLED_enToggle>:

ErrorState_t HLED_enToggle(Led_t *PtrLed) {
    6e0e:	df 93       	push	r29
    6e10:	cf 93       	push	r28
    6e12:	00 d0       	rcall	.+0      	; 0x6e14 <HLED_enToggle+0x6>
    6e14:	00 d0       	rcall	.+0      	; 0x6e16 <HLED_enToggle+0x8>
    6e16:	cd b7       	in	r28, 0x3d	; 61
    6e18:	de b7       	in	r29, 0x3e	; 62
    6e1a:	9b 83       	std	Y+3, r25	; 0x03
    6e1c:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    6e1e:	19 82       	std	Y+1, r1	; 0x01
	if (PtrLed != NULL) {
    6e20:	8a 81       	ldd	r24, Y+2	; 0x02
    6e22:	9b 81       	ldd	r25, Y+3	; 0x03
    6e24:	00 97       	sbiw	r24, 0x00	; 0
    6e26:	41 f0       	breq	.+16     	; 0x6e38 <HLED_enToggle+0x2a>
		MDIO_enTogglePinValue(PtrLed->LED_Pin);
    6e28:	ea 81       	ldd	r30, Y+2	; 0x02
    6e2a:	fb 81       	ldd	r31, Y+3	; 0x03
    6e2c:	80 81       	ld	r24, Z
    6e2e:	0e 94 b3 0c 	call	0x1966	; 0x1966 <MDIO_enTogglePinValue>
		return Local_enState;
    6e32:	89 81       	ldd	r24, Y+1	; 0x01
    6e34:	8c 83       	std	Y+4, r24	; 0x04
    6e36:	04 c0       	rjmp	.+8      	; 0x6e40 <HLED_enToggle+0x32>
	} else {
		Local_enState = NULL_POINTER;
    6e38:	82 e0       	ldi	r24, 0x02	; 2
    6e3a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enState;
    6e3c:	89 81       	ldd	r24, Y+1	; 0x01
    6e3e:	8c 83       	std	Y+4, r24	; 0x04
    6e40:	8c 81       	ldd	r24, Y+4	; 0x04
}
    6e42:	0f 90       	pop	r0
    6e44:	0f 90       	pop	r0
    6e46:	0f 90       	pop	r0
    6e48:	0f 90       	pop	r0
    6e4a:	cf 91       	pop	r28
    6e4c:	df 91       	pop	r29
    6e4e:	08 95       	ret

00006e50 <HLCD_voidNLatch>:
#include <MDIO_interface.h>
#include <HLCD_private.h>
#include <HLCD_config.h>
#include <HLCD_interface.h>

static void HLCD_voidNLatch(u8 copy_u8Byte) {
    6e50:	df 93       	push	r29
    6e52:	cf 93       	push	r28
    6e54:	cd b7       	in	r28, 0x3d	; 61
    6e56:	de b7       	in	r29, 0x3e	; 62
    6e58:	6e 97       	sbiw	r28, 0x1e	; 30
    6e5a:	0f b6       	in	r0, 0x3f	; 63
    6e5c:	f8 94       	cli
    6e5e:	de bf       	out	0x3e, r29	; 62
    6e60:	0f be       	out	0x3f, r0	; 63
    6e62:	cd bf       	out	0x3d, r28	; 61
    6e64:	89 8f       	std	Y+25, r24	; 0x19
#if((HLCD_DATA == HLCD_DATA_PORT) && (HLCD_MODE!=HLCD_4BIT_MODE))
	MDIO_enSetPortValue(HLCD_D_PORT, HLCD_DATA_PORT);
#elif(HLCD_DATA == HLCD_DATA_PINS)
	u8 Local_u8Counter = 0;
    6e66:	18 8a       	std	Y+16, r1	; 0x10
#if(HLCD_MODE==HLCD_8BIT_MODE)
	u8 Local_u8Condition = 8;
    6e68:	88 e0       	ldi	r24, 0x08	; 8
    6e6a:	8f 87       	std	Y+15, r24	; 0x0f
	u8 Local_u8LCD_Pins_arr[] = { HLCD_D0_PIN, HLCD_D1_PIN, HLCD_D2_PIN,
	HLCD_D3_PIN, HLCD_D4_PIN, HLCD_D5_PIN, HLCD_D6_PIN, HLCD_D7_PIN };
    6e6c:	be 01       	movw	r22, r28
    6e6e:	6f 5e       	subi	r22, 0xEF	; 239
    6e70:	7f 4f       	sbci	r23, 0xFF	; 255
    6e72:	7b 8f       	std	Y+27, r23	; 0x1b
    6e74:	6a 8f       	std	Y+26, r22	; 0x1a
    6e76:	80 e8       	ldi	r24, 0x80	; 128
    6e78:	91 e0       	ldi	r25, 0x01	; 1
    6e7a:	9d 8f       	std	Y+29, r25	; 0x1d
    6e7c:	8c 8f       	std	Y+28, r24	; 0x1c
    6e7e:	98 e0       	ldi	r25, 0x08	; 8
    6e80:	9e 8f       	std	Y+30, r25	; 0x1e
    6e82:	ec 8d       	ldd	r30, Y+28	; 0x1c
    6e84:	fd 8d       	ldd	r31, Y+29	; 0x1d
    6e86:	00 80       	ld	r0, Z
    6e88:	6c 8d       	ldd	r22, Y+28	; 0x1c
    6e8a:	7d 8d       	ldd	r23, Y+29	; 0x1d
    6e8c:	6f 5f       	subi	r22, 0xFF	; 255
    6e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    6e90:	7d 8f       	std	Y+29, r23	; 0x1d
    6e92:	6c 8f       	std	Y+28, r22	; 0x1c
    6e94:	ea 8d       	ldd	r30, Y+26	; 0x1a
    6e96:	fb 8d       	ldd	r31, Y+27	; 0x1b
    6e98:	00 82       	st	Z, r0
    6e9a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    6e9c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    6e9e:	6f 5f       	subi	r22, 0xFF	; 255
    6ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    6ea2:	7b 8f       	std	Y+27, r23	; 0x1b
    6ea4:	6a 8f       	std	Y+26, r22	; 0x1a
    6ea6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    6ea8:	71 50       	subi	r23, 0x01	; 1
    6eaa:	7e 8f       	std	Y+30, r23	; 0x1e
    6eac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6eae:	88 23       	and	r24, r24
    6eb0:	41 f7       	brne	.-48     	; 0x6e82 <HLCD_voidNLatch+0x32>
	for (Local_u8Counter = 0; Local_u8Counter < Local_u8Condition;
    6eb2:	18 8a       	std	Y+16, r1	; 0x10
    6eb4:	1f c0       	rjmp	.+62     	; 0x6ef4 <HLCD_voidNLatch+0xa4>
			Local_u8Counter++) {
		MDIO_enSetPinValue(Local_u8LCD_Pins_arr[Local_u8Counter],
    6eb6:	88 89       	ldd	r24, Y+16	; 0x10
    6eb8:	28 2f       	mov	r18, r24
    6eba:	30 e0       	ldi	r19, 0x00	; 0
    6ebc:	ce 01       	movw	r24, r28
    6ebe:	41 96       	adiw	r24, 0x11	; 17
    6ec0:	fc 01       	movw	r30, r24
    6ec2:	e2 0f       	add	r30, r18
    6ec4:	f3 1f       	adc	r31, r19
    6ec6:	40 81       	ld	r20, Z
    6ec8:	89 8d       	ldd	r24, Y+25	; 0x19
    6eca:	28 2f       	mov	r18, r24
    6ecc:	30 e0       	ldi	r19, 0x00	; 0
    6ece:	88 89       	ldd	r24, Y+16	; 0x10
    6ed0:	88 2f       	mov	r24, r24
    6ed2:	90 e0       	ldi	r25, 0x00	; 0
    6ed4:	f9 01       	movw	r30, r18
    6ed6:	02 c0       	rjmp	.+4      	; 0x6edc <HLCD_voidNLatch+0x8c>
    6ed8:	f5 95       	asr	r31
    6eda:	e7 95       	ror	r30
    6edc:	8a 95       	dec	r24
    6ede:	e2 f7       	brpl	.-8      	; 0x6ed8 <HLCD_voidNLatch+0x88>
    6ee0:	cf 01       	movw	r24, r30
    6ee2:	98 2f       	mov	r25, r24
    6ee4:	91 70       	andi	r25, 0x01	; 1
    6ee6:	84 2f       	mov	r24, r20
    6ee8:	69 2f       	mov	r22, r25
    6eea:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
#if(HLCD_MODE==HLCD_8BIT_MODE)
	u8 Local_u8Condition = 8;
	u8 Local_u8LCD_Pins_arr[] = { HLCD_D0_PIN, HLCD_D1_PIN, HLCD_D2_PIN,
	HLCD_D3_PIN, HLCD_D4_PIN, HLCD_D5_PIN, HLCD_D6_PIN, HLCD_D7_PIN };
	for (Local_u8Counter = 0; Local_u8Counter < Local_u8Condition;
			Local_u8Counter++) {
    6eee:	88 89       	ldd	r24, Y+16	; 0x10
    6ef0:	8f 5f       	subi	r24, 0xFF	; 255
    6ef2:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8Counter = 0;
#if(HLCD_MODE==HLCD_8BIT_MODE)
	u8 Local_u8Condition = 8;
	u8 Local_u8LCD_Pins_arr[] = { HLCD_D0_PIN, HLCD_D1_PIN, HLCD_D2_PIN,
	HLCD_D3_PIN, HLCD_D4_PIN, HLCD_D5_PIN, HLCD_D6_PIN, HLCD_D7_PIN };
	for (Local_u8Counter = 0; Local_u8Counter < Local_u8Condition;
    6ef4:	98 89       	ldd	r25, Y+16	; 0x10
    6ef6:	8f 85       	ldd	r24, Y+15	; 0x0f
    6ef8:	98 17       	cp	r25, r24
    6efa:	e8 f2       	brcs	.-70     	; 0x6eb6 <HLCD_voidNLatch+0x66>
				GET_BIT(copy_u8Byte, Local_u8Counter));
	} // for
#endif
#endif
	/** Enable Pulse **/
	MDIO_enSetPinValue(HLCD_EN_PIN, HIGH);
    6efc:	86 e1       	ldi	r24, 0x16	; 22
    6efe:	61 e0       	ldi	r22, 0x01	; 1
    6f00:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    6f04:	80 e0       	ldi	r24, 0x00	; 0
    6f06:	90 e0       	ldi	r25, 0x00	; 0
    6f08:	a0 e0       	ldi	r26, 0x00	; 0
    6f0a:	b0 e4       	ldi	r27, 0x40	; 64
    6f0c:	8b 87       	std	Y+11, r24	; 0x0b
    6f0e:	9c 87       	std	Y+12, r25	; 0x0c
    6f10:	ad 87       	std	Y+13, r26	; 0x0d
    6f12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6f14:	6b 85       	ldd	r22, Y+11	; 0x0b
    6f16:	7c 85       	ldd	r23, Y+12	; 0x0c
    6f18:	8d 85       	ldd	r24, Y+13	; 0x0d
    6f1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    6f1c:	20 e0       	ldi	r18, 0x00	; 0
    6f1e:	30 e0       	ldi	r19, 0x00	; 0
    6f20:	4a e7       	ldi	r20, 0x7A	; 122
    6f22:	55 e4       	ldi	r21, 0x45	; 69
    6f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6f28:	dc 01       	movw	r26, r24
    6f2a:	cb 01       	movw	r24, r22
    6f2c:	8f 83       	std	Y+7, r24	; 0x07
    6f2e:	98 87       	std	Y+8, r25	; 0x08
    6f30:	a9 87       	std	Y+9, r26	; 0x09
    6f32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6f34:	6f 81       	ldd	r22, Y+7	; 0x07
    6f36:	78 85       	ldd	r23, Y+8	; 0x08
    6f38:	89 85       	ldd	r24, Y+9	; 0x09
    6f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f3c:	20 e0       	ldi	r18, 0x00	; 0
    6f3e:	30 e0       	ldi	r19, 0x00	; 0
    6f40:	40 e8       	ldi	r20, 0x80	; 128
    6f42:	5f e3       	ldi	r21, 0x3F	; 63
    6f44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6f48:	88 23       	and	r24, r24
    6f4a:	2c f4       	brge	.+10     	; 0x6f56 <HLCD_voidNLatch+0x106>
		__ticks = 1;
    6f4c:	81 e0       	ldi	r24, 0x01	; 1
    6f4e:	90 e0       	ldi	r25, 0x00	; 0
    6f50:	9e 83       	std	Y+6, r25	; 0x06
    6f52:	8d 83       	std	Y+5, r24	; 0x05
    6f54:	3f c0       	rjmp	.+126    	; 0x6fd4 <HLCD_voidNLatch+0x184>
	else if (__tmp > 65535)
    6f56:	6f 81       	ldd	r22, Y+7	; 0x07
    6f58:	78 85       	ldd	r23, Y+8	; 0x08
    6f5a:	89 85       	ldd	r24, Y+9	; 0x09
    6f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f5e:	20 e0       	ldi	r18, 0x00	; 0
    6f60:	3f ef       	ldi	r19, 0xFF	; 255
    6f62:	4f e7       	ldi	r20, 0x7F	; 127
    6f64:	57 e4       	ldi	r21, 0x47	; 71
    6f66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6f6a:	18 16       	cp	r1, r24
    6f6c:	4c f5       	brge	.+82     	; 0x6fc0 <HLCD_voidNLatch+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6f6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6f70:	7c 85       	ldd	r23, Y+12	; 0x0c
    6f72:	8d 85       	ldd	r24, Y+13	; 0x0d
    6f74:	9e 85       	ldd	r25, Y+14	; 0x0e
    6f76:	20 e0       	ldi	r18, 0x00	; 0
    6f78:	30 e0       	ldi	r19, 0x00	; 0
    6f7a:	40 e2       	ldi	r20, 0x20	; 32
    6f7c:	51 e4       	ldi	r21, 0x41	; 65
    6f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6f82:	dc 01       	movw	r26, r24
    6f84:	cb 01       	movw	r24, r22
    6f86:	bc 01       	movw	r22, r24
    6f88:	cd 01       	movw	r24, r26
    6f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6f8e:	dc 01       	movw	r26, r24
    6f90:	cb 01       	movw	r24, r22
    6f92:	9e 83       	std	Y+6, r25	; 0x06
    6f94:	8d 83       	std	Y+5, r24	; 0x05
    6f96:	0f c0       	rjmp	.+30     	; 0x6fb6 <HLCD_voidNLatch+0x166>
    6f98:	80 e9       	ldi	r24, 0x90	; 144
    6f9a:	91 e0       	ldi	r25, 0x01	; 1
    6f9c:	9c 83       	std	Y+4, r25	; 0x04
    6f9e:	8b 83       	std	Y+3, r24	; 0x03
    6fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    6fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    6fa4:	01 97       	sbiw	r24, 0x01	; 1
    6fa6:	f1 f7       	brne	.-4      	; 0x6fa4 <HLCD_voidNLatch+0x154>
    6fa8:	9c 83       	std	Y+4, r25	; 0x04
    6faa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6fac:	8d 81       	ldd	r24, Y+5	; 0x05
    6fae:	9e 81       	ldd	r25, Y+6	; 0x06
    6fb0:	01 97       	sbiw	r24, 0x01	; 1
    6fb2:	9e 83       	std	Y+6, r25	; 0x06
    6fb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    6fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    6fba:	00 97       	sbiw	r24, 0x00	; 0
    6fbc:	69 f7       	brne	.-38     	; 0x6f98 <HLCD_voidNLatch+0x148>
    6fbe:	14 c0       	rjmp	.+40     	; 0x6fe8 <HLCD_voidNLatch+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6fc0:	6f 81       	ldd	r22, Y+7	; 0x07
    6fc2:	78 85       	ldd	r23, Y+8	; 0x08
    6fc4:	89 85       	ldd	r24, Y+9	; 0x09
    6fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6fcc:	dc 01       	movw	r26, r24
    6fce:	cb 01       	movw	r24, r22
    6fd0:	9e 83       	std	Y+6, r25	; 0x06
    6fd2:	8d 83       	std	Y+5, r24	; 0x05
    6fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    6fd6:	9e 81       	ldd	r25, Y+6	; 0x06
    6fd8:	9a 83       	std	Y+2, r25	; 0x02
    6fda:	89 83       	std	Y+1, r24	; 0x01
    6fdc:	89 81       	ldd	r24, Y+1	; 0x01
    6fde:	9a 81       	ldd	r25, Y+2	; 0x02
    6fe0:	01 97       	sbiw	r24, 0x01	; 1
    6fe2:	f1 f7       	brne	.-4      	; 0x6fe0 <HLCD_voidNLatch+0x190>
    6fe4:	9a 83       	std	Y+2, r25	; 0x02
    6fe6:	89 83       	std	Y+1, r24	; 0x01
	// It should be 230ns
	// Increased it to not make delay after each Send Command
	_delay_ms(2);
	MDIO_enSetPinValue(HLCD_EN_PIN, LOW);
    6fe8:	86 e1       	ldi	r24, 0x16	; 22
    6fea:	60 e0       	ldi	r22, 0x00	; 0
    6fec:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
}
    6ff0:	6e 96       	adiw	r28, 0x1e	; 30
    6ff2:	0f b6       	in	r0, 0x3f	; 63
    6ff4:	f8 94       	cli
    6ff6:	de bf       	out	0x3e, r29	; 62
    6ff8:	0f be       	out	0x3f, r0	; 63
    6ffa:	cd bf       	out	0x3d, r28	; 61
    6ffc:	cf 91       	pop	r28
    6ffe:	df 91       	pop	r29
    7000:	08 95       	ret

00007002 <HLCD_enInit>:

ErrorState_t HLCD_enInit(void) {
    7002:	df 93       	push	r29
    7004:	cf 93       	push	r28
    7006:	cd b7       	in	r28, 0x3d	; 61
    7008:	de b7       	in	r29, 0x3e	; 62
    700a:	2f 97       	sbiw	r28, 0x0f	; 15
    700c:	0f b6       	in	r0, 0x3f	; 63
    700e:	f8 94       	cli
    7010:	de bf       	out	0x3e, r29	; 62
    7012:	0f be       	out	0x3f, r0	; 63
    7014:	cd bf       	out	0x3d, r28	; 61
	ErrorState_t Local_enState = SUCCESS;
    7016:	1f 86       	std	Y+15, r1	; 0x0f
	/** Set Pins Direction **/
	MDIO_enSetPinDirection(HLCD_RS_PIN, OUTPUT);
    7018:	84 e1       	ldi	r24, 0x14	; 20
    701a:	61 e0       	ldi	r22, 0x01	; 1
    701c:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HLCD_RW_PIN, OUTPUT);
    7020:	85 e1       	ldi	r24, 0x15	; 21
    7022:	61 e0       	ldi	r22, 0x01	; 1
    7024:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HLCD_EN_PIN, OUTPUT);
    7028:	86 e1       	ldi	r24, 0x16	; 22
    702a:	61 e0       	ldi	r22, 0x01	; 1
    702c:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
#if(HLCD_DATA == HLCD_DATA_PINS)
#if(HLCD_MODE != HLCD_4BIT_MODE)
	MDIO_enSetPinDirection(HLCD_D0_PIN, OUTPUT);
    7030:	8a e0       	ldi	r24, 0x0A	; 10
    7032:	61 e0       	ldi	r22, 0x01	; 1
    7034:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HLCD_D1_PIN, OUTPUT);
    7038:	8b e0       	ldi	r24, 0x0B	; 11
    703a:	61 e0       	ldi	r22, 0x01	; 1
    703c:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HLCD_D2_PIN, OUTPUT);
    7040:	8c e0       	ldi	r24, 0x0C	; 12
    7042:	61 e0       	ldi	r22, 0x01	; 1
    7044:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HLCD_D3_PIN, OUTPUT);
    7048:	8d e0       	ldi	r24, 0x0D	; 13
    704a:	61 e0       	ldi	r22, 0x01	; 1
    704c:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
#endif
	MDIO_enSetPinDirection(HLCD_D4_PIN, OUTPUT);
    7050:	8e e0       	ldi	r24, 0x0E	; 14
    7052:	61 e0       	ldi	r22, 0x01	; 1
    7054:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HLCD_D5_PIN, OUTPUT);
    7058:	8f e0       	ldi	r24, 0x0F	; 15
    705a:	61 e0       	ldi	r22, 0x01	; 1
    705c:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HLCD_D6_PIN, OUTPUT);
    7060:	80 e1       	ldi	r24, 0x10	; 16
    7062:	61 e0       	ldi	r22, 0x01	; 1
    7064:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HLCD_D7_PIN, OUTPUT);
    7068:	81 e1       	ldi	r24, 0x11	; 17
    706a:	61 e0       	ldi	r22, 0x01	; 1
    706c:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
    7070:	80 e0       	ldi	r24, 0x00	; 0
    7072:	90 e0       	ldi	r25, 0x00	; 0
    7074:	ac e0       	ldi	r26, 0x0C	; 12
    7076:	b2 e4       	ldi	r27, 0x42	; 66
    7078:	8b 87       	std	Y+11, r24	; 0x0b
    707a:	9c 87       	std	Y+12, r25	; 0x0c
    707c:	ad 87       	std	Y+13, r26	; 0x0d
    707e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7080:	6b 85       	ldd	r22, Y+11	; 0x0b
    7082:	7c 85       	ldd	r23, Y+12	; 0x0c
    7084:	8d 85       	ldd	r24, Y+13	; 0x0d
    7086:	9e 85       	ldd	r25, Y+14	; 0x0e
    7088:	20 e0       	ldi	r18, 0x00	; 0
    708a:	30 e0       	ldi	r19, 0x00	; 0
    708c:	4a e7       	ldi	r20, 0x7A	; 122
    708e:	55 e4       	ldi	r21, 0x45	; 69
    7090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7094:	dc 01       	movw	r26, r24
    7096:	cb 01       	movw	r24, r22
    7098:	8f 83       	std	Y+7, r24	; 0x07
    709a:	98 87       	std	Y+8, r25	; 0x08
    709c:	a9 87       	std	Y+9, r26	; 0x09
    709e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    70a0:	6f 81       	ldd	r22, Y+7	; 0x07
    70a2:	78 85       	ldd	r23, Y+8	; 0x08
    70a4:	89 85       	ldd	r24, Y+9	; 0x09
    70a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    70a8:	20 e0       	ldi	r18, 0x00	; 0
    70aa:	30 e0       	ldi	r19, 0x00	; 0
    70ac:	40 e8       	ldi	r20, 0x80	; 128
    70ae:	5f e3       	ldi	r21, 0x3F	; 63
    70b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    70b4:	88 23       	and	r24, r24
    70b6:	2c f4       	brge	.+10     	; 0x70c2 <HLCD_enInit+0xc0>
		__ticks = 1;
    70b8:	81 e0       	ldi	r24, 0x01	; 1
    70ba:	90 e0       	ldi	r25, 0x00	; 0
    70bc:	9e 83       	std	Y+6, r25	; 0x06
    70be:	8d 83       	std	Y+5, r24	; 0x05
    70c0:	3f c0       	rjmp	.+126    	; 0x7140 <HLCD_enInit+0x13e>
	else if (__tmp > 65535)
    70c2:	6f 81       	ldd	r22, Y+7	; 0x07
    70c4:	78 85       	ldd	r23, Y+8	; 0x08
    70c6:	89 85       	ldd	r24, Y+9	; 0x09
    70c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    70ca:	20 e0       	ldi	r18, 0x00	; 0
    70cc:	3f ef       	ldi	r19, 0xFF	; 255
    70ce:	4f e7       	ldi	r20, 0x7F	; 127
    70d0:	57 e4       	ldi	r21, 0x47	; 71
    70d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    70d6:	18 16       	cp	r1, r24
    70d8:	4c f5       	brge	.+82     	; 0x712c <HLCD_enInit+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    70da:	6b 85       	ldd	r22, Y+11	; 0x0b
    70dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    70de:	8d 85       	ldd	r24, Y+13	; 0x0d
    70e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    70e2:	20 e0       	ldi	r18, 0x00	; 0
    70e4:	30 e0       	ldi	r19, 0x00	; 0
    70e6:	40 e2       	ldi	r20, 0x20	; 32
    70e8:	51 e4       	ldi	r21, 0x41	; 65
    70ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    70ee:	dc 01       	movw	r26, r24
    70f0:	cb 01       	movw	r24, r22
    70f2:	bc 01       	movw	r22, r24
    70f4:	cd 01       	movw	r24, r26
    70f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    70fa:	dc 01       	movw	r26, r24
    70fc:	cb 01       	movw	r24, r22
    70fe:	9e 83       	std	Y+6, r25	; 0x06
    7100:	8d 83       	std	Y+5, r24	; 0x05
    7102:	0f c0       	rjmp	.+30     	; 0x7122 <HLCD_enInit+0x120>
    7104:	80 e9       	ldi	r24, 0x90	; 144
    7106:	91 e0       	ldi	r25, 0x01	; 1
    7108:	9c 83       	std	Y+4, r25	; 0x04
    710a:	8b 83       	std	Y+3, r24	; 0x03
    710c:	8b 81       	ldd	r24, Y+3	; 0x03
    710e:	9c 81       	ldd	r25, Y+4	; 0x04
    7110:	01 97       	sbiw	r24, 0x01	; 1
    7112:	f1 f7       	brne	.-4      	; 0x7110 <HLCD_enInit+0x10e>
    7114:	9c 83       	std	Y+4, r25	; 0x04
    7116:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7118:	8d 81       	ldd	r24, Y+5	; 0x05
    711a:	9e 81       	ldd	r25, Y+6	; 0x06
    711c:	01 97       	sbiw	r24, 0x01	; 1
    711e:	9e 83       	std	Y+6, r25	; 0x06
    7120:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7122:	8d 81       	ldd	r24, Y+5	; 0x05
    7124:	9e 81       	ldd	r25, Y+6	; 0x06
    7126:	00 97       	sbiw	r24, 0x00	; 0
    7128:	69 f7       	brne	.-38     	; 0x7104 <HLCD_enInit+0x102>
    712a:	14 c0       	rjmp	.+40     	; 0x7154 <HLCD_enInit+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    712c:	6f 81       	ldd	r22, Y+7	; 0x07
    712e:	78 85       	ldd	r23, Y+8	; 0x08
    7130:	89 85       	ldd	r24, Y+9	; 0x09
    7132:	9a 85       	ldd	r25, Y+10	; 0x0a
    7134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7138:	dc 01       	movw	r26, r24
    713a:	cb 01       	movw	r24, r22
    713c:	9e 83       	std	Y+6, r25	; 0x06
    713e:	8d 83       	std	Y+5, r24	; 0x05
    7140:	8d 81       	ldd	r24, Y+5	; 0x05
    7142:	9e 81       	ldd	r25, Y+6	; 0x06
    7144:	9a 83       	std	Y+2, r25	; 0x02
    7146:	89 83       	std	Y+1, r24	; 0x01
    7148:	89 81       	ldd	r24, Y+1	; 0x01
    714a:	9a 81       	ldd	r25, Y+2	; 0x02
    714c:	01 97       	sbiw	r24, 0x01	; 1
    714e:	f1 f7       	brne	.-4      	; 0x714c <HLCD_enInit+0x14a>
    7150:	9a 83       	std	Y+2, r25	; 0x02
    7152:	89 83       	std	Y+1, r24	; 0x01
#if(HLCD_MODE != HLCD_4BIT_MODE)
	/*************** 8-bit Mode Initialization Steps ***************/
	/** Delay More than 30ms **/
	_delay_ms(35);
	/** Function Set Command **/
	HLCD_enSendCommand(HLCD_CMD_FUNCTION_SET_2LINES_5X8_8BIT);
    7154:	88 e3       	ldi	r24, 0x38	; 56
    7156:	0e 94 c0 38 	call	0x7180	; 0x7180 <HLCD_enSendCommand>
	/** Display Control Command **/
	HLCD_enSendCommand(HLCD_CMD_DISPLAY_ON_CURSOR_OFF_BLINK_OFF);
    715a:	8c e0       	ldi	r24, 0x0C	; 12
    715c:	0e 94 c0 38 	call	0x7180	; 0x7180 <HLCD_enSendCommand>
	/** Display Clear Command **/
	HLCD_enSendCommand(HLCD_CMD_CLEAR_DISPLAY);
    7160:	81 e0       	ldi	r24, 0x01	; 1
    7162:	0e 94 c0 38 	call	0x7180	; 0x7180 <HLCD_enSendCommand>
	/** Entry Mode Set **/
	HLCD_enSendCommand(HLCD_CMD_ENTRY_MODE_SET_INC_NO_SHIFT);
    7166:	86 e0       	ldi	r24, 0x06	; 6
    7168:	0e 94 c0 38 	call	0x7180	; 0x7180 <HLCD_enSendCommand>

	/**
	 * Note: Delay after each Send Command is included in Send Command Function.
	 */

	return Local_enState;
    716c:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    716e:	2f 96       	adiw	r28, 0x0f	; 15
    7170:	0f b6       	in	r0, 0x3f	; 63
    7172:	f8 94       	cli
    7174:	de bf       	out	0x3e, r29	; 62
    7176:	0f be       	out	0x3f, r0	; 63
    7178:	cd bf       	out	0x3d, r28	; 61
    717a:	cf 91       	pop	r28
    717c:	df 91       	pop	r29
    717e:	08 95       	ret

00007180 <HLCD_enSendCommand>:

ErrorState_t HLCD_enSendCommand(u8 copy_u8Command) {
    7180:	df 93       	push	r29
    7182:	cf 93       	push	r28
    7184:	00 d0       	rcall	.+0      	; 0x7186 <HLCD_enSendCommand+0x6>
    7186:	cd b7       	in	r28, 0x3d	; 61
    7188:	de b7       	in	r29, 0x3e	; 62
    718a:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    718c:	19 82       	std	Y+1, r1	; 0x01
	/** Set RS to High for Sending Command **/
	MDIO_enSetPinValue(HLCD_RS_PIN, LOW);
    718e:	84 e1       	ldi	r24, 0x14	; 20
    7190:	60 e0       	ldi	r22, 0x00	; 0
    7192:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
	/** Set RW to Low for Writing **/
	MDIO_enSetPinValue(HLCD_RW_PIN, LOW);
    7196:	85 e1       	ldi	r24, 0x15	; 21
    7198:	60 e0       	ldi	r22, 0x00	; 0
    719a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
	/** Send Command to Data Pins (4-Bit or 8-Bit Mode) **/
	HLCD_voidNLatch(copy_u8Command);
    719e:	8a 81       	ldd	r24, Y+2	; 0x02
    71a0:	0e 94 28 37 	call	0x6e50	; 0x6e50 <HLCD_voidNLatch>
	return Local_enState;
    71a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    71a6:	0f 90       	pop	r0
    71a8:	0f 90       	pop	r0
    71aa:	cf 91       	pop	r28
    71ac:	df 91       	pop	r29
    71ae:	08 95       	ret

000071b0 <HLCD_enSendData>:

ErrorState_t HLCD_enSendData(u8 copy_u8Data) {
    71b0:	df 93       	push	r29
    71b2:	cf 93       	push	r28
    71b4:	00 d0       	rcall	.+0      	; 0x71b6 <HLCD_enSendData+0x6>
    71b6:	cd b7       	in	r28, 0x3d	; 61
    71b8:	de b7       	in	r29, 0x3e	; 62
    71ba:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    71bc:	19 82       	std	Y+1, r1	; 0x01
	/** Set RS to High for Sending Data **/
	MDIO_enSetPinValue(HLCD_RS_PIN, HIGH);
    71be:	84 e1       	ldi	r24, 0x14	; 20
    71c0:	61 e0       	ldi	r22, 0x01	; 1
    71c2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
	/** Set RW to Low for Writing **/
	MDIO_enSetPinValue(HLCD_RW_PIN, LOW);
    71c6:	85 e1       	ldi	r24, 0x15	; 21
    71c8:	60 e0       	ldi	r22, 0x00	; 0
    71ca:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
	/** Send Data to Data Pins (4-Bit or 8-Bit Mode) **/
	HLCD_voidNLatch(copy_u8Data);
    71ce:	8a 81       	ldd	r24, Y+2	; 0x02
    71d0:	0e 94 28 37 	call	0x6e50	; 0x6e50 <HLCD_voidNLatch>
	return Local_enState;
    71d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    71d6:	0f 90       	pop	r0
    71d8:	0f 90       	pop	r0
    71da:	cf 91       	pop	r28
    71dc:	df 91       	pop	r29
    71de:	08 95       	ret

000071e0 <HLCD_enSendString>:

ErrorState_t HLCD_enSendString(const char *ptrString) {
    71e0:	df 93       	push	r29
    71e2:	cf 93       	push	r28
    71e4:	cd b7       	in	r28, 0x3d	; 61
    71e6:	de b7       	in	r29, 0x3e	; 62
    71e8:	e1 97       	sbiw	r28, 0x31	; 49
    71ea:	0f b6       	in	r0, 0x3f	; 63
    71ec:	f8 94       	cli
    71ee:	de bf       	out	0x3e, r29	; 62
    71f0:	0f be       	out	0x3f, r0	; 63
    71f2:	cd bf       	out	0x3d, r28	; 61
    71f4:	99 ab       	std	Y+49, r25	; 0x31
    71f6:	88 ab       	std	Y+48, r24	; 0x30
	ErrorState_t Local_enState = SUCCESS;
    71f8:	1f a6       	std	Y+47, r1	; 0x2f
	if (NULL != ptrString) {
    71fa:	88 a9       	ldd	r24, Y+48	; 0x30
    71fc:	99 a9       	ldd	r25, Y+49	; 0x31
    71fe:	00 97       	sbiw	r24, 0x00	; 0
    7200:	09 f4       	brne	.+2      	; 0x7204 <HLCD_enSendString+0x24>
    7202:	93 c1       	rjmp	.+806    	; 0x752a <HLCD_enSendString+0x34a>
		s8 Local_s8Counter1 = 0; // Count the String Characters
    7204:	1e a6       	std	Y+46, r1	; 0x2e
		s8 Local_s8Counter2 = 0; // Count Position of Y
    7206:	1d a6       	std	Y+45, r1	; 0x2d
		s8 Local_s8Counter3 = 0; // Inner Counter to Clear LCD when it FUll
    7208:	1c a6       	std	Y+44, r1	; 0x2c
		u8 Local_u8InitialX = 0;
    720a:	1b a6       	std	Y+43, r1	; 0x2b
    720c:	7f c1       	rjmp	.+766    	; 0x750c <HLCD_enSendString+0x32c>
		while (ptrString[Local_s8Counter1] != '\0') {
			/** This part to handle overflow of the row and entire LCD **/
			if (Local_s8Counter2 == 16) {
    720e:	8d a5       	ldd	r24, Y+45	; 0x2d
    7210:	80 31       	cpi	r24, 0x10	; 16
    7212:	61 f4       	brne	.+24     	; 0x722c <HLCD_enSendString+0x4c>
				TOGG_BIT(Local_u8InitialX, 0);
    7214:	9b a5       	ldd	r25, Y+43	; 0x2b
    7216:	81 e0       	ldi	r24, 0x01	; 1
    7218:	89 27       	eor	r24, r25
    721a:	8b a7       	std	Y+43, r24	; 0x2b
				HLCD_enGoToXY(Local_u8InitialX, 0);
    721c:	8b a5       	ldd	r24, Y+43	; 0x2b
    721e:	60 e0       	ldi	r22, 0x00	; 0
    7220:	0e 94 35 3b 	call	0x766a	; 0x766a <HLCD_enGoToXY>
				Local_s8Counter2 = 0;
    7224:	1d a6       	std	Y+45, r1	; 0x2d
				Local_s8Counter3++;
    7226:	8c a5       	ldd	r24, Y+44	; 0x2c
    7228:	8f 5f       	subi	r24, 0xFF	; 255
    722a:	8c a7       	std	Y+44, r24	; 0x2c
			} // if Local_s8Counter2 == 16
			if (Local_s8Counter3 == 2) {
    722c:	8c a5       	ldd	r24, Y+44	; 0x2c
    722e:	82 30       	cpi	r24, 0x02	; 2
    7230:	09 f0       	breq	.+2      	; 0x7234 <HLCD_enSendString+0x54>
    7232:	e7 c0       	rjmp	.+462    	; 0x7402 <HLCD_enSendString+0x222>
    7234:	80 e0       	ldi	r24, 0x00	; 0
    7236:	90 e0       	ldi	r25, 0x00	; 0
    7238:	aa ef       	ldi	r26, 0xFA	; 250
    723a:	b3 e4       	ldi	r27, 0x43	; 67
    723c:	8f a3       	std	Y+39, r24	; 0x27
    723e:	98 a7       	std	Y+40, r25	; 0x28
    7240:	a9 a7       	std	Y+41, r26	; 0x29
    7242:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7244:	6f a1       	ldd	r22, Y+39	; 0x27
    7246:	78 a5       	ldd	r23, Y+40	; 0x28
    7248:	89 a5       	ldd	r24, Y+41	; 0x29
    724a:	9a a5       	ldd	r25, Y+42	; 0x2a
    724c:	20 e0       	ldi	r18, 0x00	; 0
    724e:	30 e0       	ldi	r19, 0x00	; 0
    7250:	4a e7       	ldi	r20, 0x7A	; 122
    7252:	55 e4       	ldi	r21, 0x45	; 69
    7254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7258:	dc 01       	movw	r26, r24
    725a:	cb 01       	movw	r24, r22
    725c:	8b a3       	std	Y+35, r24	; 0x23
    725e:	9c a3       	std	Y+36, r25	; 0x24
    7260:	ad a3       	std	Y+37, r26	; 0x25
    7262:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    7264:	6b a1       	ldd	r22, Y+35	; 0x23
    7266:	7c a1       	ldd	r23, Y+36	; 0x24
    7268:	8d a1       	ldd	r24, Y+37	; 0x25
    726a:	9e a1       	ldd	r25, Y+38	; 0x26
    726c:	20 e0       	ldi	r18, 0x00	; 0
    726e:	30 e0       	ldi	r19, 0x00	; 0
    7270:	40 e8       	ldi	r20, 0x80	; 128
    7272:	5f e3       	ldi	r21, 0x3F	; 63
    7274:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7278:	88 23       	and	r24, r24
    727a:	2c f4       	brge	.+10     	; 0x7286 <HLCD_enSendString+0xa6>
		__ticks = 1;
    727c:	81 e0       	ldi	r24, 0x01	; 1
    727e:	90 e0       	ldi	r25, 0x00	; 0
    7280:	9a a3       	std	Y+34, r25	; 0x22
    7282:	89 a3       	std	Y+33, r24	; 0x21
    7284:	3f c0       	rjmp	.+126    	; 0x7304 <HLCD_enSendString+0x124>
	else if (__tmp > 65535)
    7286:	6b a1       	ldd	r22, Y+35	; 0x23
    7288:	7c a1       	ldd	r23, Y+36	; 0x24
    728a:	8d a1       	ldd	r24, Y+37	; 0x25
    728c:	9e a1       	ldd	r25, Y+38	; 0x26
    728e:	20 e0       	ldi	r18, 0x00	; 0
    7290:	3f ef       	ldi	r19, 0xFF	; 255
    7292:	4f e7       	ldi	r20, 0x7F	; 127
    7294:	57 e4       	ldi	r21, 0x47	; 71
    7296:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    729a:	18 16       	cp	r1, r24
    729c:	4c f5       	brge	.+82     	; 0x72f0 <HLCD_enSendString+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    729e:	6f a1       	ldd	r22, Y+39	; 0x27
    72a0:	78 a5       	ldd	r23, Y+40	; 0x28
    72a2:	89 a5       	ldd	r24, Y+41	; 0x29
    72a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    72a6:	20 e0       	ldi	r18, 0x00	; 0
    72a8:	30 e0       	ldi	r19, 0x00	; 0
    72aa:	40 e2       	ldi	r20, 0x20	; 32
    72ac:	51 e4       	ldi	r21, 0x41	; 65
    72ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    72b2:	dc 01       	movw	r26, r24
    72b4:	cb 01       	movw	r24, r22
    72b6:	bc 01       	movw	r22, r24
    72b8:	cd 01       	movw	r24, r26
    72ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    72be:	dc 01       	movw	r26, r24
    72c0:	cb 01       	movw	r24, r22
    72c2:	9a a3       	std	Y+34, r25	; 0x22
    72c4:	89 a3       	std	Y+33, r24	; 0x21
    72c6:	0f c0       	rjmp	.+30     	; 0x72e6 <HLCD_enSendString+0x106>
    72c8:	80 e9       	ldi	r24, 0x90	; 144
    72ca:	91 e0       	ldi	r25, 0x01	; 1
    72cc:	98 a3       	std	Y+32, r25	; 0x20
    72ce:	8f 8f       	std	Y+31, r24	; 0x1f
    72d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    72d2:	98 a1       	ldd	r25, Y+32	; 0x20
    72d4:	01 97       	sbiw	r24, 0x01	; 1
    72d6:	f1 f7       	brne	.-4      	; 0x72d4 <HLCD_enSendString+0xf4>
    72d8:	98 a3       	std	Y+32, r25	; 0x20
    72da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    72dc:	89 a1       	ldd	r24, Y+33	; 0x21
    72de:	9a a1       	ldd	r25, Y+34	; 0x22
    72e0:	01 97       	sbiw	r24, 0x01	; 1
    72e2:	9a a3       	std	Y+34, r25	; 0x22
    72e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    72e6:	89 a1       	ldd	r24, Y+33	; 0x21
    72e8:	9a a1       	ldd	r25, Y+34	; 0x22
    72ea:	00 97       	sbiw	r24, 0x00	; 0
    72ec:	69 f7       	brne	.-38     	; 0x72c8 <HLCD_enSendString+0xe8>
    72ee:	14 c0       	rjmp	.+40     	; 0x7318 <HLCD_enSendString+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    72f0:	6b a1       	ldd	r22, Y+35	; 0x23
    72f2:	7c a1       	ldd	r23, Y+36	; 0x24
    72f4:	8d a1       	ldd	r24, Y+37	; 0x25
    72f6:	9e a1       	ldd	r25, Y+38	; 0x26
    72f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    72fc:	dc 01       	movw	r26, r24
    72fe:	cb 01       	movw	r24, r22
    7300:	9a a3       	std	Y+34, r25	; 0x22
    7302:	89 a3       	std	Y+33, r24	; 0x21
    7304:	89 a1       	ldd	r24, Y+33	; 0x21
    7306:	9a a1       	ldd	r25, Y+34	; 0x22
    7308:	9e 8f       	std	Y+30, r25	; 0x1e
    730a:	8d 8f       	std	Y+29, r24	; 0x1d
    730c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    730e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7310:	01 97       	sbiw	r24, 0x01	; 1
    7312:	f1 f7       	brne	.-4      	; 0x7310 <HLCD_enSendString+0x130>
    7314:	9e 8f       	std	Y+30, r25	; 0x1e
    7316:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(HLCD_OVERFLOW_DELAY);
				HLCD_enClearDisplay();
    7318:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <HLCD_enClearDisplay>
    731c:	80 e0       	ldi	r24, 0x00	; 0
    731e:	90 e0       	ldi	r25, 0x00	; 0
    7320:	aa ef       	ldi	r26, 0xFA	; 250
    7322:	b3 e4       	ldi	r27, 0x43	; 67
    7324:	89 8f       	std	Y+25, r24	; 0x19
    7326:	9a 8f       	std	Y+26, r25	; 0x1a
    7328:	ab 8f       	std	Y+27, r26	; 0x1b
    732a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    732c:	69 8d       	ldd	r22, Y+25	; 0x19
    732e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7330:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7332:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7334:	20 e0       	ldi	r18, 0x00	; 0
    7336:	30 e0       	ldi	r19, 0x00	; 0
    7338:	4a e7       	ldi	r20, 0x7A	; 122
    733a:	55 e4       	ldi	r21, 0x45	; 69
    733c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7340:	dc 01       	movw	r26, r24
    7342:	cb 01       	movw	r24, r22
    7344:	8d 8b       	std	Y+21, r24	; 0x15
    7346:	9e 8b       	std	Y+22, r25	; 0x16
    7348:	af 8b       	std	Y+23, r26	; 0x17
    734a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    734c:	6d 89       	ldd	r22, Y+21	; 0x15
    734e:	7e 89       	ldd	r23, Y+22	; 0x16
    7350:	8f 89       	ldd	r24, Y+23	; 0x17
    7352:	98 8d       	ldd	r25, Y+24	; 0x18
    7354:	20 e0       	ldi	r18, 0x00	; 0
    7356:	30 e0       	ldi	r19, 0x00	; 0
    7358:	40 e8       	ldi	r20, 0x80	; 128
    735a:	5f e3       	ldi	r21, 0x3F	; 63
    735c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7360:	88 23       	and	r24, r24
    7362:	2c f4       	brge	.+10     	; 0x736e <HLCD_enSendString+0x18e>
		__ticks = 1;
    7364:	81 e0       	ldi	r24, 0x01	; 1
    7366:	90 e0       	ldi	r25, 0x00	; 0
    7368:	9c 8b       	std	Y+20, r25	; 0x14
    736a:	8b 8b       	std	Y+19, r24	; 0x13
    736c:	3f c0       	rjmp	.+126    	; 0x73ec <HLCD_enSendString+0x20c>
	else if (__tmp > 65535)
    736e:	6d 89       	ldd	r22, Y+21	; 0x15
    7370:	7e 89       	ldd	r23, Y+22	; 0x16
    7372:	8f 89       	ldd	r24, Y+23	; 0x17
    7374:	98 8d       	ldd	r25, Y+24	; 0x18
    7376:	20 e0       	ldi	r18, 0x00	; 0
    7378:	3f ef       	ldi	r19, 0xFF	; 255
    737a:	4f e7       	ldi	r20, 0x7F	; 127
    737c:	57 e4       	ldi	r21, 0x47	; 71
    737e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7382:	18 16       	cp	r1, r24
    7384:	4c f5       	brge	.+82     	; 0x73d8 <HLCD_enSendString+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7386:	69 8d       	ldd	r22, Y+25	; 0x19
    7388:	7a 8d       	ldd	r23, Y+26	; 0x1a
    738a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    738c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    738e:	20 e0       	ldi	r18, 0x00	; 0
    7390:	30 e0       	ldi	r19, 0x00	; 0
    7392:	40 e2       	ldi	r20, 0x20	; 32
    7394:	51 e4       	ldi	r21, 0x41	; 65
    7396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    739a:	dc 01       	movw	r26, r24
    739c:	cb 01       	movw	r24, r22
    739e:	bc 01       	movw	r22, r24
    73a0:	cd 01       	movw	r24, r26
    73a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    73a6:	dc 01       	movw	r26, r24
    73a8:	cb 01       	movw	r24, r22
    73aa:	9c 8b       	std	Y+20, r25	; 0x14
    73ac:	8b 8b       	std	Y+19, r24	; 0x13
    73ae:	0f c0       	rjmp	.+30     	; 0x73ce <HLCD_enSendString+0x1ee>
    73b0:	80 e9       	ldi	r24, 0x90	; 144
    73b2:	91 e0       	ldi	r25, 0x01	; 1
    73b4:	9a 8b       	std	Y+18, r25	; 0x12
    73b6:	89 8b       	std	Y+17, r24	; 0x11
    73b8:	89 89       	ldd	r24, Y+17	; 0x11
    73ba:	9a 89       	ldd	r25, Y+18	; 0x12
    73bc:	01 97       	sbiw	r24, 0x01	; 1
    73be:	f1 f7       	brne	.-4      	; 0x73bc <HLCD_enSendString+0x1dc>
    73c0:	9a 8b       	std	Y+18, r25	; 0x12
    73c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    73c4:	8b 89       	ldd	r24, Y+19	; 0x13
    73c6:	9c 89       	ldd	r25, Y+20	; 0x14
    73c8:	01 97       	sbiw	r24, 0x01	; 1
    73ca:	9c 8b       	std	Y+20, r25	; 0x14
    73cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    73ce:	8b 89       	ldd	r24, Y+19	; 0x13
    73d0:	9c 89       	ldd	r25, Y+20	; 0x14
    73d2:	00 97       	sbiw	r24, 0x00	; 0
    73d4:	69 f7       	brne	.-38     	; 0x73b0 <HLCD_enSendString+0x1d0>
    73d6:	14 c0       	rjmp	.+40     	; 0x7400 <HLCD_enSendString+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    73d8:	6d 89       	ldd	r22, Y+21	; 0x15
    73da:	7e 89       	ldd	r23, Y+22	; 0x16
    73dc:	8f 89       	ldd	r24, Y+23	; 0x17
    73de:	98 8d       	ldd	r25, Y+24	; 0x18
    73e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    73e4:	dc 01       	movw	r26, r24
    73e6:	cb 01       	movw	r24, r22
    73e8:	9c 8b       	std	Y+20, r25	; 0x14
    73ea:	8b 8b       	std	Y+19, r24	; 0x13
    73ec:	8b 89       	ldd	r24, Y+19	; 0x13
    73ee:	9c 89       	ldd	r25, Y+20	; 0x14
    73f0:	98 8b       	std	Y+16, r25	; 0x10
    73f2:	8f 87       	std	Y+15, r24	; 0x0f
    73f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    73f6:	98 89       	ldd	r25, Y+16	; 0x10
    73f8:	01 97       	sbiw	r24, 0x01	; 1
    73fa:	f1 f7       	brne	.-4      	; 0x73f8 <HLCD_enSendString+0x218>
    73fc:	98 8b       	std	Y+16, r25	; 0x10
    73fe:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(HLCD_OVERFLOW_DELAY);
				Local_s8Counter3 = 0;
    7400:	1c a6       	std	Y+44, r1	; 0x2c
    7402:	80 e0       	ldi	r24, 0x00	; 0
    7404:	90 e0       	ldi	r25, 0x00	; 0
    7406:	a8 e4       	ldi	r26, 0x48	; 72
    7408:	b2 e4       	ldi	r27, 0x42	; 66
    740a:	8b 87       	std	Y+11, r24	; 0x0b
    740c:	9c 87       	std	Y+12, r25	; 0x0c
    740e:	ad 87       	std	Y+13, r26	; 0x0d
    7410:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7412:	6b 85       	ldd	r22, Y+11	; 0x0b
    7414:	7c 85       	ldd	r23, Y+12	; 0x0c
    7416:	8d 85       	ldd	r24, Y+13	; 0x0d
    7418:	9e 85       	ldd	r25, Y+14	; 0x0e
    741a:	20 e0       	ldi	r18, 0x00	; 0
    741c:	30 e0       	ldi	r19, 0x00	; 0
    741e:	4a e7       	ldi	r20, 0x7A	; 122
    7420:	55 e4       	ldi	r21, 0x45	; 69
    7422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7426:	dc 01       	movw	r26, r24
    7428:	cb 01       	movw	r24, r22
    742a:	8f 83       	std	Y+7, r24	; 0x07
    742c:	98 87       	std	Y+8, r25	; 0x08
    742e:	a9 87       	std	Y+9, r26	; 0x09
    7430:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7432:	6f 81       	ldd	r22, Y+7	; 0x07
    7434:	78 85       	ldd	r23, Y+8	; 0x08
    7436:	89 85       	ldd	r24, Y+9	; 0x09
    7438:	9a 85       	ldd	r25, Y+10	; 0x0a
    743a:	20 e0       	ldi	r18, 0x00	; 0
    743c:	30 e0       	ldi	r19, 0x00	; 0
    743e:	40 e8       	ldi	r20, 0x80	; 128
    7440:	5f e3       	ldi	r21, 0x3F	; 63
    7442:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7446:	88 23       	and	r24, r24
    7448:	2c f4       	brge	.+10     	; 0x7454 <HLCD_enSendString+0x274>
		__ticks = 1;
    744a:	81 e0       	ldi	r24, 0x01	; 1
    744c:	90 e0       	ldi	r25, 0x00	; 0
    744e:	9e 83       	std	Y+6, r25	; 0x06
    7450:	8d 83       	std	Y+5, r24	; 0x05
    7452:	3f c0       	rjmp	.+126    	; 0x74d2 <HLCD_enSendString+0x2f2>
	else if (__tmp > 65535)
    7454:	6f 81       	ldd	r22, Y+7	; 0x07
    7456:	78 85       	ldd	r23, Y+8	; 0x08
    7458:	89 85       	ldd	r24, Y+9	; 0x09
    745a:	9a 85       	ldd	r25, Y+10	; 0x0a
    745c:	20 e0       	ldi	r18, 0x00	; 0
    745e:	3f ef       	ldi	r19, 0xFF	; 255
    7460:	4f e7       	ldi	r20, 0x7F	; 127
    7462:	57 e4       	ldi	r21, 0x47	; 71
    7464:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7468:	18 16       	cp	r1, r24
    746a:	4c f5       	brge	.+82     	; 0x74be <HLCD_enSendString+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    746c:	6b 85       	ldd	r22, Y+11	; 0x0b
    746e:	7c 85       	ldd	r23, Y+12	; 0x0c
    7470:	8d 85       	ldd	r24, Y+13	; 0x0d
    7472:	9e 85       	ldd	r25, Y+14	; 0x0e
    7474:	20 e0       	ldi	r18, 0x00	; 0
    7476:	30 e0       	ldi	r19, 0x00	; 0
    7478:	40 e2       	ldi	r20, 0x20	; 32
    747a:	51 e4       	ldi	r21, 0x41	; 65
    747c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7480:	dc 01       	movw	r26, r24
    7482:	cb 01       	movw	r24, r22
    7484:	bc 01       	movw	r22, r24
    7486:	cd 01       	movw	r24, r26
    7488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    748c:	dc 01       	movw	r26, r24
    748e:	cb 01       	movw	r24, r22
    7490:	9e 83       	std	Y+6, r25	; 0x06
    7492:	8d 83       	std	Y+5, r24	; 0x05
    7494:	0f c0       	rjmp	.+30     	; 0x74b4 <HLCD_enSendString+0x2d4>
    7496:	80 e9       	ldi	r24, 0x90	; 144
    7498:	91 e0       	ldi	r25, 0x01	; 1
    749a:	9c 83       	std	Y+4, r25	; 0x04
    749c:	8b 83       	std	Y+3, r24	; 0x03
    749e:	8b 81       	ldd	r24, Y+3	; 0x03
    74a0:	9c 81       	ldd	r25, Y+4	; 0x04
    74a2:	01 97       	sbiw	r24, 0x01	; 1
    74a4:	f1 f7       	brne	.-4      	; 0x74a2 <HLCD_enSendString+0x2c2>
    74a6:	9c 83       	std	Y+4, r25	; 0x04
    74a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    74aa:	8d 81       	ldd	r24, Y+5	; 0x05
    74ac:	9e 81       	ldd	r25, Y+6	; 0x06
    74ae:	01 97       	sbiw	r24, 0x01	; 1
    74b0:	9e 83       	std	Y+6, r25	; 0x06
    74b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    74b4:	8d 81       	ldd	r24, Y+5	; 0x05
    74b6:	9e 81       	ldd	r25, Y+6	; 0x06
    74b8:	00 97       	sbiw	r24, 0x00	; 0
    74ba:	69 f7       	brne	.-38     	; 0x7496 <HLCD_enSendString+0x2b6>
    74bc:	14 c0       	rjmp	.+40     	; 0x74e6 <HLCD_enSendString+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    74be:	6f 81       	ldd	r22, Y+7	; 0x07
    74c0:	78 85       	ldd	r23, Y+8	; 0x08
    74c2:	89 85       	ldd	r24, Y+9	; 0x09
    74c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    74c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    74ca:	dc 01       	movw	r26, r24
    74cc:	cb 01       	movw	r24, r22
    74ce:	9e 83       	std	Y+6, r25	; 0x06
    74d0:	8d 83       	std	Y+5, r24	; 0x05
    74d2:	8d 81       	ldd	r24, Y+5	; 0x05
    74d4:	9e 81       	ldd	r25, Y+6	; 0x06
    74d6:	9a 83       	std	Y+2, r25	; 0x02
    74d8:	89 83       	std	Y+1, r24	; 0x01
    74da:	89 81       	ldd	r24, Y+1	; 0x01
    74dc:	9a 81       	ldd	r25, Y+2	; 0x02
    74de:	01 97       	sbiw	r24, 0x01	; 1
    74e0:	f1 f7       	brne	.-4      	; 0x74de <HLCD_enSendString+0x2fe>
    74e2:	9a 83       	std	Y+2, r25	; 0x02
    74e4:	89 83       	std	Y+1, r24	; 0x01
			} // if Local_s8Counter3 == 2
			/** This part to handle overflow of the row and entire LCD **/
			_delay_ms(HLCD_WRITING_DELAY);
			HLCD_enSendData(ptrString[Local_s8Counter1]);
    74e6:	8e a5       	ldd	r24, Y+46	; 0x2e
    74e8:	28 2f       	mov	r18, r24
    74ea:	33 27       	eor	r19, r19
    74ec:	27 fd       	sbrc	r18, 7
    74ee:	30 95       	com	r19
    74f0:	88 a9       	ldd	r24, Y+48	; 0x30
    74f2:	99 a9       	ldd	r25, Y+49	; 0x31
    74f4:	fc 01       	movw	r30, r24
    74f6:	e2 0f       	add	r30, r18
    74f8:	f3 1f       	adc	r31, r19
    74fa:	80 81       	ld	r24, Z
    74fc:	0e 94 d8 38 	call	0x71b0	; 0x71b0 <HLCD_enSendData>
			Local_s8Counter1++;
    7500:	8e a5       	ldd	r24, Y+46	; 0x2e
    7502:	8f 5f       	subi	r24, 0xFF	; 255
    7504:	8e a7       	std	Y+46, r24	; 0x2e
			Local_s8Counter2++;
    7506:	8d a5       	ldd	r24, Y+45	; 0x2d
    7508:	8f 5f       	subi	r24, 0xFF	; 255
    750a:	8d a7       	std	Y+45, r24	; 0x2d
	if (NULL != ptrString) {
		s8 Local_s8Counter1 = 0; // Count the String Characters
		s8 Local_s8Counter2 = 0; // Count Position of Y
		s8 Local_s8Counter3 = 0; // Inner Counter to Clear LCD when it FUll
		u8 Local_u8InitialX = 0;
		while (ptrString[Local_s8Counter1] != '\0') {
    750c:	8e a5       	ldd	r24, Y+46	; 0x2e
    750e:	28 2f       	mov	r18, r24
    7510:	33 27       	eor	r19, r19
    7512:	27 fd       	sbrc	r18, 7
    7514:	30 95       	com	r19
    7516:	88 a9       	ldd	r24, Y+48	; 0x30
    7518:	99 a9       	ldd	r25, Y+49	; 0x31
    751a:	fc 01       	movw	r30, r24
    751c:	e2 0f       	add	r30, r18
    751e:	f3 1f       	adc	r31, r19
    7520:	80 81       	ld	r24, Z
    7522:	88 23       	and	r24, r24
    7524:	09 f0       	breq	.+2      	; 0x7528 <HLCD_enSendString+0x348>
    7526:	73 ce       	rjmp	.-794    	; 0x720e <HLCD_enSendString+0x2e>
    7528:	02 c0       	rjmp	.+4      	; 0x752e <HLCD_enSendString+0x34e>
			HLCD_enSendData(ptrString[Local_s8Counter1]);
			Local_s8Counter1++;
			Local_s8Counter2++;
		} // while
	} else {
		Local_enState = NULL_POINTER;
    752a:	82 e0       	ldi	r24, 0x02	; 2
    752c:	8f a7       	std	Y+47, r24	; 0x2f
	} // else
	return Local_enState;
    752e:	8f a5       	ldd	r24, Y+47	; 0x2f
}
    7530:	e1 96       	adiw	r28, 0x31	; 49
    7532:	0f b6       	in	r0, 0x3f	; 63
    7534:	f8 94       	cli
    7536:	de bf       	out	0x3e, r29	; 62
    7538:	0f be       	out	0x3f, r0	; 63
    753a:	cd bf       	out	0x3d, r28	; 61
    753c:	cf 91       	pop	r28
    753e:	df 91       	pop	r29
    7540:	08 95       	ret

00007542 <HLCD_enSendIntegerNumber>:

ErrorState_t HLCD_enSendIntegerNumber(s32 copy_s32Num) {
    7542:	0f 93       	push	r16
    7544:	1f 93       	push	r17
    7546:	df 93       	push	r29
    7548:	cf 93       	push	r28
    754a:	cd b7       	in	r28, 0x3d	; 61
    754c:	de b7       	in	r29, 0x3e	; 62
    754e:	60 97       	sbiw	r28, 0x10	; 16
    7550:	0f b6       	in	r0, 0x3f	; 63
    7552:	f8 94       	cli
    7554:	de bf       	out	0x3e, r29	; 62
    7556:	0f be       	out	0x3f, r0	; 63
    7558:	cd bf       	out	0x3d, r28	; 61
    755a:	6d 87       	std	Y+13, r22	; 0x0d
    755c:	7e 87       	std	Y+14, r23	; 0x0e
    755e:	8f 87       	std	Y+15, r24	; 0x0f
    7560:	98 8b       	std	Y+16, r25	; 0x10
	ErrorState_t Local_enState = SUCCESS;
    7562:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Numbers[10];
	s8 Local_s8Counter = 0;
    7564:	19 82       	std	Y+1, r1	; 0x01
	if (0 == copy_s32Num) {
    7566:	8d 85       	ldd	r24, Y+13	; 0x0d
    7568:	9e 85       	ldd	r25, Y+14	; 0x0e
    756a:	af 85       	ldd	r26, Y+15	; 0x0f
    756c:	b8 89       	ldd	r27, Y+16	; 0x10
    756e:	00 97       	sbiw	r24, 0x00	; 0
    7570:	a1 05       	cpc	r26, r1
    7572:	b1 05       	cpc	r27, r1
    7574:	21 f4       	brne	.+8      	; 0x757e <HLCD_enSendIntegerNumber+0x3c>
		HLCD_enSendData('0');
    7576:	80 e3       	ldi	r24, 0x30	; 48
    7578:	0e 94 d8 38 	call	0x71b0	; 0x71b0 <HLCD_enSendData>
    757c:	6a c0       	rjmp	.+212    	; 0x7652 <HLCD_enSendIntegerNumber+0x110>
	} else {
		if (0 > copy_s32Num) {
    757e:	8d 85       	ldd	r24, Y+13	; 0x0d
    7580:	9e 85       	ldd	r25, Y+14	; 0x0e
    7582:	af 85       	ldd	r26, Y+15	; 0x0f
    7584:	b8 89       	ldd	r27, Y+16	; 0x10
    7586:	bb 23       	and	r27, r27
    7588:	0c f0       	brlt	.+2      	; 0x758c <HLCD_enSendIntegerNumber+0x4a>
    758a:	42 c0       	rjmp	.+132    	; 0x7610 <HLCD_enSendIntegerNumber+0xce>
			HLCD_enSendData('-');
    758c:	8d e2       	ldi	r24, 0x2D	; 45
    758e:	0e 94 d8 38 	call	0x71b0	; 0x71b0 <HLCD_enSendData>
			copy_s32Num *= -1;
    7592:	8d 85       	ldd	r24, Y+13	; 0x0d
    7594:	9e 85       	ldd	r25, Y+14	; 0x0e
    7596:	af 85       	ldd	r26, Y+15	; 0x0f
    7598:	b8 89       	ldd	r27, Y+16	; 0x10
    759a:	b0 95       	com	r27
    759c:	a0 95       	com	r26
    759e:	90 95       	com	r25
    75a0:	81 95       	neg	r24
    75a2:	9f 4f       	sbci	r25, 0xFF	; 255
    75a4:	af 4f       	sbci	r26, 0xFF	; 255
    75a6:	bf 4f       	sbci	r27, 0xFF	; 255
    75a8:	8d 87       	std	Y+13, r24	; 0x0d
    75aa:	9e 87       	std	Y+14, r25	; 0x0e
    75ac:	af 87       	std	Y+15, r26	; 0x0f
    75ae:	b8 8b       	std	Y+16, r27	; 0x10
    75b0:	2f c0       	rjmp	.+94     	; 0x7610 <HLCD_enSendIntegerNumber+0xce>
		} // if 0 > copy_s32Num
		while (copy_s32Num > 0) {
			Local_u8Numbers[Local_s8Counter] = copy_s32Num % 10;
    75b2:	89 81       	ldd	r24, Y+1	; 0x01
    75b4:	08 2f       	mov	r16, r24
    75b6:	11 27       	eor	r17, r17
    75b8:	07 fd       	sbrc	r16, 7
    75ba:	10 95       	com	r17
    75bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    75be:	9e 85       	ldd	r25, Y+14	; 0x0e
    75c0:	af 85       	ldd	r26, Y+15	; 0x0f
    75c2:	b8 89       	ldd	r27, Y+16	; 0x10
    75c4:	2a e0       	ldi	r18, 0x0A	; 10
    75c6:	30 e0       	ldi	r19, 0x00	; 0
    75c8:	40 e0       	ldi	r20, 0x00	; 0
    75ca:	50 e0       	ldi	r21, 0x00	; 0
    75cc:	bc 01       	movw	r22, r24
    75ce:	cd 01       	movw	r24, r26
    75d0:	0e 94 42 41 	call	0x8284	; 0x8284 <__divmodsi4>
    75d4:	dc 01       	movw	r26, r24
    75d6:	cb 01       	movw	r24, r22
    75d8:	28 2f       	mov	r18, r24
    75da:	ce 01       	movw	r24, r28
    75dc:	03 96       	adiw	r24, 0x03	; 3
    75de:	fc 01       	movw	r30, r24
    75e0:	e0 0f       	add	r30, r16
    75e2:	f1 1f       	adc	r31, r17
    75e4:	20 83       	st	Z, r18
			copy_s32Num /= 10;
    75e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    75e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    75ea:	af 85       	ldd	r26, Y+15	; 0x0f
    75ec:	b8 89       	ldd	r27, Y+16	; 0x10
    75ee:	2a e0       	ldi	r18, 0x0A	; 10
    75f0:	30 e0       	ldi	r19, 0x00	; 0
    75f2:	40 e0       	ldi	r20, 0x00	; 0
    75f4:	50 e0       	ldi	r21, 0x00	; 0
    75f6:	bc 01       	movw	r22, r24
    75f8:	cd 01       	movw	r24, r26
    75fa:	0e 94 42 41 	call	0x8284	; 0x8284 <__divmodsi4>
    75fe:	da 01       	movw	r26, r20
    7600:	c9 01       	movw	r24, r18
    7602:	8d 87       	std	Y+13, r24	; 0x0d
    7604:	9e 87       	std	Y+14, r25	; 0x0e
    7606:	af 87       	std	Y+15, r26	; 0x0f
    7608:	b8 8b       	std	Y+16, r27	; 0x10
			Local_s8Counter++;
    760a:	89 81       	ldd	r24, Y+1	; 0x01
    760c:	8f 5f       	subi	r24, 0xFF	; 255
    760e:	89 83       	std	Y+1, r24	; 0x01
	} else {
		if (0 > copy_s32Num) {
			HLCD_enSendData('-');
			copy_s32Num *= -1;
		} // if 0 > copy_s32Num
		while (copy_s32Num > 0) {
    7610:	8d 85       	ldd	r24, Y+13	; 0x0d
    7612:	9e 85       	ldd	r25, Y+14	; 0x0e
    7614:	af 85       	ldd	r26, Y+15	; 0x0f
    7616:	b8 89       	ldd	r27, Y+16	; 0x10
    7618:	18 16       	cp	r1, r24
    761a:	19 06       	cpc	r1, r25
    761c:	1a 06       	cpc	r1, r26
    761e:	1b 06       	cpc	r1, r27
    7620:	44 f2       	brlt	.-112    	; 0x75b2 <HLCD_enSendIntegerNumber+0x70>
			Local_u8Numbers[Local_s8Counter] = copy_s32Num % 10;
			copy_s32Num /= 10;
			Local_s8Counter++;
		} // while
		Local_s8Counter--;
    7622:	89 81       	ldd	r24, Y+1	; 0x01
    7624:	81 50       	subi	r24, 0x01	; 1
    7626:	89 83       	std	Y+1, r24	; 0x01
    7628:	11 c0       	rjmp	.+34     	; 0x764c <HLCD_enSendIntegerNumber+0x10a>
		for (; Local_s8Counter >= 0; Local_s8Counter--) {
			HLCD_enSendData(Local_u8Numbers[Local_s8Counter] + '0');
    762a:	89 81       	ldd	r24, Y+1	; 0x01
    762c:	28 2f       	mov	r18, r24
    762e:	33 27       	eor	r19, r19
    7630:	27 fd       	sbrc	r18, 7
    7632:	30 95       	com	r19
    7634:	ce 01       	movw	r24, r28
    7636:	03 96       	adiw	r24, 0x03	; 3
    7638:	fc 01       	movw	r30, r24
    763a:	e2 0f       	add	r30, r18
    763c:	f3 1f       	adc	r31, r19
    763e:	80 81       	ld	r24, Z
    7640:	80 5d       	subi	r24, 0xD0	; 208
    7642:	0e 94 d8 38 	call	0x71b0	; 0x71b0 <HLCD_enSendData>
			Local_u8Numbers[Local_s8Counter] = copy_s32Num % 10;
			copy_s32Num /= 10;
			Local_s8Counter++;
		} // while
		Local_s8Counter--;
		for (; Local_s8Counter >= 0; Local_s8Counter--) {
    7646:	89 81       	ldd	r24, Y+1	; 0x01
    7648:	81 50       	subi	r24, 0x01	; 1
    764a:	89 83       	std	Y+1, r24	; 0x01
    764c:	89 81       	ldd	r24, Y+1	; 0x01
    764e:	88 23       	and	r24, r24
    7650:	64 f7       	brge	.-40     	; 0x762a <HLCD_enSendIntegerNumber+0xe8>
			HLCD_enSendData(Local_u8Numbers[Local_s8Counter] + '0');
		} // for
	} // else copy_s32Num != 0
	return Local_enState;
    7652:	8a 81       	ldd	r24, Y+2	; 0x02
}
    7654:	60 96       	adiw	r28, 0x10	; 16
    7656:	0f b6       	in	r0, 0x3f	; 63
    7658:	f8 94       	cli
    765a:	de bf       	out	0x3e, r29	; 62
    765c:	0f be       	out	0x3f, r0	; 63
    765e:	cd bf       	out	0x3d, r28	; 61
    7660:	cf 91       	pop	r28
    7662:	df 91       	pop	r29
    7664:	1f 91       	pop	r17
    7666:	0f 91       	pop	r16
    7668:	08 95       	ret

0000766a <HLCD_enGoToXY>:

ErrorState_t HLCD_enGoToXY(u8 copy_u8X, u8 copy_u8Y) {
    766a:	df 93       	push	r29
    766c:	cf 93       	push	r28
    766e:	00 d0       	rcall	.+0      	; 0x7670 <HLCD_enGoToXY+0x6>
    7670:	00 d0       	rcall	.+0      	; 0x7672 <HLCD_enGoToXY+0x8>
    7672:	cd b7       	in	r28, 0x3d	; 61
    7674:	de b7       	in	r29, 0x3e	; 62
    7676:	8b 83       	std	Y+3, r24	; 0x03
    7678:	6c 83       	std	Y+4, r22	; 0x04
	ErrorState_t Local_enState = SUCCESS;
    767a:	1a 82       	std	Y+2, r1	; 0x02
	/** Calculating Address **/
	u8 Local_u8Address;
	if (((copy_u8X >= 0) && (copy_u8X <= 2))
    767c:	8b 81       	ldd	r24, Y+3	; 0x03
    767e:	83 30       	cpi	r24, 0x03	; 3
    7680:	80 f4       	brcc	.+32     	; 0x76a2 <HLCD_enGoToXY+0x38>
    7682:	8c 81       	ldd	r24, Y+4	; 0x04
    7684:	80 31       	cpi	r24, 0x10	; 16
    7686:	68 f4       	brcc	.+26     	; 0x76a2 <HLCD_enGoToXY+0x38>
			&& ((copy_u8Y >= 0) && (copy_u8Y <= 15))) {
		if (0 == copy_u8X) {
    7688:	8b 81       	ldd	r24, Y+3	; 0x03
    768a:	88 23       	and	r24, r24
    768c:	19 f4       	brne	.+6      	; 0x7694 <HLCD_enGoToXY+0x2a>
			/** Location for First Line **/
			Local_u8Address = copy_u8Y;
    768e:	8c 81       	ldd	r24, Y+4	; 0x04
    7690:	89 83       	std	Y+1, r24	; 0x01
    7692:	09 c0       	rjmp	.+18     	; 0x76a6 <HLCD_enGoToXY+0x3c>
		} else if ((1 == copy_u8X)) {
    7694:	8b 81       	ldd	r24, Y+3	; 0x03
    7696:	81 30       	cpi	r24, 0x01	; 1
    7698:	31 f4       	brne	.+12     	; 0x76a6 <HLCD_enGoToXY+0x3c>
			/** Location for Second Line **/
			Local_u8Address = HLCD_SECOND_ROW_INITIAL_ADDRESS + copy_u8Y;
    769a:	8c 81       	ldd	r24, Y+4	; 0x04
    769c:	80 5c       	subi	r24, 0xC0	; 192
    769e:	89 83       	std	Y+1, r24	; 0x01
    76a0:	02 c0       	rjmp	.+4      	; 0x76a6 <HLCD_enGoToXY+0x3c>
		}
	} else {
		Local_enState = OUT_OF_RANGE;
    76a2:	81 e0       	ldi	r24, 0x01	; 1
    76a4:	8a 83       	std	Y+2, r24	; 0x02
	}
	/** Set DDRAM Address then Send Command **/
	HLCD_enSendCommand(SET_BIT(Local_u8Address, 7));
    76a6:	89 81       	ldd	r24, Y+1	; 0x01
    76a8:	80 68       	ori	r24, 0x80	; 128
    76aa:	89 83       	std	Y+1, r24	; 0x01
    76ac:	89 81       	ldd	r24, Y+1	; 0x01
    76ae:	0e 94 c0 38 	call	0x7180	; 0x7180 <HLCD_enSendCommand>
	return Local_enState;
    76b2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    76b4:	0f 90       	pop	r0
    76b6:	0f 90       	pop	r0
    76b8:	0f 90       	pop	r0
    76ba:	0f 90       	pop	r0
    76bc:	cf 91       	pop	r28
    76be:	df 91       	pop	r29
    76c0:	08 95       	ret

000076c2 <HLCD_enClearDisplay>:

ErrorState_t HLCD_enClearDisplay(void) {
    76c2:	df 93       	push	r29
    76c4:	cf 93       	push	r28
    76c6:	0f 92       	push	r0
    76c8:	cd b7       	in	r28, 0x3d	; 61
    76ca:	de b7       	in	r29, 0x3e	; 62
	ErrorState_t Local_enState = SUCCESS;
    76cc:	19 82       	std	Y+1, r1	; 0x01
	HLCD_enSendCommand(HLCD_CMD_CLEAR_DISPLAY);
    76ce:	81 e0       	ldi	r24, 0x01	; 1
    76d0:	0e 94 c0 38 	call	0x7180	; 0x7180 <HLCD_enSendCommand>
	return Local_enState;
    76d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    76d6:	0f 90       	pop	r0
    76d8:	cf 91       	pop	r28
    76da:	df 91       	pop	r29
    76dc:	08 95       	ret

000076de <HLCD_enClearCharachter>:

ErrorState_t HLCD_enClearCharachter(u8 copy_u8X, u8 copy_u8Y, u8 copy_u8Length) {
    76de:	df 93       	push	r29
    76e0:	cf 93       	push	r28
    76e2:	00 d0       	rcall	.+0      	; 0x76e4 <HLCD_enClearCharachter+0x6>
    76e4:	00 d0       	rcall	.+0      	; 0x76e6 <HLCD_enClearCharachter+0x8>
    76e6:	0f 92       	push	r0
    76e8:	cd b7       	in	r28, 0x3d	; 61
    76ea:	de b7       	in	r29, 0x3e	; 62
    76ec:	8b 83       	std	Y+3, r24	; 0x03
    76ee:	6c 83       	std	Y+4, r22	; 0x04
    76f0:	4d 83       	std	Y+5, r20	; 0x05
	ErrorState_t Local_enState = SUCCESS;
    76f2:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Iterrator;
	HLCD_enGoToXY(copy_u8X, copy_u8Y);
    76f4:	8b 81       	ldd	r24, Y+3	; 0x03
    76f6:	6c 81       	ldd	r22, Y+4	; 0x04
    76f8:	0e 94 35 3b 	call	0x766a	; 0x766a <HLCD_enGoToXY>
	for (Local_u8Iterrator = 0; Local_u8Iterrator < copy_u8Length;
    76fc:	19 82       	std	Y+1, r1	; 0x01
    76fe:	06 c0       	rjmp	.+12     	; 0x770c <HLCD_enClearCharachter+0x2e>
			Local_u8Iterrator++) {
		HLCD_enSendData(' ');
    7700:	80 e2       	ldi	r24, 0x20	; 32
    7702:	0e 94 d8 38 	call	0x71b0	; 0x71b0 <HLCD_enSendData>
ErrorState_t HLCD_enClearCharachter(u8 copy_u8X, u8 copy_u8Y, u8 copy_u8Length) {
	ErrorState_t Local_enState = SUCCESS;
	u8 Local_u8Iterrator;
	HLCD_enGoToXY(copy_u8X, copy_u8Y);
	for (Local_u8Iterrator = 0; Local_u8Iterrator < copy_u8Length;
			Local_u8Iterrator++) {
    7706:	89 81       	ldd	r24, Y+1	; 0x01
    7708:	8f 5f       	subi	r24, 0xFF	; 255
    770a:	89 83       	std	Y+1, r24	; 0x01

ErrorState_t HLCD_enClearCharachter(u8 copy_u8X, u8 copy_u8Y, u8 copy_u8Length) {
	ErrorState_t Local_enState = SUCCESS;
	u8 Local_u8Iterrator;
	HLCD_enGoToXY(copy_u8X, copy_u8Y);
	for (Local_u8Iterrator = 0; Local_u8Iterrator < copy_u8Length;
    770c:	99 81       	ldd	r25, Y+1	; 0x01
    770e:	8d 81       	ldd	r24, Y+5	; 0x05
    7710:	98 17       	cp	r25, r24
    7712:	b0 f3       	brcs	.-20     	; 0x7700 <HLCD_enClearCharachter+0x22>
			Local_u8Iterrator++) {
		HLCD_enSendData(' ');
	}
	return Local_enState;
    7714:	8a 81       	ldd	r24, Y+2	; 0x02
}
    7716:	0f 90       	pop	r0
    7718:	0f 90       	pop	r0
    771a:	0f 90       	pop	r0
    771c:	0f 90       	pop	r0
    771e:	0f 90       	pop	r0
    7720:	cf 91       	pop	r28
    7722:	df 91       	pop	r29
    7724:	08 95       	ret

00007726 <HLCD_enSendCustomPattern>:

ErrorState_t HLCD_enSendCustomPattern(u8 *ptrPattern, u8 copy_u8PatternNum) {
    7726:	df 93       	push	r29
    7728:	cf 93       	push	r28
    772a:	00 d0       	rcall	.+0      	; 0x772c <HLCD_enSendCustomPattern+0x6>
    772c:	00 d0       	rcall	.+0      	; 0x772e <HLCD_enSendCustomPattern+0x8>
    772e:	00 d0       	rcall	.+0      	; 0x7730 <HLCD_enSendCustomPattern+0xa>
    7730:	cd b7       	in	r28, 0x3d	; 61
    7732:	de b7       	in	r29, 0x3e	; 62
    7734:	9d 83       	std	Y+5, r25	; 0x05
    7736:	8c 83       	std	Y+4, r24	; 0x04
    7738:	6e 83       	std	Y+6, r22	; 0x06
	ErrorState_t Local_enState = SUCCESS;
    773a:	1b 82       	std	Y+3, r1	; 0x03
	if (NULL != ptrPattern) {
    773c:	8c 81       	ldd	r24, Y+4	; 0x04
    773e:	9d 81       	ldd	r25, Y+5	; 0x05
    7740:	00 97       	sbiw	r24, 0x00	; 0
    7742:	51 f1       	breq	.+84     	; 0x7798 <HLCD_enSendCustomPattern+0x72>
		 *  Notes :
		 *  	- Pattern Number - 1 as it Starts from 0 to 7
		 *  	- Multiplied by 8 as each Pattern is 8 Rows
		 */

		u8 Local_u8Address = (copy_u8PatternNum - 1) * 8;
    7744:	8e 81       	ldd	r24, Y+6	; 0x06
    7746:	88 2f       	mov	r24, r24
    7748:	90 e0       	ldi	r25, 0x00	; 0
    774a:	01 97       	sbiw	r24, 0x01	; 1
    774c:	88 0f       	add	r24, r24
    774e:	99 1f       	adc	r25, r25
    7750:	88 0f       	add	r24, r24
    7752:	99 1f       	adc	r25, r25
    7754:	88 0f       	add	r24, r24
    7756:	99 1f       	adc	r25, r25
    7758:	8a 83       	std	Y+2, r24	; 0x02
		u8 Local_u8Counter = 0;
    775a:	19 82       	std	Y+1, r1	; 0x01
		/** Set CGRAM Address then Sending Command **/
		HLCD_enSendCommand(SET_BIT(Local_u8Address, 6));
    775c:	8a 81       	ldd	r24, Y+2	; 0x02
    775e:	80 64       	ori	r24, 0x40	; 64
    7760:	8a 83       	std	Y+2, r24	; 0x02
    7762:	8a 81       	ldd	r24, Y+2	; 0x02
    7764:	0e 94 c0 38 	call	0x7180	; 0x7180 <HLCD_enSendCommand>
		/** Write Pattern in CGRAM **/
		for (Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++) {
    7768:	19 82       	std	Y+1, r1	; 0x01
    776a:	0e c0       	rjmp	.+28     	; 0x7788 <HLCD_enSendCustomPattern+0x62>
			HLCD_enSendData(ptrPattern[Local_u8Counter]);
    776c:	89 81       	ldd	r24, Y+1	; 0x01
    776e:	28 2f       	mov	r18, r24
    7770:	30 e0       	ldi	r19, 0x00	; 0
    7772:	8c 81       	ldd	r24, Y+4	; 0x04
    7774:	9d 81       	ldd	r25, Y+5	; 0x05
    7776:	fc 01       	movw	r30, r24
    7778:	e2 0f       	add	r30, r18
    777a:	f3 1f       	adc	r31, r19
    777c:	80 81       	ld	r24, Z
    777e:	0e 94 d8 38 	call	0x71b0	; 0x71b0 <HLCD_enSendData>
		u8 Local_u8Address = (copy_u8PatternNum - 1) * 8;
		u8 Local_u8Counter = 0;
		/** Set CGRAM Address then Sending Command **/
		HLCD_enSendCommand(SET_BIT(Local_u8Address, 6));
		/** Write Pattern in CGRAM **/
		for (Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++) {
    7782:	89 81       	ldd	r24, Y+1	; 0x01
    7784:	8f 5f       	subi	r24, 0xFF	; 255
    7786:	89 83       	std	Y+1, r24	; 0x01
    7788:	89 81       	ldd	r24, Y+1	; 0x01
    778a:	88 30       	cpi	r24, 0x08	; 8
    778c:	78 f3       	brcs	.-34     	; 0x776c <HLCD_enSendCustomPattern+0x46>
			HLCD_enSendData(ptrPattern[Local_u8Counter]);
		}
		/** Go Back to the DDRAM **/
		HLCD_enGoToXY(0, 0);
    778e:	80 e0       	ldi	r24, 0x00	; 0
    7790:	60 e0       	ldi	r22, 0x00	; 0
    7792:	0e 94 35 3b 	call	0x766a	; 0x766a <HLCD_enGoToXY>
    7796:	02 c0       	rjmp	.+4      	; 0x779c <HLCD_enSendCustomPattern+0x76>
	} else {
		Local_enState = NULL_POINTER;
    7798:	82 e0       	ldi	r24, 0x02	; 2
    779a:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_enState;
    779c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    779e:	26 96       	adiw	r28, 0x06	; 6
    77a0:	0f b6       	in	r0, 0x3f	; 63
    77a2:	f8 94       	cli
    77a4:	de bf       	out	0x3e, r29	; 62
    77a6:	0f be       	out	0x3f, r0	; 63
    77a8:	cd bf       	out	0x3d, r28	; 61
    77aa:	cf 91       	pop	r28
    77ac:	df 91       	pop	r29
    77ae:	08 95       	ret

000077b0 <HLCD_enDisplayCustomPattern>:

ErrorState_t HLCD_enDisplayCustomPattern(u8 copy_u8PatternNum) {
    77b0:	df 93       	push	r29
    77b2:	cf 93       	push	r28
    77b4:	00 d0       	rcall	.+0      	; 0x77b6 <HLCD_enDisplayCustomPattern+0x6>
    77b6:	cd b7       	in	r28, 0x3d	; 61
    77b8:	de b7       	in	r29, 0x3e	; 62
    77ba:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    77bc:	19 82       	std	Y+1, r1	; 0x01
	HLCD_enSendData(copy_u8PatternNum - 1);
    77be:	8a 81       	ldd	r24, Y+2	; 0x02
    77c0:	81 50       	subi	r24, 0x01	; 1
    77c2:	0e 94 d8 38 	call	0x71b0	; 0x71b0 <HLCD_enSendData>
	return Local_enState;
    77c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    77c8:	0f 90       	pop	r0
    77ca:	0f 90       	pop	r0
    77cc:	cf 91       	pop	r28
    77ce:	df 91       	pop	r29
    77d0:	08 95       	ret

000077d2 <HKEYPAD_enInit>:
#include <HKEYPAD_private.h>
#include <HKEYPAD_config.h>
#include <HKEYPAD_interface.h>
#include <avr/delay.h>

ErrorState_t HKEYPAD_enInit(void) {
    77d2:	df 93       	push	r29
    77d4:	cf 93       	push	r28
    77d6:	0f 92       	push	r0
    77d8:	cd b7       	in	r28, 0x3d	; 61
    77da:	de b7       	in	r29, 0x3e	; 62
	ErrorState_t Local_enState = SUCCESS;
    77dc:	19 82       	std	Y+1, r1	; 0x01
	/** Set Pin Direction for Rows as Input **/
	MDIO_enSetPinDirection(HKEYPAD_R1, INPUT);
    77de:	88 e2       	ldi	r24, 0x28	; 40
    77e0:	60 e0       	ldi	r22, 0x00	; 0
    77e2:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HKEYPAD_R2, INPUT);
    77e6:	89 e2       	ldi	r24, 0x29	; 41
    77e8:	60 e0       	ldi	r22, 0x00	; 0
    77ea:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HKEYPAD_R3, INPUT);
    77ee:	8a e2       	ldi	r24, 0x2A	; 42
    77f0:	60 e0       	ldi	r22, 0x00	; 0
    77f2:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HKEYPAD_R4, INPUT);
    77f6:	8b e2       	ldi	r24, 0x2B	; 43
    77f8:	60 e0       	ldi	r22, 0x00	; 0
    77fa:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
	/** Activation Pull-Up Resistor **/
	MDIO_enSetPinValue(HKEYPAD_R1, HIGH);
    77fe:	88 e2       	ldi	r24, 0x28	; 40
    7800:	61 e0       	ldi	r22, 0x01	; 1
    7802:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
	MDIO_enSetPinValue(HKEYPAD_R2, HIGH);
    7806:	89 e2       	ldi	r24, 0x29	; 41
    7808:	61 e0       	ldi	r22, 0x01	; 1
    780a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
	MDIO_enSetPinValue(HKEYPAD_R3, HIGH);
    780e:	8a e2       	ldi	r24, 0x2A	; 42
    7810:	61 e0       	ldi	r22, 0x01	; 1
    7812:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
	MDIO_enSetPinValue(HKEYPAD_R4, HIGH);
    7816:	8b e2       	ldi	r24, 0x2B	; 43
    7818:	61 e0       	ldi	r22, 0x01	; 1
    781a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
	/** Set Pin Direction for Columns as Output **/
	MDIO_enSetPinDirection(HKEYPAD_C1, OUTPUT);
    781e:	8c e2       	ldi	r24, 0x2C	; 44
    7820:	61 e0       	ldi	r22, 0x01	; 1
    7822:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HKEYPAD_C2, OUTPUT);
    7826:	8d e2       	ldi	r24, 0x2D	; 45
    7828:	61 e0       	ldi	r22, 0x01	; 1
    782a:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HKEYPAD_C3, OUTPUT);
    782e:	8e e2       	ldi	r24, 0x2E	; 46
    7830:	61 e0       	ldi	r22, 0x01	; 1
    7832:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HKEYPAD_C4, OUTPUT);
    7836:	8f e2       	ldi	r24, 0x2F	; 47
    7838:	61 e0       	ldi	r22, 0x01	; 1
    783a:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
	/** Set Pin Value for Columns Initially High **/
	MDIO_enSetPinValue(HKEYPAD_C1, HIGH);
    783e:	8c e2       	ldi	r24, 0x2C	; 44
    7840:	61 e0       	ldi	r22, 0x01	; 1
    7842:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
	MDIO_enSetPinValue(HKEYPAD_C2, HIGH);
    7846:	8d e2       	ldi	r24, 0x2D	; 45
    7848:	61 e0       	ldi	r22, 0x01	; 1
    784a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
	MDIO_enSetPinValue(HKEYPAD_C3, HIGH);
    784e:	8e e2       	ldi	r24, 0x2E	; 46
    7850:	61 e0       	ldi	r22, 0x01	; 1
    7852:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
	MDIO_enSetPinValue(HKEYPAD_C4, HIGH);
    7856:	8f e2       	ldi	r24, 0x2F	; 47
    7858:	61 e0       	ldi	r22, 0x01	; 1
    785a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
	return Local_enState;
    785e:	89 81       	ldd	r24, Y+1	; 0x01
}
    7860:	0f 90       	pop	r0
    7862:	cf 91       	pop	r28
    7864:	df 91       	pop	r29
    7866:	08 95       	ret

00007868 <HKEYPAD_enGetPressedKey>:

ErrorState_t HKEYPAD_enGetPressedKey(u8 *ptrKey) {
    7868:	df 93       	push	r29
    786a:	cf 93       	push	r28
    786c:	cd b7       	in	r28, 0x3d	; 61
    786e:	de b7       	in	r29, 0x3e	; 62
    7870:	28 97       	sbiw	r28, 0x08	; 8
    7872:	0f b6       	in	r0, 0x3f	; 63
    7874:	f8 94       	cli
    7876:	de bf       	out	0x3e, r29	; 62
    7878:	0f be       	out	0x3f, r0	; 63
    787a:	cd bf       	out	0x3d, r28	; 61
    787c:	98 87       	std	Y+8, r25	; 0x08
    787e:	8f 83       	std	Y+7, r24	; 0x07
	ErrorState_t Local_enState = SUCCESS;
    7880:	1d 82       	std	Y+5, r1	; 0x05
	if (NULL != ptrKey) {
    7882:	8f 81       	ldd	r24, Y+7	; 0x07
    7884:	98 85       	ldd	r25, Y+8	; 0x08
    7886:	00 97       	sbiw	r24, 0x00	; 0
    7888:	09 f4       	brne	.+2      	; 0x788c <HKEYPAD_enGetPressedKey+0x24>
    788a:	68 c0       	rjmp	.+208    	; 0x795c <HKEYPAD_enGetPressedKey+0xf4>
		HKEYPAD_KEYS;
		u8 static Local_u8Rows[] = HKEYPAD_ROWS;
		u8 static Local_u8Columns[] = HKEYPAD_COLUMNS;
		u8 Local_u8RowCounter;
		u8 Local_u8ColumnCounter;
		u8 Local_u8Flag = 0; // To finish looping if key pressed
    788c:	1a 82       	std	Y+2, r1	; 0x02
		u8 Local_u8KeyState;
		u8 Local_u8PressedKey = HKEYPAD_NO_PRESSED_KEY;
    788e:	8f ef       	ldi	r24, 0xFF	; 255
    7890:	89 83       	std	Y+1, r24	; 0x01
		for (Local_u8ColumnCounter = 0;
    7892:	1b 82       	std	Y+3, r1	; 0x03
    7894:	57 c0       	rjmp	.+174    	; 0x7944 <HKEYPAD_enGetPressedKey+0xdc>
				(Local_u8ColumnCounter < HKEYPAD_COLUMN_SIZE)
						&& (Local_u8Flag == 0); Local_u8ColumnCounter++) {
			/** Activate Current Column **/
			MDIO_enSetPinValue(Local_u8Columns[Local_u8ColumnCounter],
    7896:	8b 81       	ldd	r24, Y+3	; 0x03
    7898:	88 2f       	mov	r24, r24
    789a:	90 e0       	ldi	r25, 0x00	; 0
    789c:	fc 01       	movw	r30, r24
    789e:	e8 59       	subi	r30, 0x98	; 152
    78a0:	fe 4f       	sbci	r31, 0xFE	; 254
    78a2:	80 81       	ld	r24, Z
    78a4:	60 e0       	ldi	r22, 0x00	; 0
    78a6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
			HKEYPAD_KEY_PRESSED);
			for (Local_u8RowCounter = 0;
    78aa:	1c 82       	std	Y+4, r1	; 0x04
    78ac:	38 c0       	rjmp	.+112    	; 0x791e <HKEYPAD_enGetPressedKey+0xb6>
					(Local_u8RowCounter < HKEYPAD_ROW_SIZE)
							&& (Local_u8Flag == 0); Local_u8RowCounter++) {
				/** Read the Current Row **/
				MDIO_enGetPinValue(Local_u8Rows[Local_u8RowCounter],
    78ae:	8c 81       	ldd	r24, Y+4	; 0x04
    78b0:	88 2f       	mov	r24, r24
    78b2:	90 e0       	ldi	r25, 0x00	; 0
    78b4:	fc 01       	movw	r30, r24
    78b6:	e4 59       	subi	r30, 0x94	; 148
    78b8:	fe 4f       	sbci	r31, 0xFE	; 254
    78ba:	80 81       	ld	r24, Z
    78bc:	9e 01       	movw	r18, r28
    78be:	2a 5f       	subi	r18, 0xFA	; 250
    78c0:	3f 4f       	sbci	r19, 0xFF	; 255
    78c2:	b9 01       	movw	r22, r18
    78c4:	0e 94 b8 0b 	call	0x1770	; 0x1770 <MDIO_enGetPinValue>
						&Local_u8KeyState);
				if (Local_u8KeyState == HKEYPAD_KEY_PRESSED) {
    78c8:	8e 81       	ldd	r24, Y+6	; 0x06
    78ca:	88 23       	and	r24, r24
    78cc:	29 f5       	brne	.+74     	; 0x7918 <HKEYPAD_enGetPressedKey+0xb0>
    78ce:	0d c0       	rjmp	.+26     	; 0x78ea <HKEYPAD_enGetPressedKey+0x82>
					/** Long Press Elimination **/
					while (Local_u8KeyState == HKEYPAD_KEY_PRESSED) {
						MDIO_enGetPinValue(Local_u8Rows[Local_u8RowCounter],
    78d0:	8c 81       	ldd	r24, Y+4	; 0x04
    78d2:	88 2f       	mov	r24, r24
    78d4:	90 e0       	ldi	r25, 0x00	; 0
    78d6:	fc 01       	movw	r30, r24
    78d8:	e4 59       	subi	r30, 0x94	; 148
    78da:	fe 4f       	sbci	r31, 0xFE	; 254
    78dc:	80 81       	ld	r24, Z
    78de:	9e 01       	movw	r18, r28
    78e0:	2a 5f       	subi	r18, 0xFA	; 250
    78e2:	3f 4f       	sbci	r19, 0xFF	; 255
    78e4:	b9 01       	movw	r22, r18
    78e6:	0e 94 b8 0b 	call	0x1770	; 0x1770 <MDIO_enGetPinValue>
				/** Read the Current Row **/
				MDIO_enGetPinValue(Local_u8Rows[Local_u8RowCounter],
						&Local_u8KeyState);
				if (Local_u8KeyState == HKEYPAD_KEY_PRESSED) {
					/** Long Press Elimination **/
					while (Local_u8KeyState == HKEYPAD_KEY_PRESSED) {
    78ea:	8e 81       	ldd	r24, Y+6	; 0x06
    78ec:	88 23       	and	r24, r24
    78ee:	81 f3       	breq	.-32     	; 0x78d0 <HKEYPAD_enGetPressedKey+0x68>
						MDIO_enGetPinValue(Local_u8Rows[Local_u8RowCounter],
								&Local_u8KeyState);
					} // while Key is Pressed
					Local_u8PressedKey =
    78f0:	8c 81       	ldd	r24, Y+4	; 0x04
    78f2:	48 2f       	mov	r20, r24
    78f4:	50 e0       	ldi	r21, 0x00	; 0
    78f6:	8b 81       	ldd	r24, Y+3	; 0x03
    78f8:	28 2f       	mov	r18, r24
    78fa:	30 e0       	ldi	r19, 0x00	; 0
    78fc:	ca 01       	movw	r24, r20
    78fe:	88 0f       	add	r24, r24
    7900:	99 1f       	adc	r25, r25
    7902:	88 0f       	add	r24, r24
    7904:	99 1f       	adc	r25, r25
    7906:	82 0f       	add	r24, r18
    7908:	93 1f       	adc	r25, r19
    790a:	fc 01       	movw	r30, r24
    790c:	e0 59       	subi	r30, 0x90	; 144
    790e:	fe 4f       	sbci	r31, 0xFE	; 254
    7910:	80 81       	ld	r24, Z
    7912:	89 83       	std	Y+1, r24	; 0x01
							Local_u8Keys[Local_u8RowCounter][Local_u8ColumnCounter];
					Local_u8Flag = 1;
    7914:	81 e0       	ldi	r24, 0x01	; 1
    7916:	8a 83       	std	Y+2, r24	; 0x02
			/** Activate Current Column **/
			MDIO_enSetPinValue(Local_u8Columns[Local_u8ColumnCounter],
			HKEYPAD_KEY_PRESSED);
			for (Local_u8RowCounter = 0;
					(Local_u8RowCounter < HKEYPAD_ROW_SIZE)
							&& (Local_u8Flag == 0); Local_u8RowCounter++) {
    7918:	8c 81       	ldd	r24, Y+4	; 0x04
    791a:	8f 5f       	subi	r24, 0xFF	; 255
    791c:	8c 83       	std	Y+4, r24	; 0x04
						&& (Local_u8Flag == 0); Local_u8ColumnCounter++) {
			/** Activate Current Column **/
			MDIO_enSetPinValue(Local_u8Columns[Local_u8ColumnCounter],
			HKEYPAD_KEY_PRESSED);
			for (Local_u8RowCounter = 0;
					(Local_u8RowCounter < HKEYPAD_ROW_SIZE)
    791e:	8c 81       	ldd	r24, Y+4	; 0x04
    7920:	84 30       	cpi	r24, 0x04	; 4
    7922:	18 f4       	brcc	.+6      	; 0x792a <HKEYPAD_enGetPressedKey+0xc2>
    7924:	8a 81       	ldd	r24, Y+2	; 0x02
    7926:	88 23       	and	r24, r24
    7928:	11 f2       	breq	.-124    	; 0x78ae <HKEYPAD_enGetPressedKey+0x46>
							Local_u8Keys[Local_u8RowCounter][Local_u8ColumnCounter];
					Local_u8Flag = 1;
				} // if Key Pressed
			} // for --> Looping on Rows
			/** Deactivate Current Column **/
			MDIO_enSetPinValue(Local_u8Columns[Local_u8ColumnCounter], HIGH);
    792a:	8b 81       	ldd	r24, Y+3	; 0x03
    792c:	88 2f       	mov	r24, r24
    792e:	90 e0       	ldi	r25, 0x00	; 0
    7930:	fc 01       	movw	r30, r24
    7932:	e8 59       	subi	r30, 0x98	; 152
    7934:	fe 4f       	sbci	r31, 0xFE	; 254
    7936:	80 81       	ld	r24, Z
    7938:	61 e0       	ldi	r22, 0x01	; 1
    793a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
		u8 Local_u8Flag = 0; // To finish looping if key pressed
		u8 Local_u8KeyState;
		u8 Local_u8PressedKey = HKEYPAD_NO_PRESSED_KEY;
		for (Local_u8ColumnCounter = 0;
				(Local_u8ColumnCounter < HKEYPAD_COLUMN_SIZE)
						&& (Local_u8Flag == 0); Local_u8ColumnCounter++) {
    793e:	8b 81       	ldd	r24, Y+3	; 0x03
    7940:	8f 5f       	subi	r24, 0xFF	; 255
    7942:	8b 83       	std	Y+3, r24	; 0x03
		u8 Local_u8ColumnCounter;
		u8 Local_u8Flag = 0; // To finish looping if key pressed
		u8 Local_u8KeyState;
		u8 Local_u8PressedKey = HKEYPAD_NO_PRESSED_KEY;
		for (Local_u8ColumnCounter = 0;
				(Local_u8ColumnCounter < HKEYPAD_COLUMN_SIZE)
    7944:	8b 81       	ldd	r24, Y+3	; 0x03
    7946:	84 30       	cpi	r24, 0x04	; 4
    7948:	20 f4       	brcc	.+8      	; 0x7952 <HKEYPAD_enGetPressedKey+0xea>
    794a:	8a 81       	ldd	r24, Y+2	; 0x02
    794c:	88 23       	and	r24, r24
    794e:	09 f4       	brne	.+2      	; 0x7952 <HKEYPAD_enGetPressedKey+0xea>
    7950:	a2 cf       	rjmp	.-188    	; 0x7896 <HKEYPAD_enGetPressedKey+0x2e>
				} // if Key Pressed
			} // for --> Looping on Rows
			/** Deactivate Current Column **/
			MDIO_enSetPinValue(Local_u8Columns[Local_u8ColumnCounter], HIGH);
		} // for --> Looping on Columns
		*ptrKey = Local_u8PressedKey;
    7952:	ef 81       	ldd	r30, Y+7	; 0x07
    7954:	f8 85       	ldd	r31, Y+8	; 0x08
    7956:	89 81       	ldd	r24, Y+1	; 0x01
    7958:	80 83       	st	Z, r24
    795a:	02 c0       	rjmp	.+4      	; 0x7960 <HKEYPAD_enGetPressedKey+0xf8>
	} else {
		Local_enState = NULL_POINTER;
    795c:	82 e0       	ldi	r24, 0x02	; 2
    795e:	8d 83       	std	Y+5, r24	; 0x05
	}
	return Local_enState;
    7960:	8d 81       	ldd	r24, Y+5	; 0x05
}
    7962:	28 96       	adiw	r28, 0x08	; 8
    7964:	0f b6       	in	r0, 0x3f	; 63
    7966:	f8 94       	cli
    7968:	de bf       	out	0x3e, r29	; 62
    796a:	0f be       	out	0x3f, r0	; 63
    796c:	cd bf       	out	0x3d, r28	; 61
    796e:	cf 91       	pop	r28
    7970:	df 91       	pop	r29
    7972:	08 95       	ret

00007974 <HDCMOTOR_enInit>:
#include "MDIO_interface.h"
#include "HDCMOTOR_private.h"
#include "HDCMOTOR_config.h"
#include "HDCMOTOR_interface.h"

ErrorState_t HDCMOTOR_enInit(DCMotor_t *ptrMotor) {
    7974:	df 93       	push	r29
    7976:	cf 93       	push	r28
    7978:	00 d0       	rcall	.+0      	; 0x797a <HDCMOTOR_enInit+0x6>
    797a:	0f 92       	push	r0
    797c:	cd b7       	in	r28, 0x3d	; 61
    797e:	de b7       	in	r29, 0x3e	; 62
    7980:	9b 83       	std	Y+3, r25	; 0x03
    7982:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    7984:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == ptrMotor) {
    7986:	8a 81       	ldd	r24, Y+2	; 0x02
    7988:	9b 81       	ldd	r25, Y+3	; 0x03
    798a:	00 97       	sbiw	r24, 0x00	; 0
    798c:	19 f4       	brne	.+6      	; 0x7994 <HDCMOTOR_enInit+0x20>
		Local_enState = NULL_POINTER;
    798e:	82 e0       	ldi	r24, 0x02	; 2
    7990:	89 83       	std	Y+1, r24	; 0x01
    7992:	0c c0       	rjmp	.+24     	; 0x79ac <HDCMOTOR_enInit+0x38>
	} else {
		MDIO_enSetPinDirection(ptrMotor->Motor_Pin1, OUTPUT);
    7994:	ea 81       	ldd	r30, Y+2	; 0x02
    7996:	fb 81       	ldd	r31, Y+3	; 0x03
    7998:	80 81       	ld	r24, Z
    799a:	61 e0       	ldi	r22, 0x01	; 1
    799c:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
		MDIO_enSetPinDirection(ptrMotor->Motor_Pin2, OUTPUT);
    79a0:	ea 81       	ldd	r30, Y+2	; 0x02
    79a2:	fb 81       	ldd	r31, Y+3	; 0x03
    79a4:	81 81       	ldd	r24, Z+1	; 0x01
    79a6:	61 e0       	ldi	r22, 0x01	; 1
    79a8:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
	}
	return Local_enState;
    79ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    79ae:	0f 90       	pop	r0
    79b0:	0f 90       	pop	r0
    79b2:	0f 90       	pop	r0
    79b4:	cf 91       	pop	r28
    79b6:	df 91       	pop	r29
    79b8:	08 95       	ret

000079ba <HDCMOTOR_enMotorON>:

ErrorState_t HDCMOTOR_enMotorON(DCMotor_t *ptrMotor, DCMotorDirection_t copy_enDirection) {
    79ba:	df 93       	push	r29
    79bc:	cf 93       	push	r28
    79be:	00 d0       	rcall	.+0      	; 0x79c0 <HDCMOTOR_enMotorON+0x6>
    79c0:	00 d0       	rcall	.+0      	; 0x79c2 <HDCMOTOR_enMotorON+0x8>
    79c2:	00 d0       	rcall	.+0      	; 0x79c4 <HDCMOTOR_enMotorON+0xa>
    79c4:	cd b7       	in	r28, 0x3d	; 61
    79c6:	de b7       	in	r29, 0x3e	; 62
    79c8:	9b 83       	std	Y+3, r25	; 0x03
    79ca:	8a 83       	std	Y+2, r24	; 0x02
    79cc:	6c 83       	std	Y+4, r22	; 0x04
	ErrorState_t Local_enState = SUCCESS;
    79ce:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == ptrMotor) {
    79d0:	8a 81       	ldd	r24, Y+2	; 0x02
    79d2:	9b 81       	ldd	r25, Y+3	; 0x03
    79d4:	00 97       	sbiw	r24, 0x00	; 0
    79d6:	19 f4       	brne	.+6      	; 0x79de <HDCMOTOR_enMotorON+0x24>
		Local_enState = NULL_POINTER;
    79d8:	82 e0       	ldi	r24, 0x02	; 2
    79da:	89 83       	std	Y+1, r24	; 0x01
    79dc:	2b c0       	rjmp	.+86     	; 0x7a34 <HDCMOTOR_enMotorON+0x7a>
	} else {
		switch (copy_enDirection) {
    79de:	8c 81       	ldd	r24, Y+4	; 0x04
    79e0:	28 2f       	mov	r18, r24
    79e2:	30 e0       	ldi	r19, 0x00	; 0
    79e4:	3e 83       	std	Y+6, r19	; 0x06
    79e6:	2d 83       	std	Y+5, r18	; 0x05
    79e8:	8d 81       	ldd	r24, Y+5	; 0x05
    79ea:	9e 81       	ldd	r25, Y+6	; 0x06
    79ec:	00 97       	sbiw	r24, 0x00	; 0
    79ee:	31 f0       	breq	.+12     	; 0x79fc <HDCMOTOR_enMotorON+0x42>
    79f0:	2d 81       	ldd	r18, Y+5	; 0x05
    79f2:	3e 81       	ldd	r19, Y+6	; 0x06
    79f4:	21 30       	cpi	r18, 0x01	; 1
    79f6:	31 05       	cpc	r19, r1
    79f8:	71 f0       	breq	.+28     	; 0x7a16 <HDCMOTOR_enMotorON+0x5c>
    79fa:	1a c0       	rjmp	.+52     	; 0x7a30 <HDCMOTOR_enMotorON+0x76>
		case CLK_WISE:
			MDIO_enSetPinValue(ptrMotor->Motor_Pin1, LOW);
    79fc:	ea 81       	ldd	r30, Y+2	; 0x02
    79fe:	fb 81       	ldd	r31, Y+3	; 0x03
    7a00:	80 81       	ld	r24, Z
    7a02:	60 e0       	ldi	r22, 0x00	; 0
    7a04:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
			MDIO_enSetPinValue(ptrMotor->Motor_Pin2, HIGH);
    7a08:	ea 81       	ldd	r30, Y+2	; 0x02
    7a0a:	fb 81       	ldd	r31, Y+3	; 0x03
    7a0c:	81 81       	ldd	r24, Z+1	; 0x01
    7a0e:	61 e0       	ldi	r22, 0x01	; 1
    7a10:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    7a14:	0f c0       	rjmp	.+30     	; 0x7a34 <HDCMOTOR_enMotorON+0x7a>
			break;
		case ANTI_CLK_WISE:
			MDIO_enSetPinValue(ptrMotor->Motor_Pin2, LOW);
    7a16:	ea 81       	ldd	r30, Y+2	; 0x02
    7a18:	fb 81       	ldd	r31, Y+3	; 0x03
    7a1a:	81 81       	ldd	r24, Z+1	; 0x01
    7a1c:	60 e0       	ldi	r22, 0x00	; 0
    7a1e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
			MDIO_enSetPinValue(ptrMotor->Motor_Pin1, HIGH);
    7a22:	ea 81       	ldd	r30, Y+2	; 0x02
    7a24:	fb 81       	ldd	r31, Y+3	; 0x03
    7a26:	80 81       	ld	r24, Z
    7a28:	61 e0       	ldi	r22, 0x01	; 1
    7a2a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
    7a2e:	02 c0       	rjmp	.+4      	; 0x7a34 <HDCMOTOR_enMotorON+0x7a>
			break;
		default:
			Local_enState = OUT_OF_RANGE;
    7a30:	81 e0       	ldi	r24, 0x01	; 1
    7a32:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Local_enState;
    7a34:	89 81       	ldd	r24, Y+1	; 0x01
}
    7a36:	26 96       	adiw	r28, 0x06	; 6
    7a38:	0f b6       	in	r0, 0x3f	; 63
    7a3a:	f8 94       	cli
    7a3c:	de bf       	out	0x3e, r29	; 62
    7a3e:	0f be       	out	0x3f, r0	; 63
    7a40:	cd bf       	out	0x3d, r28	; 61
    7a42:	cf 91       	pop	r28
    7a44:	df 91       	pop	r29
    7a46:	08 95       	ret

00007a48 <HDCMOTOR_enMotorOFF>:

ErrorState_t HDCMOTOR_enMotorOFF(DCMotor_t *ptrMotor) {
    7a48:	df 93       	push	r29
    7a4a:	cf 93       	push	r28
    7a4c:	00 d0       	rcall	.+0      	; 0x7a4e <HDCMOTOR_enMotorOFF+0x6>
    7a4e:	0f 92       	push	r0
    7a50:	cd b7       	in	r28, 0x3d	; 61
    7a52:	de b7       	in	r29, 0x3e	; 62
    7a54:	9b 83       	std	Y+3, r25	; 0x03
    7a56:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    7a58:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == ptrMotor) {
    7a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    7a5c:	9b 81       	ldd	r25, Y+3	; 0x03
    7a5e:	00 97       	sbiw	r24, 0x00	; 0
    7a60:	19 f4       	brne	.+6      	; 0x7a68 <HDCMOTOR_enMotorOFF+0x20>
		Local_enState = NULL_POINTER;
    7a62:	82 e0       	ldi	r24, 0x02	; 2
    7a64:	89 83       	std	Y+1, r24	; 0x01
    7a66:	0c c0       	rjmp	.+24     	; 0x7a80 <HDCMOTOR_enMotorOFF+0x38>
	} else {
		MDIO_enSetPinValue(ptrMotor->Motor_Pin1, LOW);
    7a68:	ea 81       	ldd	r30, Y+2	; 0x02
    7a6a:	fb 81       	ldd	r31, Y+3	; 0x03
    7a6c:	80 81       	ld	r24, Z
    7a6e:	60 e0       	ldi	r22, 0x00	; 0
    7a70:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
		MDIO_enSetPinValue(ptrMotor->Motor_Pin2, LOW);
    7a74:	ea 81       	ldd	r30, Y+2	; 0x02
    7a76:	fb 81       	ldd	r31, Y+3	; 0x03
    7a78:	81 81       	ldd	r24, Z+1	; 0x01
    7a7a:	60 e0       	ldi	r22, 0x00	; 0
    7a7c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
	}
	return Local_enState;
    7a80:	89 81       	ldd	r24, Y+1	; 0x01
}
    7a82:	0f 90       	pop	r0
    7a84:	0f 90       	pop	r0
    7a86:	0f 90       	pop	r0
    7a88:	cf 91       	pop	r28
    7a8a:	df 91       	pop	r29
    7a8c:	08 95       	ret

00007a8e <HBUZZER_enInit>:
#include <HBUZZER_private.h>
#include <HBUZZER_config.h>
#include <HBUZZER_interface.h>
#include <avr/delay.h>

ErrorState_t HBUZZER_enInit(Pin_t copy_enPin) {
    7a8e:	df 93       	push	r29
    7a90:	cf 93       	push	r28
    7a92:	0f 92       	push	r0
    7a94:	cd b7       	in	r28, 0x3d	; 61
    7a96:	de b7       	in	r29, 0x3e	; 62
    7a98:	89 83       	std	Y+1, r24	; 0x01
	MDIO_enSetPinDirection(copy_enPin, OUTPUT);
    7a9a:	89 81       	ldd	r24, Y+1	; 0x01
    7a9c:	61 e0       	ldi	r22, 0x01	; 1
    7a9e:	0e 94 04 09 	call	0x1208	; 0x1208 <MDIO_enSetPinDirection>
	return SUCCESS;
    7aa2:	80 e0       	ldi	r24, 0x00	; 0
}
    7aa4:	0f 90       	pop	r0
    7aa6:	cf 91       	pop	r28
    7aa8:	df 91       	pop	r29
    7aaa:	08 95       	ret

00007aac <HBUZZER_enBuzzON>:
ErrorState_t HBUZZER_enBuzzON(Pin_t copy_enPin) {
    7aac:	df 93       	push	r29
    7aae:	cf 93       	push	r28
    7ab0:	0f 92       	push	r0
    7ab2:	cd b7       	in	r28, 0x3d	; 61
    7ab4:	de b7       	in	r29, 0x3e	; 62
    7ab6:	89 83       	std	Y+1, r24	; 0x01
	MDIO_enSetPinValue(copy_enPin, HIGH);
    7ab8:	89 81       	ldd	r24, Y+1	; 0x01
    7aba:	61 e0       	ldi	r22, 0x01	; 1
    7abc:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
	return SUCCESS;
    7ac0:	80 e0       	ldi	r24, 0x00	; 0
}
    7ac2:	0f 90       	pop	r0
    7ac4:	cf 91       	pop	r28
    7ac6:	df 91       	pop	r29
    7ac8:	08 95       	ret

00007aca <HBUZZER_enBuzzOFF>:
ErrorState_t HBUZZER_enBuzzOFF(Pin_t copy_enPin) {
    7aca:	df 93       	push	r29
    7acc:	cf 93       	push	r28
    7ace:	0f 92       	push	r0
    7ad0:	cd b7       	in	r28, 0x3d	; 61
    7ad2:	de b7       	in	r29, 0x3e	; 62
    7ad4:	89 83       	std	Y+1, r24	; 0x01
	MDIO_enSetPinValue(copy_enPin, LOW);
    7ad6:	89 81       	ldd	r24, Y+1	; 0x01
    7ad8:	60 e0       	ldi	r22, 0x00	; 0
    7ada:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_enSetPinValue>
	return SUCCESS;
    7ade:	80 e0       	ldi	r24, 0x00	; 0
}
    7ae0:	0f 90       	pop	r0
    7ae2:	cf 91       	pop	r28
    7ae4:	df 91       	pop	r29
    7ae6:	08 95       	ret

00007ae8 <HBUZZER_enBuzzMusic>:

ErrorState_t HBUZZER_enBuzzMusic(Pin_t copy_enPin, Delay_Unit_t copy_enDelayUnit, u32 copy_u32DelayVal, u32 copy_u32Duration) {
    7ae8:	ef 92       	push	r14
    7aea:	ff 92       	push	r15
    7aec:	0f 93       	push	r16
    7aee:	1f 93       	push	r17
    7af0:	df 93       	push	r29
    7af2:	cf 93       	push	r28
    7af4:	cd b7       	in	r28, 0x3d	; 61
    7af6:	de b7       	in	r29, 0x3e	; 62
    7af8:	c8 55       	subi	r28, 0x58	; 88
    7afa:	d0 40       	sbci	r29, 0x00	; 0
    7afc:	0f b6       	in	r0, 0x3f	; 63
    7afe:	f8 94       	cli
    7b00:	de bf       	out	0x3e, r29	; 62
    7b02:	0f be       	out	0x3f, r0	; 63
    7b04:	cd bf       	out	0x3d, r28	; 61
    7b06:	fe 01       	movw	r30, r28
    7b08:	e1 5b       	subi	r30, 0xB1	; 177
    7b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    7b0c:	80 83       	st	Z, r24
    7b0e:	fe 01       	movw	r30, r28
    7b10:	e0 5b       	subi	r30, 0xB0	; 176
    7b12:	ff 4f       	sbci	r31, 0xFF	; 255
    7b14:	60 83       	st	Z, r22
    7b16:	fe 01       	movw	r30, r28
    7b18:	ef 5a       	subi	r30, 0xAF	; 175
    7b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    7b1c:	20 83       	st	Z, r18
    7b1e:	31 83       	std	Z+1, r19	; 0x01
    7b20:	42 83       	std	Z+2, r20	; 0x02
    7b22:	53 83       	std	Z+3, r21	; 0x03
    7b24:	fe 01       	movw	r30, r28
    7b26:	eb 5a       	subi	r30, 0xAB	; 171
    7b28:	ff 4f       	sbci	r31, 0xFF	; 255
    7b2a:	e0 82       	st	Z, r14
    7b2c:	f1 82       	std	Z+1, r15	; 0x01
    7b2e:	02 83       	std	Z+2, r16	; 0x02
    7b30:	13 83       	std	Z+3, r17	; 0x03
	ErrorState_t Local_enState = SUCCESS;
    7b32:	fe 01       	movw	r30, r28
    7b34:	e2 5b       	subi	r30, 0xB2	; 178
    7b36:	ff 4f       	sbci	r31, 0xFF	; 255
    7b38:	10 82       	st	Z, r1
	u8 Local_u8Counter;
	if (copy_enDelayUnit == MS) {
    7b3a:	fe 01       	movw	r30, r28
    7b3c:	e0 5b       	subi	r30, 0xB0	; 176
    7b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    7b40:	80 81       	ld	r24, Z
    7b42:	81 30       	cpi	r24, 0x01	; 1
    7b44:	09 f0       	breq	.+2      	; 0x7b48 <HBUZZER_enBuzzMusic+0x60>
    7b46:	60 c1       	rjmp	.+704    	; 0x7e08 <HBUZZER_enBuzzMusic+0x320>
		for (Local_u8Counter = 0; Local_u8Counter < copy_u32Duration;
    7b48:	fe 01       	movw	r30, r28
    7b4a:	e3 5b       	subi	r30, 0xB3	; 179
    7b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    7b4e:	10 82       	st	Z, r1
    7b50:	45 c1       	rjmp	.+650    	; 0x7ddc <HBUZZER_enBuzzMusic+0x2f4>
				Local_u8Counter++) {
			HBUZZER_enBuzzON(copy_enPin);
    7b52:	fe 01       	movw	r30, r28
    7b54:	e1 5b       	subi	r30, 0xB1	; 177
    7b56:	ff 4f       	sbci	r31, 0xFF	; 255
    7b58:	80 81       	ld	r24, Z
    7b5a:	0e 94 56 3d 	call	0x7aac	; 0x7aac <HBUZZER_enBuzzON>
			_delay_ms(copy_u32DelayVal);
    7b5e:	fe 01       	movw	r30, r28
    7b60:	ef 5a       	subi	r30, 0xAF	; 175
    7b62:	ff 4f       	sbci	r31, 0xFF	; 255
    7b64:	60 81       	ld	r22, Z
    7b66:	71 81       	ldd	r23, Z+1	; 0x01
    7b68:	82 81       	ldd	r24, Z+2	; 0x02
    7b6a:	93 81       	ldd	r25, Z+3	; 0x03
    7b6c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    7b70:	dc 01       	movw	r26, r24
    7b72:	cb 01       	movw	r24, r22
    7b74:	fe 01       	movw	r30, r28
    7b76:	e7 5b       	subi	r30, 0xB7	; 183
    7b78:	ff 4f       	sbci	r31, 0xFF	; 255
    7b7a:	80 83       	st	Z, r24
    7b7c:	91 83       	std	Z+1, r25	; 0x01
    7b7e:	a2 83       	std	Z+2, r26	; 0x02
    7b80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7b82:	8e 01       	movw	r16, r28
    7b84:	0b 5b       	subi	r16, 0xBB	; 187
    7b86:	1f 4f       	sbci	r17, 0xFF	; 255
    7b88:	fe 01       	movw	r30, r28
    7b8a:	e7 5b       	subi	r30, 0xB7	; 183
    7b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    7b8e:	60 81       	ld	r22, Z
    7b90:	71 81       	ldd	r23, Z+1	; 0x01
    7b92:	82 81       	ldd	r24, Z+2	; 0x02
    7b94:	93 81       	ldd	r25, Z+3	; 0x03
    7b96:	20 e0       	ldi	r18, 0x00	; 0
    7b98:	30 e0       	ldi	r19, 0x00	; 0
    7b9a:	4a e7       	ldi	r20, 0x7A	; 122
    7b9c:	55 e4       	ldi	r21, 0x45	; 69
    7b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7ba2:	dc 01       	movw	r26, r24
    7ba4:	cb 01       	movw	r24, r22
    7ba6:	f8 01       	movw	r30, r16
    7ba8:	80 83       	st	Z, r24
    7baa:	91 83       	std	Z+1, r25	; 0x01
    7bac:	a2 83       	std	Z+2, r26	; 0x02
    7bae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7bb0:	fe 01       	movw	r30, r28
    7bb2:	eb 5b       	subi	r30, 0xBB	; 187
    7bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    7bb6:	60 81       	ld	r22, Z
    7bb8:	71 81       	ldd	r23, Z+1	; 0x01
    7bba:	82 81       	ldd	r24, Z+2	; 0x02
    7bbc:	93 81       	ldd	r25, Z+3	; 0x03
    7bbe:	20 e0       	ldi	r18, 0x00	; 0
    7bc0:	30 e0       	ldi	r19, 0x00	; 0
    7bc2:	40 e8       	ldi	r20, 0x80	; 128
    7bc4:	5f e3       	ldi	r21, 0x3F	; 63
    7bc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7bca:	88 23       	and	r24, r24
    7bcc:	44 f4       	brge	.+16     	; 0x7bde <HBUZZER_enBuzzMusic+0xf6>
		__ticks = 1;
    7bce:	fe 01       	movw	r30, r28
    7bd0:	ed 5b       	subi	r30, 0xBD	; 189
    7bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    7bd4:	81 e0       	ldi	r24, 0x01	; 1
    7bd6:	90 e0       	ldi	r25, 0x00	; 0
    7bd8:	91 83       	std	Z+1, r25	; 0x01
    7bda:	80 83       	st	Z, r24
    7bdc:	64 c0       	rjmp	.+200    	; 0x7ca6 <HBUZZER_enBuzzMusic+0x1be>
	else if (__tmp > 65535)
    7bde:	fe 01       	movw	r30, r28
    7be0:	eb 5b       	subi	r30, 0xBB	; 187
    7be2:	ff 4f       	sbci	r31, 0xFF	; 255
    7be4:	60 81       	ld	r22, Z
    7be6:	71 81       	ldd	r23, Z+1	; 0x01
    7be8:	82 81       	ldd	r24, Z+2	; 0x02
    7bea:	93 81       	ldd	r25, Z+3	; 0x03
    7bec:	20 e0       	ldi	r18, 0x00	; 0
    7bee:	3f ef       	ldi	r19, 0xFF	; 255
    7bf0:	4f e7       	ldi	r20, 0x7F	; 127
    7bf2:	57 e4       	ldi	r21, 0x47	; 71
    7bf4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7bf8:	18 16       	cp	r1, r24
    7bfa:	0c f0       	brlt	.+2      	; 0x7bfe <HBUZZER_enBuzzMusic+0x116>
    7bfc:	43 c0       	rjmp	.+134    	; 0x7c84 <HBUZZER_enBuzzMusic+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7bfe:	fe 01       	movw	r30, r28
    7c00:	e7 5b       	subi	r30, 0xB7	; 183
    7c02:	ff 4f       	sbci	r31, 0xFF	; 255
    7c04:	60 81       	ld	r22, Z
    7c06:	71 81       	ldd	r23, Z+1	; 0x01
    7c08:	82 81       	ldd	r24, Z+2	; 0x02
    7c0a:	93 81       	ldd	r25, Z+3	; 0x03
    7c0c:	20 e0       	ldi	r18, 0x00	; 0
    7c0e:	30 e0       	ldi	r19, 0x00	; 0
    7c10:	40 e2       	ldi	r20, 0x20	; 32
    7c12:	51 e4       	ldi	r21, 0x41	; 65
    7c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7c18:	dc 01       	movw	r26, r24
    7c1a:	cb 01       	movw	r24, r22
    7c1c:	8e 01       	movw	r16, r28
    7c1e:	0d 5b       	subi	r16, 0xBD	; 189
    7c20:	1f 4f       	sbci	r17, 0xFF	; 255
    7c22:	bc 01       	movw	r22, r24
    7c24:	cd 01       	movw	r24, r26
    7c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7c2a:	dc 01       	movw	r26, r24
    7c2c:	cb 01       	movw	r24, r22
    7c2e:	f8 01       	movw	r30, r16
    7c30:	91 83       	std	Z+1, r25	; 0x01
    7c32:	80 83       	st	Z, r24
    7c34:	1f c0       	rjmp	.+62     	; 0x7c74 <HBUZZER_enBuzzMusic+0x18c>
    7c36:	fe 01       	movw	r30, r28
    7c38:	ef 5b       	subi	r30, 0xBF	; 191
    7c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    7c3c:	80 e9       	ldi	r24, 0x90	; 144
    7c3e:	91 e0       	ldi	r25, 0x01	; 1
    7c40:	91 83       	std	Z+1, r25	; 0x01
    7c42:	80 83       	st	Z, r24
    7c44:	fe 01       	movw	r30, r28
    7c46:	ef 5b       	subi	r30, 0xBF	; 191
    7c48:	ff 4f       	sbci	r31, 0xFF	; 255
    7c4a:	80 81       	ld	r24, Z
    7c4c:	91 81       	ldd	r25, Z+1	; 0x01
    7c4e:	01 97       	sbiw	r24, 0x01	; 1
    7c50:	f1 f7       	brne	.-4      	; 0x7c4e <HBUZZER_enBuzzMusic+0x166>
    7c52:	fe 01       	movw	r30, r28
    7c54:	ef 5b       	subi	r30, 0xBF	; 191
    7c56:	ff 4f       	sbci	r31, 0xFF	; 255
    7c58:	91 83       	std	Z+1, r25	; 0x01
    7c5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7c5c:	de 01       	movw	r26, r28
    7c5e:	ad 5b       	subi	r26, 0xBD	; 189
    7c60:	bf 4f       	sbci	r27, 0xFF	; 255
    7c62:	fe 01       	movw	r30, r28
    7c64:	ed 5b       	subi	r30, 0xBD	; 189
    7c66:	ff 4f       	sbci	r31, 0xFF	; 255
    7c68:	80 81       	ld	r24, Z
    7c6a:	91 81       	ldd	r25, Z+1	; 0x01
    7c6c:	01 97       	sbiw	r24, 0x01	; 1
    7c6e:	11 96       	adiw	r26, 0x01	; 1
    7c70:	9c 93       	st	X, r25
    7c72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7c74:	fe 01       	movw	r30, r28
    7c76:	ed 5b       	subi	r30, 0xBD	; 189
    7c78:	ff 4f       	sbci	r31, 0xFF	; 255
    7c7a:	80 81       	ld	r24, Z
    7c7c:	91 81       	ldd	r25, Z+1	; 0x01
    7c7e:	00 97       	sbiw	r24, 0x00	; 0
    7c80:	d1 f6       	brne	.-76     	; 0x7c36 <HBUZZER_enBuzzMusic+0x14e>
    7c82:	24 c0       	rjmp	.+72     	; 0x7ccc <HBUZZER_enBuzzMusic+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7c84:	8e 01       	movw	r16, r28
    7c86:	0d 5b       	subi	r16, 0xBD	; 189
    7c88:	1f 4f       	sbci	r17, 0xFF	; 255
    7c8a:	fe 01       	movw	r30, r28
    7c8c:	eb 5b       	subi	r30, 0xBB	; 187
    7c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    7c90:	60 81       	ld	r22, Z
    7c92:	71 81       	ldd	r23, Z+1	; 0x01
    7c94:	82 81       	ldd	r24, Z+2	; 0x02
    7c96:	93 81       	ldd	r25, Z+3	; 0x03
    7c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7c9c:	dc 01       	movw	r26, r24
    7c9e:	cb 01       	movw	r24, r22
    7ca0:	f8 01       	movw	r30, r16
    7ca2:	91 83       	std	Z+1, r25	; 0x01
    7ca4:	80 83       	st	Z, r24
    7ca6:	fe 01       	movw	r30, r28
    7ca8:	ed 5b       	subi	r30, 0xBD	; 189
    7caa:	ff 4f       	sbci	r31, 0xFF	; 255
    7cac:	80 81       	ld	r24, Z
    7cae:	91 81       	ldd	r25, Z+1	; 0x01
    7cb0:	fe 01       	movw	r30, r28
    7cb2:	ff 96       	adiw	r30, 0x3f	; 63
    7cb4:	91 83       	std	Z+1, r25	; 0x01
    7cb6:	80 83       	st	Z, r24
    7cb8:	fe 01       	movw	r30, r28
    7cba:	ff 96       	adiw	r30, 0x3f	; 63
    7cbc:	80 81       	ld	r24, Z
    7cbe:	91 81       	ldd	r25, Z+1	; 0x01
    7cc0:	01 97       	sbiw	r24, 0x01	; 1
    7cc2:	f1 f7       	brne	.-4      	; 0x7cc0 <HBUZZER_enBuzzMusic+0x1d8>
    7cc4:	fe 01       	movw	r30, r28
    7cc6:	ff 96       	adiw	r30, 0x3f	; 63
    7cc8:	91 83       	std	Z+1, r25	; 0x01
    7cca:	80 83       	st	Z, r24
			HBUZZER_enBuzzOFF(copy_enPin);
    7ccc:	fe 01       	movw	r30, r28
    7cce:	e1 5b       	subi	r30, 0xB1	; 177
    7cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    7cd2:	80 81       	ld	r24, Z
    7cd4:	0e 94 65 3d 	call	0x7aca	; 0x7aca <HBUZZER_enBuzzOFF>
			_delay_ms(copy_u32DelayVal);
    7cd8:	fe 01       	movw	r30, r28
    7cda:	ef 5a       	subi	r30, 0xAF	; 175
    7cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    7cde:	60 81       	ld	r22, Z
    7ce0:	71 81       	ldd	r23, Z+1	; 0x01
    7ce2:	82 81       	ldd	r24, Z+2	; 0x02
    7ce4:	93 81       	ldd	r25, Z+3	; 0x03
    7ce6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    7cea:	dc 01       	movw	r26, r24
    7cec:	cb 01       	movw	r24, r22
    7cee:	8b af       	std	Y+59, r24	; 0x3b
    7cf0:	9c af       	std	Y+60, r25	; 0x3c
    7cf2:	ad af       	std	Y+61, r26	; 0x3d
    7cf4:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7cf6:	6b ad       	ldd	r22, Y+59	; 0x3b
    7cf8:	7c ad       	ldd	r23, Y+60	; 0x3c
    7cfa:	8d ad       	ldd	r24, Y+61	; 0x3d
    7cfc:	9e ad       	ldd	r25, Y+62	; 0x3e
    7cfe:	20 e0       	ldi	r18, 0x00	; 0
    7d00:	30 e0       	ldi	r19, 0x00	; 0
    7d02:	4a e7       	ldi	r20, 0x7A	; 122
    7d04:	55 e4       	ldi	r21, 0x45	; 69
    7d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7d0a:	dc 01       	movw	r26, r24
    7d0c:	cb 01       	movw	r24, r22
    7d0e:	8f ab       	std	Y+55, r24	; 0x37
    7d10:	98 af       	std	Y+56, r25	; 0x38
    7d12:	a9 af       	std	Y+57, r26	; 0x39
    7d14:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    7d16:	6f a9       	ldd	r22, Y+55	; 0x37
    7d18:	78 ad       	ldd	r23, Y+56	; 0x38
    7d1a:	89 ad       	ldd	r24, Y+57	; 0x39
    7d1c:	9a ad       	ldd	r25, Y+58	; 0x3a
    7d1e:	20 e0       	ldi	r18, 0x00	; 0
    7d20:	30 e0       	ldi	r19, 0x00	; 0
    7d22:	40 e8       	ldi	r20, 0x80	; 128
    7d24:	5f e3       	ldi	r21, 0x3F	; 63
    7d26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7d2a:	88 23       	and	r24, r24
    7d2c:	2c f4       	brge	.+10     	; 0x7d38 <HBUZZER_enBuzzMusic+0x250>
		__ticks = 1;
    7d2e:	81 e0       	ldi	r24, 0x01	; 1
    7d30:	90 e0       	ldi	r25, 0x00	; 0
    7d32:	9e ab       	std	Y+54, r25	; 0x36
    7d34:	8d ab       	std	Y+53, r24	; 0x35
    7d36:	3f c0       	rjmp	.+126    	; 0x7db6 <HBUZZER_enBuzzMusic+0x2ce>
	else if (__tmp > 65535)
    7d38:	6f a9       	ldd	r22, Y+55	; 0x37
    7d3a:	78 ad       	ldd	r23, Y+56	; 0x38
    7d3c:	89 ad       	ldd	r24, Y+57	; 0x39
    7d3e:	9a ad       	ldd	r25, Y+58	; 0x3a
    7d40:	20 e0       	ldi	r18, 0x00	; 0
    7d42:	3f ef       	ldi	r19, 0xFF	; 255
    7d44:	4f e7       	ldi	r20, 0x7F	; 127
    7d46:	57 e4       	ldi	r21, 0x47	; 71
    7d48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7d4c:	18 16       	cp	r1, r24
    7d4e:	4c f5       	brge	.+82     	; 0x7da2 <HBUZZER_enBuzzMusic+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7d50:	6b ad       	ldd	r22, Y+59	; 0x3b
    7d52:	7c ad       	ldd	r23, Y+60	; 0x3c
    7d54:	8d ad       	ldd	r24, Y+61	; 0x3d
    7d56:	9e ad       	ldd	r25, Y+62	; 0x3e
    7d58:	20 e0       	ldi	r18, 0x00	; 0
    7d5a:	30 e0       	ldi	r19, 0x00	; 0
    7d5c:	40 e2       	ldi	r20, 0x20	; 32
    7d5e:	51 e4       	ldi	r21, 0x41	; 65
    7d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7d64:	dc 01       	movw	r26, r24
    7d66:	cb 01       	movw	r24, r22
    7d68:	bc 01       	movw	r22, r24
    7d6a:	cd 01       	movw	r24, r26
    7d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7d70:	dc 01       	movw	r26, r24
    7d72:	cb 01       	movw	r24, r22
    7d74:	9e ab       	std	Y+54, r25	; 0x36
    7d76:	8d ab       	std	Y+53, r24	; 0x35
    7d78:	0f c0       	rjmp	.+30     	; 0x7d98 <HBUZZER_enBuzzMusic+0x2b0>
    7d7a:	80 e9       	ldi	r24, 0x90	; 144
    7d7c:	91 e0       	ldi	r25, 0x01	; 1
    7d7e:	9c ab       	std	Y+52, r25	; 0x34
    7d80:	8b ab       	std	Y+51, r24	; 0x33
    7d82:	8b a9       	ldd	r24, Y+51	; 0x33
    7d84:	9c a9       	ldd	r25, Y+52	; 0x34
    7d86:	01 97       	sbiw	r24, 0x01	; 1
    7d88:	f1 f7       	brne	.-4      	; 0x7d86 <HBUZZER_enBuzzMusic+0x29e>
    7d8a:	9c ab       	std	Y+52, r25	; 0x34
    7d8c:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7d8e:	8d a9       	ldd	r24, Y+53	; 0x35
    7d90:	9e a9       	ldd	r25, Y+54	; 0x36
    7d92:	01 97       	sbiw	r24, 0x01	; 1
    7d94:	9e ab       	std	Y+54, r25	; 0x36
    7d96:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7d98:	8d a9       	ldd	r24, Y+53	; 0x35
    7d9a:	9e a9       	ldd	r25, Y+54	; 0x36
    7d9c:	00 97       	sbiw	r24, 0x00	; 0
    7d9e:	69 f7       	brne	.-38     	; 0x7d7a <HBUZZER_enBuzzMusic+0x292>
    7da0:	14 c0       	rjmp	.+40     	; 0x7dca <HBUZZER_enBuzzMusic+0x2e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7da2:	6f a9       	ldd	r22, Y+55	; 0x37
    7da4:	78 ad       	ldd	r23, Y+56	; 0x38
    7da6:	89 ad       	ldd	r24, Y+57	; 0x39
    7da8:	9a ad       	ldd	r25, Y+58	; 0x3a
    7daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7dae:	dc 01       	movw	r26, r24
    7db0:	cb 01       	movw	r24, r22
    7db2:	9e ab       	std	Y+54, r25	; 0x36
    7db4:	8d ab       	std	Y+53, r24	; 0x35
    7db6:	8d a9       	ldd	r24, Y+53	; 0x35
    7db8:	9e a9       	ldd	r25, Y+54	; 0x36
    7dba:	9a ab       	std	Y+50, r25	; 0x32
    7dbc:	89 ab       	std	Y+49, r24	; 0x31
    7dbe:	89 a9       	ldd	r24, Y+49	; 0x31
    7dc0:	9a a9       	ldd	r25, Y+50	; 0x32
    7dc2:	01 97       	sbiw	r24, 0x01	; 1
    7dc4:	f1 f7       	brne	.-4      	; 0x7dc2 <HBUZZER_enBuzzMusic+0x2da>
    7dc6:	9a ab       	std	Y+50, r25	; 0x32
    7dc8:	89 ab       	std	Y+49, r24	; 0x31
ErrorState_t HBUZZER_enBuzzMusic(Pin_t copy_enPin, Delay_Unit_t copy_enDelayUnit, u32 copy_u32DelayVal, u32 copy_u32Duration) {
	ErrorState_t Local_enState = SUCCESS;
	u8 Local_u8Counter;
	if (copy_enDelayUnit == MS) {
		for (Local_u8Counter = 0; Local_u8Counter < copy_u32Duration;
				Local_u8Counter++) {
    7dca:	de 01       	movw	r26, r28
    7dcc:	a3 5b       	subi	r26, 0xB3	; 179
    7dce:	bf 4f       	sbci	r27, 0xFF	; 255
    7dd0:	fe 01       	movw	r30, r28
    7dd2:	e3 5b       	subi	r30, 0xB3	; 179
    7dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    7dd6:	80 81       	ld	r24, Z
    7dd8:	8f 5f       	subi	r24, 0xFF	; 255
    7dda:	8c 93       	st	X, r24

ErrorState_t HBUZZER_enBuzzMusic(Pin_t copy_enPin, Delay_Unit_t copy_enDelayUnit, u32 copy_u32DelayVal, u32 copy_u32Duration) {
	ErrorState_t Local_enState = SUCCESS;
	u8 Local_u8Counter;
	if (copy_enDelayUnit == MS) {
		for (Local_u8Counter = 0; Local_u8Counter < copy_u32Duration;
    7ddc:	fe 01       	movw	r30, r28
    7dde:	e3 5b       	subi	r30, 0xB3	; 179
    7de0:	ff 4f       	sbci	r31, 0xFF	; 255
    7de2:	80 81       	ld	r24, Z
    7de4:	28 2f       	mov	r18, r24
    7de6:	30 e0       	ldi	r19, 0x00	; 0
    7de8:	40 e0       	ldi	r20, 0x00	; 0
    7dea:	50 e0       	ldi	r21, 0x00	; 0
    7dec:	fe 01       	movw	r30, r28
    7dee:	eb 5a       	subi	r30, 0xAB	; 171
    7df0:	ff 4f       	sbci	r31, 0xFF	; 255
    7df2:	80 81       	ld	r24, Z
    7df4:	91 81       	ldd	r25, Z+1	; 0x01
    7df6:	a2 81       	ldd	r26, Z+2	; 0x02
    7df8:	b3 81       	ldd	r27, Z+3	; 0x03
    7dfa:	28 17       	cp	r18, r24
    7dfc:	39 07       	cpc	r19, r25
    7dfe:	4a 07       	cpc	r20, r26
    7e00:	5b 07       	cpc	r21, r27
    7e02:	08 f4       	brcc	.+2      	; 0x7e06 <HBUZZER_enBuzzMusic+0x31e>
    7e04:	a6 ce       	rjmp	.-692    	; 0x7b52 <HBUZZER_enBuzzMusic+0x6a>
    7e06:	c6 c1       	rjmp	.+908    	; 0x8194 <HBUZZER_enBuzzMusic+0x6ac>
			HBUZZER_enBuzzON(copy_enPin);
			_delay_ms(copy_u32DelayVal);
			HBUZZER_enBuzzOFF(copy_enPin);
			_delay_ms(copy_u32DelayVal);
		}
	} else if (copy_enDelayUnit == US) {
    7e08:	fe 01       	movw	r30, r28
    7e0a:	e0 5b       	subi	r30, 0xB0	; 176
    7e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    7e0e:	80 81       	ld	r24, Z
    7e10:	82 30       	cpi	r24, 0x02	; 2
    7e12:	09 f0       	breq	.+2      	; 0x7e16 <HBUZZER_enBuzzMusic+0x32e>
    7e14:	ba c1       	rjmp	.+884    	; 0x818a <HBUZZER_enBuzzMusic+0x6a2>
		for (Local_u8Counter = 0; Local_u8Counter < copy_u32Duration;
    7e16:	fe 01       	movw	r30, r28
    7e18:	e3 5b       	subi	r30, 0xB3	; 179
    7e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    7e1c:	10 82       	st	Z, r1
    7e1e:	9f c1       	rjmp	.+830    	; 0x815e <HBUZZER_enBuzzMusic+0x676>
				Local_u8Counter++) {
			HBUZZER_enBuzzON(copy_enPin);
    7e20:	fe 01       	movw	r30, r28
    7e22:	e1 5b       	subi	r30, 0xB1	; 177
    7e24:	ff 4f       	sbci	r31, 0xFF	; 255
    7e26:	80 81       	ld	r24, Z
    7e28:	0e 94 56 3d 	call	0x7aac	; 0x7aac <HBUZZER_enBuzzON>
			_delay_us(copy_u32DelayVal);
    7e2c:	fe 01       	movw	r30, r28
    7e2e:	ef 5a       	subi	r30, 0xAF	; 175
    7e30:	ff 4f       	sbci	r31, 0xFF	; 255
    7e32:	60 81       	ld	r22, Z
    7e34:	71 81       	ldd	r23, Z+1	; 0x01
    7e36:	82 81       	ldd	r24, Z+2	; 0x02
    7e38:	93 81       	ldd	r25, Z+3	; 0x03
    7e3a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    7e3e:	dc 01       	movw	r26, r24
    7e40:	cb 01       	movw	r24, r22
    7e42:	8d a7       	std	Y+45, r24	; 0x2d
    7e44:	9e a7       	std	Y+46, r25	; 0x2e
    7e46:	af a7       	std	Y+47, r26	; 0x2f
    7e48:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    7e4a:	6d a5       	ldd	r22, Y+45	; 0x2d
    7e4c:	7e a5       	ldd	r23, Y+46	; 0x2e
    7e4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    7e50:	98 a9       	ldd	r25, Y+48	; 0x30
    7e52:	2b ea       	ldi	r18, 0xAB	; 171
    7e54:	3a ea       	ldi	r19, 0xAA	; 170
    7e56:	4a ea       	ldi	r20, 0xAA	; 170
    7e58:	50 e4       	ldi	r21, 0x40	; 64
    7e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7e5e:	dc 01       	movw	r26, r24
    7e60:	cb 01       	movw	r24, r22
    7e62:	89 a7       	std	Y+41, r24	; 0x29
    7e64:	9a a7       	std	Y+42, r25	; 0x2a
    7e66:	ab a7       	std	Y+43, r26	; 0x2b
    7e68:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    7e6a:	69 a5       	ldd	r22, Y+41	; 0x29
    7e6c:	7a a5       	ldd	r23, Y+42	; 0x2a
    7e6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    7e70:	9c a5       	ldd	r25, Y+44	; 0x2c
    7e72:	20 e0       	ldi	r18, 0x00	; 0
    7e74:	30 e0       	ldi	r19, 0x00	; 0
    7e76:	40 e8       	ldi	r20, 0x80	; 128
    7e78:	5f e3       	ldi	r21, 0x3F	; 63
    7e7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7e7e:	88 23       	and	r24, r24
    7e80:	1c f4       	brge	.+6      	; 0x7e88 <HBUZZER_enBuzzMusic+0x3a0>
		__ticks = 1;
    7e82:	81 e0       	ldi	r24, 0x01	; 1
    7e84:	88 a7       	std	Y+40, r24	; 0x28
    7e86:	91 c0       	rjmp	.+290    	; 0x7faa <HBUZZER_enBuzzMusic+0x4c2>
	else if (__tmp > 255)
    7e88:	69 a5       	ldd	r22, Y+41	; 0x29
    7e8a:	7a a5       	ldd	r23, Y+42	; 0x2a
    7e8c:	8b a5       	ldd	r24, Y+43	; 0x2b
    7e8e:	9c a5       	ldd	r25, Y+44	; 0x2c
    7e90:	20 e0       	ldi	r18, 0x00	; 0
    7e92:	30 e0       	ldi	r19, 0x00	; 0
    7e94:	4f e7       	ldi	r20, 0x7F	; 127
    7e96:	53 e4       	ldi	r21, 0x43	; 67
    7e98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7e9c:	18 16       	cp	r1, r24
    7e9e:	0c f0       	brlt	.+2      	; 0x7ea2 <HBUZZER_enBuzzMusic+0x3ba>
    7ea0:	7b c0       	rjmp	.+246    	; 0x7f98 <HBUZZER_enBuzzMusic+0x4b0>
	{
		_delay_ms(__us / 1000.0);
    7ea2:	6d a5       	ldd	r22, Y+45	; 0x2d
    7ea4:	7e a5       	ldd	r23, Y+46	; 0x2e
    7ea6:	8f a5       	ldd	r24, Y+47	; 0x2f
    7ea8:	98 a9       	ldd	r25, Y+48	; 0x30
    7eaa:	20 e0       	ldi	r18, 0x00	; 0
    7eac:	30 e0       	ldi	r19, 0x00	; 0
    7eae:	4a e7       	ldi	r20, 0x7A	; 122
    7eb0:	54 e4       	ldi	r21, 0x44	; 68
    7eb2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    7eb6:	dc 01       	movw	r26, r24
    7eb8:	cb 01       	movw	r24, r22
    7eba:	8c a3       	std	Y+36, r24	; 0x24
    7ebc:	9d a3       	std	Y+37, r25	; 0x25
    7ebe:	ae a3       	std	Y+38, r26	; 0x26
    7ec0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7ec2:	6c a1       	ldd	r22, Y+36	; 0x24
    7ec4:	7d a1       	ldd	r23, Y+37	; 0x25
    7ec6:	8e a1       	ldd	r24, Y+38	; 0x26
    7ec8:	9f a1       	ldd	r25, Y+39	; 0x27
    7eca:	20 e0       	ldi	r18, 0x00	; 0
    7ecc:	30 e0       	ldi	r19, 0x00	; 0
    7ece:	4a e7       	ldi	r20, 0x7A	; 122
    7ed0:	55 e4       	ldi	r21, 0x45	; 69
    7ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7ed6:	dc 01       	movw	r26, r24
    7ed8:	cb 01       	movw	r24, r22
    7eda:	88 a3       	std	Y+32, r24	; 0x20
    7edc:	99 a3       	std	Y+33, r25	; 0x21
    7ede:	aa a3       	std	Y+34, r26	; 0x22
    7ee0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    7ee2:	68 a1       	ldd	r22, Y+32	; 0x20
    7ee4:	79 a1       	ldd	r23, Y+33	; 0x21
    7ee6:	8a a1       	ldd	r24, Y+34	; 0x22
    7ee8:	9b a1       	ldd	r25, Y+35	; 0x23
    7eea:	20 e0       	ldi	r18, 0x00	; 0
    7eec:	30 e0       	ldi	r19, 0x00	; 0
    7eee:	40 e8       	ldi	r20, 0x80	; 128
    7ef0:	5f e3       	ldi	r21, 0x3F	; 63
    7ef2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7ef6:	88 23       	and	r24, r24
    7ef8:	2c f4       	brge	.+10     	; 0x7f04 <HBUZZER_enBuzzMusic+0x41c>
		__ticks = 1;
    7efa:	81 e0       	ldi	r24, 0x01	; 1
    7efc:	90 e0       	ldi	r25, 0x00	; 0
    7efe:	9f 8f       	std	Y+31, r25	; 0x1f
    7f00:	8e 8f       	std	Y+30, r24	; 0x1e
    7f02:	3f c0       	rjmp	.+126    	; 0x7f82 <HBUZZER_enBuzzMusic+0x49a>
	else if (__tmp > 65535)
    7f04:	68 a1       	ldd	r22, Y+32	; 0x20
    7f06:	79 a1       	ldd	r23, Y+33	; 0x21
    7f08:	8a a1       	ldd	r24, Y+34	; 0x22
    7f0a:	9b a1       	ldd	r25, Y+35	; 0x23
    7f0c:	20 e0       	ldi	r18, 0x00	; 0
    7f0e:	3f ef       	ldi	r19, 0xFF	; 255
    7f10:	4f e7       	ldi	r20, 0x7F	; 127
    7f12:	57 e4       	ldi	r21, 0x47	; 71
    7f14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7f18:	18 16       	cp	r1, r24
    7f1a:	4c f5       	brge	.+82     	; 0x7f6e <HBUZZER_enBuzzMusic+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7f1c:	6c a1       	ldd	r22, Y+36	; 0x24
    7f1e:	7d a1       	ldd	r23, Y+37	; 0x25
    7f20:	8e a1       	ldd	r24, Y+38	; 0x26
    7f22:	9f a1       	ldd	r25, Y+39	; 0x27
    7f24:	20 e0       	ldi	r18, 0x00	; 0
    7f26:	30 e0       	ldi	r19, 0x00	; 0
    7f28:	40 e2       	ldi	r20, 0x20	; 32
    7f2a:	51 e4       	ldi	r21, 0x41	; 65
    7f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7f30:	dc 01       	movw	r26, r24
    7f32:	cb 01       	movw	r24, r22
    7f34:	bc 01       	movw	r22, r24
    7f36:	cd 01       	movw	r24, r26
    7f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7f3c:	dc 01       	movw	r26, r24
    7f3e:	cb 01       	movw	r24, r22
    7f40:	9f 8f       	std	Y+31, r25	; 0x1f
    7f42:	8e 8f       	std	Y+30, r24	; 0x1e
    7f44:	0f c0       	rjmp	.+30     	; 0x7f64 <HBUZZER_enBuzzMusic+0x47c>
    7f46:	80 e9       	ldi	r24, 0x90	; 144
    7f48:	91 e0       	ldi	r25, 0x01	; 1
    7f4a:	9d 8f       	std	Y+29, r25	; 0x1d
    7f4c:	8c 8f       	std	Y+28, r24	; 0x1c
    7f4e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7f50:	9d 8d       	ldd	r25, Y+29	; 0x1d
    7f52:	01 97       	sbiw	r24, 0x01	; 1
    7f54:	f1 f7       	brne	.-4      	; 0x7f52 <HBUZZER_enBuzzMusic+0x46a>
    7f56:	9d 8f       	std	Y+29, r25	; 0x1d
    7f58:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7f5a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7f5c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7f5e:	01 97       	sbiw	r24, 0x01	; 1
    7f60:	9f 8f       	std	Y+31, r25	; 0x1f
    7f62:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7f64:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7f66:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7f68:	00 97       	sbiw	r24, 0x00	; 0
    7f6a:	69 f7       	brne	.-38     	; 0x7f46 <HBUZZER_enBuzzMusic+0x45e>
    7f6c:	24 c0       	rjmp	.+72     	; 0x7fb6 <HBUZZER_enBuzzMusic+0x4ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7f6e:	68 a1       	ldd	r22, Y+32	; 0x20
    7f70:	79 a1       	ldd	r23, Y+33	; 0x21
    7f72:	8a a1       	ldd	r24, Y+34	; 0x22
    7f74:	9b a1       	ldd	r25, Y+35	; 0x23
    7f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7f7a:	dc 01       	movw	r26, r24
    7f7c:	cb 01       	movw	r24, r22
    7f7e:	9f 8f       	std	Y+31, r25	; 0x1f
    7f80:	8e 8f       	std	Y+30, r24	; 0x1e
    7f82:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7f84:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7f86:	9b 8f       	std	Y+27, r25	; 0x1b
    7f88:	8a 8f       	std	Y+26, r24	; 0x1a
    7f8a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7f8c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7f8e:	01 97       	sbiw	r24, 0x01	; 1
    7f90:	f1 f7       	brne	.-4      	; 0x7f8e <HBUZZER_enBuzzMusic+0x4a6>
    7f92:	9b 8f       	std	Y+27, r25	; 0x1b
    7f94:	8a 8f       	std	Y+26, r24	; 0x1a
    7f96:	0f c0       	rjmp	.+30     	; 0x7fb6 <HBUZZER_enBuzzMusic+0x4ce>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    7f98:	69 a5       	ldd	r22, Y+41	; 0x29
    7f9a:	7a a5       	ldd	r23, Y+42	; 0x2a
    7f9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    7f9e:	9c a5       	ldd	r25, Y+44	; 0x2c
    7fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7fa4:	dc 01       	movw	r26, r24
    7fa6:	cb 01       	movw	r24, r22
    7fa8:	88 a7       	std	Y+40, r24	; 0x28
    7faa:	88 a5       	ldd	r24, Y+40	; 0x28
    7fac:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    7fae:	89 8d       	ldd	r24, Y+25	; 0x19
    7fb0:	8a 95       	dec	r24
    7fb2:	f1 f7       	brne	.-4      	; 0x7fb0 <HBUZZER_enBuzzMusic+0x4c8>
    7fb4:	89 8f       	std	Y+25, r24	; 0x19
			HBUZZER_enBuzzOFF(copy_enPin);
    7fb6:	fe 01       	movw	r30, r28
    7fb8:	e1 5b       	subi	r30, 0xB1	; 177
    7fba:	ff 4f       	sbci	r31, 0xFF	; 255
    7fbc:	80 81       	ld	r24, Z
    7fbe:	0e 94 65 3d 	call	0x7aca	; 0x7aca <HBUZZER_enBuzzOFF>
			_delay_us(copy_u32DelayVal);
    7fc2:	fe 01       	movw	r30, r28
    7fc4:	ef 5a       	subi	r30, 0xAF	; 175
    7fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    7fc8:	60 81       	ld	r22, Z
    7fca:	71 81       	ldd	r23, Z+1	; 0x01
    7fcc:	82 81       	ldd	r24, Z+2	; 0x02
    7fce:	93 81       	ldd	r25, Z+3	; 0x03
    7fd0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    7fd4:	dc 01       	movw	r26, r24
    7fd6:	cb 01       	movw	r24, r22
    7fd8:	8d 8b       	std	Y+21, r24	; 0x15
    7fda:	9e 8b       	std	Y+22, r25	; 0x16
    7fdc:	af 8b       	std	Y+23, r26	; 0x17
    7fde:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    7fe0:	6d 89       	ldd	r22, Y+21	; 0x15
    7fe2:	7e 89       	ldd	r23, Y+22	; 0x16
    7fe4:	8f 89       	ldd	r24, Y+23	; 0x17
    7fe6:	98 8d       	ldd	r25, Y+24	; 0x18
    7fe8:	2b ea       	ldi	r18, 0xAB	; 171
    7fea:	3a ea       	ldi	r19, 0xAA	; 170
    7fec:	4a ea       	ldi	r20, 0xAA	; 170
    7fee:	50 e4       	ldi	r21, 0x40	; 64
    7ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7ff4:	dc 01       	movw	r26, r24
    7ff6:	cb 01       	movw	r24, r22
    7ff8:	89 8b       	std	Y+17, r24	; 0x11
    7ffa:	9a 8b       	std	Y+18, r25	; 0x12
    7ffc:	ab 8b       	std	Y+19, r26	; 0x13
    7ffe:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    8000:	69 89       	ldd	r22, Y+17	; 0x11
    8002:	7a 89       	ldd	r23, Y+18	; 0x12
    8004:	8b 89       	ldd	r24, Y+19	; 0x13
    8006:	9c 89       	ldd	r25, Y+20	; 0x14
    8008:	20 e0       	ldi	r18, 0x00	; 0
    800a:	30 e0       	ldi	r19, 0x00	; 0
    800c:	40 e8       	ldi	r20, 0x80	; 128
    800e:	5f e3       	ldi	r21, 0x3F	; 63
    8010:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    8014:	88 23       	and	r24, r24
    8016:	1c f4       	brge	.+6      	; 0x801e <HBUZZER_enBuzzMusic+0x536>
		__ticks = 1;
    8018:	81 e0       	ldi	r24, 0x01	; 1
    801a:	88 8b       	std	Y+16, r24	; 0x10
    801c:	91 c0       	rjmp	.+290    	; 0x8140 <HBUZZER_enBuzzMusic+0x658>
	else if (__tmp > 255)
    801e:	69 89       	ldd	r22, Y+17	; 0x11
    8020:	7a 89       	ldd	r23, Y+18	; 0x12
    8022:	8b 89       	ldd	r24, Y+19	; 0x13
    8024:	9c 89       	ldd	r25, Y+20	; 0x14
    8026:	20 e0       	ldi	r18, 0x00	; 0
    8028:	30 e0       	ldi	r19, 0x00	; 0
    802a:	4f e7       	ldi	r20, 0x7F	; 127
    802c:	53 e4       	ldi	r21, 0x43	; 67
    802e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    8032:	18 16       	cp	r1, r24
    8034:	0c f0       	brlt	.+2      	; 0x8038 <HBUZZER_enBuzzMusic+0x550>
    8036:	7b c0       	rjmp	.+246    	; 0x812e <HBUZZER_enBuzzMusic+0x646>
	{
		_delay_ms(__us / 1000.0);
    8038:	6d 89       	ldd	r22, Y+21	; 0x15
    803a:	7e 89       	ldd	r23, Y+22	; 0x16
    803c:	8f 89       	ldd	r24, Y+23	; 0x17
    803e:	98 8d       	ldd	r25, Y+24	; 0x18
    8040:	20 e0       	ldi	r18, 0x00	; 0
    8042:	30 e0       	ldi	r19, 0x00	; 0
    8044:	4a e7       	ldi	r20, 0x7A	; 122
    8046:	54 e4       	ldi	r21, 0x44	; 68
    8048:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    804c:	dc 01       	movw	r26, r24
    804e:	cb 01       	movw	r24, r22
    8050:	8c 87       	std	Y+12, r24	; 0x0c
    8052:	9d 87       	std	Y+13, r25	; 0x0d
    8054:	ae 87       	std	Y+14, r26	; 0x0e
    8056:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8058:	6c 85       	ldd	r22, Y+12	; 0x0c
    805a:	7d 85       	ldd	r23, Y+13	; 0x0d
    805c:	8e 85       	ldd	r24, Y+14	; 0x0e
    805e:	9f 85       	ldd	r25, Y+15	; 0x0f
    8060:	20 e0       	ldi	r18, 0x00	; 0
    8062:	30 e0       	ldi	r19, 0x00	; 0
    8064:	4a e7       	ldi	r20, 0x7A	; 122
    8066:	55 e4       	ldi	r21, 0x45	; 69
    8068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    806c:	dc 01       	movw	r26, r24
    806e:	cb 01       	movw	r24, r22
    8070:	88 87       	std	Y+8, r24	; 0x08
    8072:	99 87       	std	Y+9, r25	; 0x09
    8074:	aa 87       	std	Y+10, r26	; 0x0a
    8076:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    8078:	68 85       	ldd	r22, Y+8	; 0x08
    807a:	79 85       	ldd	r23, Y+9	; 0x09
    807c:	8a 85       	ldd	r24, Y+10	; 0x0a
    807e:	9b 85       	ldd	r25, Y+11	; 0x0b
    8080:	20 e0       	ldi	r18, 0x00	; 0
    8082:	30 e0       	ldi	r19, 0x00	; 0
    8084:	40 e8       	ldi	r20, 0x80	; 128
    8086:	5f e3       	ldi	r21, 0x3F	; 63
    8088:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    808c:	88 23       	and	r24, r24
    808e:	2c f4       	brge	.+10     	; 0x809a <HBUZZER_enBuzzMusic+0x5b2>
		__ticks = 1;
    8090:	81 e0       	ldi	r24, 0x01	; 1
    8092:	90 e0       	ldi	r25, 0x00	; 0
    8094:	9f 83       	std	Y+7, r25	; 0x07
    8096:	8e 83       	std	Y+6, r24	; 0x06
    8098:	3f c0       	rjmp	.+126    	; 0x8118 <HBUZZER_enBuzzMusic+0x630>
	else if (__tmp > 65535)
    809a:	68 85       	ldd	r22, Y+8	; 0x08
    809c:	79 85       	ldd	r23, Y+9	; 0x09
    809e:	8a 85       	ldd	r24, Y+10	; 0x0a
    80a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    80a2:	20 e0       	ldi	r18, 0x00	; 0
    80a4:	3f ef       	ldi	r19, 0xFF	; 255
    80a6:	4f e7       	ldi	r20, 0x7F	; 127
    80a8:	57 e4       	ldi	r21, 0x47	; 71
    80aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    80ae:	18 16       	cp	r1, r24
    80b0:	4c f5       	brge	.+82     	; 0x8104 <HBUZZER_enBuzzMusic+0x61c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    80b2:	6c 85       	ldd	r22, Y+12	; 0x0c
    80b4:	7d 85       	ldd	r23, Y+13	; 0x0d
    80b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    80b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    80ba:	20 e0       	ldi	r18, 0x00	; 0
    80bc:	30 e0       	ldi	r19, 0x00	; 0
    80be:	40 e2       	ldi	r20, 0x20	; 32
    80c0:	51 e4       	ldi	r21, 0x41	; 65
    80c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    80c6:	dc 01       	movw	r26, r24
    80c8:	cb 01       	movw	r24, r22
    80ca:	bc 01       	movw	r22, r24
    80cc:	cd 01       	movw	r24, r26
    80ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    80d2:	dc 01       	movw	r26, r24
    80d4:	cb 01       	movw	r24, r22
    80d6:	9f 83       	std	Y+7, r25	; 0x07
    80d8:	8e 83       	std	Y+6, r24	; 0x06
    80da:	0f c0       	rjmp	.+30     	; 0x80fa <HBUZZER_enBuzzMusic+0x612>
    80dc:	80 e9       	ldi	r24, 0x90	; 144
    80de:	91 e0       	ldi	r25, 0x01	; 1
    80e0:	9d 83       	std	Y+5, r25	; 0x05
    80e2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    80e4:	8c 81       	ldd	r24, Y+4	; 0x04
    80e6:	9d 81       	ldd	r25, Y+5	; 0x05
    80e8:	01 97       	sbiw	r24, 0x01	; 1
    80ea:	f1 f7       	brne	.-4      	; 0x80e8 <HBUZZER_enBuzzMusic+0x600>
    80ec:	9d 83       	std	Y+5, r25	; 0x05
    80ee:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    80f0:	8e 81       	ldd	r24, Y+6	; 0x06
    80f2:	9f 81       	ldd	r25, Y+7	; 0x07
    80f4:	01 97       	sbiw	r24, 0x01	; 1
    80f6:	9f 83       	std	Y+7, r25	; 0x07
    80f8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    80fa:	8e 81       	ldd	r24, Y+6	; 0x06
    80fc:	9f 81       	ldd	r25, Y+7	; 0x07
    80fe:	00 97       	sbiw	r24, 0x00	; 0
    8100:	69 f7       	brne	.-38     	; 0x80dc <HBUZZER_enBuzzMusic+0x5f4>
    8102:	24 c0       	rjmp	.+72     	; 0x814c <HBUZZER_enBuzzMusic+0x664>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8104:	68 85       	ldd	r22, Y+8	; 0x08
    8106:	79 85       	ldd	r23, Y+9	; 0x09
    8108:	8a 85       	ldd	r24, Y+10	; 0x0a
    810a:	9b 85       	ldd	r25, Y+11	; 0x0b
    810c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8110:	dc 01       	movw	r26, r24
    8112:	cb 01       	movw	r24, r22
    8114:	9f 83       	std	Y+7, r25	; 0x07
    8116:	8e 83       	std	Y+6, r24	; 0x06
    8118:	8e 81       	ldd	r24, Y+6	; 0x06
    811a:	9f 81       	ldd	r25, Y+7	; 0x07
    811c:	9b 83       	std	Y+3, r25	; 0x03
    811e:	8a 83       	std	Y+2, r24	; 0x02
    8120:	8a 81       	ldd	r24, Y+2	; 0x02
    8122:	9b 81       	ldd	r25, Y+3	; 0x03
    8124:	01 97       	sbiw	r24, 0x01	; 1
    8126:	f1 f7       	brne	.-4      	; 0x8124 <HBUZZER_enBuzzMusic+0x63c>
    8128:	9b 83       	std	Y+3, r25	; 0x03
    812a:	8a 83       	std	Y+2, r24	; 0x02
    812c:	0f c0       	rjmp	.+30     	; 0x814c <HBUZZER_enBuzzMusic+0x664>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    812e:	69 89       	ldd	r22, Y+17	; 0x11
    8130:	7a 89       	ldd	r23, Y+18	; 0x12
    8132:	8b 89       	ldd	r24, Y+19	; 0x13
    8134:	9c 89       	ldd	r25, Y+20	; 0x14
    8136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    813a:	dc 01       	movw	r26, r24
    813c:	cb 01       	movw	r24, r22
    813e:	88 8b       	std	Y+16, r24	; 0x10
    8140:	88 89       	ldd	r24, Y+16	; 0x10
    8142:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    8144:	89 81       	ldd	r24, Y+1	; 0x01
    8146:	8a 95       	dec	r24
    8148:	f1 f7       	brne	.-4      	; 0x8146 <HBUZZER_enBuzzMusic+0x65e>
    814a:	89 83       	std	Y+1, r24	; 0x01
			HBUZZER_enBuzzOFF(copy_enPin);
			_delay_ms(copy_u32DelayVal);
		}
	} else if (copy_enDelayUnit == US) {
		for (Local_u8Counter = 0; Local_u8Counter < copy_u32Duration;
				Local_u8Counter++) {
    814c:	de 01       	movw	r26, r28
    814e:	a3 5b       	subi	r26, 0xB3	; 179
    8150:	bf 4f       	sbci	r27, 0xFF	; 255
    8152:	fe 01       	movw	r30, r28
    8154:	e3 5b       	subi	r30, 0xB3	; 179
    8156:	ff 4f       	sbci	r31, 0xFF	; 255
    8158:	80 81       	ld	r24, Z
    815a:	8f 5f       	subi	r24, 0xFF	; 255
    815c:	8c 93       	st	X, r24
			_delay_ms(copy_u32DelayVal);
			HBUZZER_enBuzzOFF(copy_enPin);
			_delay_ms(copy_u32DelayVal);
		}
	} else if (copy_enDelayUnit == US) {
		for (Local_u8Counter = 0; Local_u8Counter < copy_u32Duration;
    815e:	fe 01       	movw	r30, r28
    8160:	e3 5b       	subi	r30, 0xB3	; 179
    8162:	ff 4f       	sbci	r31, 0xFF	; 255
    8164:	80 81       	ld	r24, Z
    8166:	28 2f       	mov	r18, r24
    8168:	30 e0       	ldi	r19, 0x00	; 0
    816a:	40 e0       	ldi	r20, 0x00	; 0
    816c:	50 e0       	ldi	r21, 0x00	; 0
    816e:	fe 01       	movw	r30, r28
    8170:	eb 5a       	subi	r30, 0xAB	; 171
    8172:	ff 4f       	sbci	r31, 0xFF	; 255
    8174:	80 81       	ld	r24, Z
    8176:	91 81       	ldd	r25, Z+1	; 0x01
    8178:	a2 81       	ldd	r26, Z+2	; 0x02
    817a:	b3 81       	ldd	r27, Z+3	; 0x03
    817c:	28 17       	cp	r18, r24
    817e:	39 07       	cpc	r19, r25
    8180:	4a 07       	cpc	r20, r26
    8182:	5b 07       	cpc	r21, r27
    8184:	08 f4       	brcc	.+2      	; 0x8188 <HBUZZER_enBuzzMusic+0x6a0>
    8186:	4c ce       	rjmp	.-872    	; 0x7e20 <HBUZZER_enBuzzMusic+0x338>
    8188:	05 c0       	rjmp	.+10     	; 0x8194 <HBUZZER_enBuzzMusic+0x6ac>
			_delay_us(copy_u32DelayVal);
			HBUZZER_enBuzzOFF(copy_enPin);
			_delay_us(copy_u32DelayVal);
		}
	} else {
		Local_enState = OUT_OF_RANGE;
    818a:	fe 01       	movw	r30, r28
    818c:	e2 5b       	subi	r30, 0xB2	; 178
    818e:	ff 4f       	sbci	r31, 0xFF	; 255
    8190:	81 e0       	ldi	r24, 0x01	; 1
    8192:	80 83       	st	Z, r24
	}
	return Local_enState;
    8194:	fe 01       	movw	r30, r28
    8196:	e2 5b       	subi	r30, 0xB2	; 178
    8198:	ff 4f       	sbci	r31, 0xFF	; 255
    819a:	80 81       	ld	r24, Z
}
    819c:	c8 5a       	subi	r28, 0xA8	; 168
    819e:	df 4f       	sbci	r29, 0xFF	; 255
    81a0:	0f b6       	in	r0, 0x3f	; 63
    81a2:	f8 94       	cli
    81a4:	de bf       	out	0x3e, r29	; 62
    81a6:	0f be       	out	0x3f, r0	; 63
    81a8:	cd bf       	out	0x3d, r28	; 61
    81aa:	cf 91       	pop	r28
    81ac:	df 91       	pop	r29
    81ae:	1f 91       	pop	r17
    81b0:	0f 91       	pop	r16
    81b2:	ff 90       	pop	r15
    81b4:	ef 90       	pop	r14
    81b6:	08 95       	ret

000081b8 <main>:
/*****************		Layer:	 APP			***********************/
/*****************		File:	 Main           ***********************/
/**********************************************************************/
/**********************************************************************/

void main(void) {
    81b8:	df 93       	push	r29
    81ba:	cf 93       	push	r28
    81bc:	cd b7       	in	r28, 0x3d	; 61
    81be:	de b7       	in	r29, 0x3e	; 62
    81c0:	ff cf       	rjmp	.-2      	; 0x81c0 <main+0x8>

000081c2 <__mulsi3>:
    81c2:	62 9f       	mul	r22, r18
    81c4:	d0 01       	movw	r26, r0
    81c6:	73 9f       	mul	r23, r19
    81c8:	f0 01       	movw	r30, r0
    81ca:	82 9f       	mul	r24, r18
    81cc:	e0 0d       	add	r30, r0
    81ce:	f1 1d       	adc	r31, r1
    81d0:	64 9f       	mul	r22, r20
    81d2:	e0 0d       	add	r30, r0
    81d4:	f1 1d       	adc	r31, r1
    81d6:	92 9f       	mul	r25, r18
    81d8:	f0 0d       	add	r31, r0
    81da:	83 9f       	mul	r24, r19
    81dc:	f0 0d       	add	r31, r0
    81de:	74 9f       	mul	r23, r20
    81e0:	f0 0d       	add	r31, r0
    81e2:	65 9f       	mul	r22, r21
    81e4:	f0 0d       	add	r31, r0
    81e6:	99 27       	eor	r25, r25
    81e8:	72 9f       	mul	r23, r18
    81ea:	b0 0d       	add	r27, r0
    81ec:	e1 1d       	adc	r30, r1
    81ee:	f9 1f       	adc	r31, r25
    81f0:	63 9f       	mul	r22, r19
    81f2:	b0 0d       	add	r27, r0
    81f4:	e1 1d       	adc	r30, r1
    81f6:	f9 1f       	adc	r31, r25
    81f8:	bd 01       	movw	r22, r26
    81fa:	cf 01       	movw	r24, r30
    81fc:	11 24       	eor	r1, r1
    81fe:	08 95       	ret

00008200 <__udivmodqi4>:
    8200:	99 1b       	sub	r25, r25
    8202:	79 e0       	ldi	r23, 0x09	; 9
    8204:	04 c0       	rjmp	.+8      	; 0x820e <__udivmodqi4_ep>

00008206 <__udivmodqi4_loop>:
    8206:	99 1f       	adc	r25, r25
    8208:	96 17       	cp	r25, r22
    820a:	08 f0       	brcs	.+2      	; 0x820e <__udivmodqi4_ep>
    820c:	96 1b       	sub	r25, r22

0000820e <__udivmodqi4_ep>:
    820e:	88 1f       	adc	r24, r24
    8210:	7a 95       	dec	r23
    8212:	c9 f7       	brne	.-14     	; 0x8206 <__udivmodqi4_loop>
    8214:	80 95       	com	r24
    8216:	08 95       	ret

00008218 <__udivmodhi4>:
    8218:	aa 1b       	sub	r26, r26
    821a:	bb 1b       	sub	r27, r27
    821c:	51 e1       	ldi	r21, 0x11	; 17
    821e:	07 c0       	rjmp	.+14     	; 0x822e <__udivmodhi4_ep>

00008220 <__udivmodhi4_loop>:
    8220:	aa 1f       	adc	r26, r26
    8222:	bb 1f       	adc	r27, r27
    8224:	a6 17       	cp	r26, r22
    8226:	b7 07       	cpc	r27, r23
    8228:	10 f0       	brcs	.+4      	; 0x822e <__udivmodhi4_ep>
    822a:	a6 1b       	sub	r26, r22
    822c:	b7 0b       	sbc	r27, r23

0000822e <__udivmodhi4_ep>:
    822e:	88 1f       	adc	r24, r24
    8230:	99 1f       	adc	r25, r25
    8232:	5a 95       	dec	r21
    8234:	a9 f7       	brne	.-22     	; 0x8220 <__udivmodhi4_loop>
    8236:	80 95       	com	r24
    8238:	90 95       	com	r25
    823a:	bc 01       	movw	r22, r24
    823c:	cd 01       	movw	r24, r26
    823e:	08 95       	ret

00008240 <__udivmodsi4>:
    8240:	a1 e2       	ldi	r26, 0x21	; 33
    8242:	1a 2e       	mov	r1, r26
    8244:	aa 1b       	sub	r26, r26
    8246:	bb 1b       	sub	r27, r27
    8248:	fd 01       	movw	r30, r26
    824a:	0d c0       	rjmp	.+26     	; 0x8266 <__udivmodsi4_ep>

0000824c <__udivmodsi4_loop>:
    824c:	aa 1f       	adc	r26, r26
    824e:	bb 1f       	adc	r27, r27
    8250:	ee 1f       	adc	r30, r30
    8252:	ff 1f       	adc	r31, r31
    8254:	a2 17       	cp	r26, r18
    8256:	b3 07       	cpc	r27, r19
    8258:	e4 07       	cpc	r30, r20
    825a:	f5 07       	cpc	r31, r21
    825c:	20 f0       	brcs	.+8      	; 0x8266 <__udivmodsi4_ep>
    825e:	a2 1b       	sub	r26, r18
    8260:	b3 0b       	sbc	r27, r19
    8262:	e4 0b       	sbc	r30, r20
    8264:	f5 0b       	sbc	r31, r21

00008266 <__udivmodsi4_ep>:
    8266:	66 1f       	adc	r22, r22
    8268:	77 1f       	adc	r23, r23
    826a:	88 1f       	adc	r24, r24
    826c:	99 1f       	adc	r25, r25
    826e:	1a 94       	dec	r1
    8270:	69 f7       	brne	.-38     	; 0x824c <__udivmodsi4_loop>
    8272:	60 95       	com	r22
    8274:	70 95       	com	r23
    8276:	80 95       	com	r24
    8278:	90 95       	com	r25
    827a:	9b 01       	movw	r18, r22
    827c:	ac 01       	movw	r20, r24
    827e:	bd 01       	movw	r22, r26
    8280:	cf 01       	movw	r24, r30
    8282:	08 95       	ret

00008284 <__divmodsi4>:
    8284:	97 fb       	bst	r25, 7
    8286:	09 2e       	mov	r0, r25
    8288:	05 26       	eor	r0, r21
    828a:	0e d0       	rcall	.+28     	; 0x82a8 <__divmodsi4_neg1>
    828c:	57 fd       	sbrc	r21, 7
    828e:	04 d0       	rcall	.+8      	; 0x8298 <__divmodsi4_neg2>
    8290:	d7 df       	rcall	.-82     	; 0x8240 <__udivmodsi4>
    8292:	0a d0       	rcall	.+20     	; 0x82a8 <__divmodsi4_neg1>
    8294:	00 1c       	adc	r0, r0
    8296:	38 f4       	brcc	.+14     	; 0x82a6 <__divmodsi4_exit>

00008298 <__divmodsi4_neg2>:
    8298:	50 95       	com	r21
    829a:	40 95       	com	r20
    829c:	30 95       	com	r19
    829e:	21 95       	neg	r18
    82a0:	3f 4f       	sbci	r19, 0xFF	; 255
    82a2:	4f 4f       	sbci	r20, 0xFF	; 255
    82a4:	5f 4f       	sbci	r21, 0xFF	; 255

000082a6 <__divmodsi4_exit>:
    82a6:	08 95       	ret

000082a8 <__divmodsi4_neg1>:
    82a8:	f6 f7       	brtc	.-4      	; 0x82a6 <__divmodsi4_exit>
    82aa:	90 95       	com	r25
    82ac:	80 95       	com	r24
    82ae:	70 95       	com	r23
    82b0:	61 95       	neg	r22
    82b2:	7f 4f       	sbci	r23, 0xFF	; 255
    82b4:	8f 4f       	sbci	r24, 0xFF	; 255
    82b6:	9f 4f       	sbci	r25, 0xFF	; 255
    82b8:	08 95       	ret

000082ba <__prologue_saves__>:
    82ba:	2f 92       	push	r2
    82bc:	3f 92       	push	r3
    82be:	4f 92       	push	r4
    82c0:	5f 92       	push	r5
    82c2:	6f 92       	push	r6
    82c4:	7f 92       	push	r7
    82c6:	8f 92       	push	r8
    82c8:	9f 92       	push	r9
    82ca:	af 92       	push	r10
    82cc:	bf 92       	push	r11
    82ce:	cf 92       	push	r12
    82d0:	df 92       	push	r13
    82d2:	ef 92       	push	r14
    82d4:	ff 92       	push	r15
    82d6:	0f 93       	push	r16
    82d8:	1f 93       	push	r17
    82da:	cf 93       	push	r28
    82dc:	df 93       	push	r29
    82de:	cd b7       	in	r28, 0x3d	; 61
    82e0:	de b7       	in	r29, 0x3e	; 62
    82e2:	ca 1b       	sub	r28, r26
    82e4:	db 0b       	sbc	r29, r27
    82e6:	0f b6       	in	r0, 0x3f	; 63
    82e8:	f8 94       	cli
    82ea:	de bf       	out	0x3e, r29	; 62
    82ec:	0f be       	out	0x3f, r0	; 63
    82ee:	cd bf       	out	0x3d, r28	; 61
    82f0:	09 94       	ijmp

000082f2 <__epilogue_restores__>:
    82f2:	2a 88       	ldd	r2, Y+18	; 0x12
    82f4:	39 88       	ldd	r3, Y+17	; 0x11
    82f6:	48 88       	ldd	r4, Y+16	; 0x10
    82f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    82fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    82fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    82fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    8300:	9b 84       	ldd	r9, Y+11	; 0x0b
    8302:	aa 84       	ldd	r10, Y+10	; 0x0a
    8304:	b9 84       	ldd	r11, Y+9	; 0x09
    8306:	c8 84       	ldd	r12, Y+8	; 0x08
    8308:	df 80       	ldd	r13, Y+7	; 0x07
    830a:	ee 80       	ldd	r14, Y+6	; 0x06
    830c:	fd 80       	ldd	r15, Y+5	; 0x05
    830e:	0c 81       	ldd	r16, Y+4	; 0x04
    8310:	1b 81       	ldd	r17, Y+3	; 0x03
    8312:	aa 81       	ldd	r26, Y+2	; 0x02
    8314:	b9 81       	ldd	r27, Y+1	; 0x01
    8316:	ce 0f       	add	r28, r30
    8318:	d1 1d       	adc	r29, r1
    831a:	0f b6       	in	r0, 0x3f	; 63
    831c:	f8 94       	cli
    831e:	de bf       	out	0x3e, r29	; 62
    8320:	0f be       	out	0x3f, r0	; 63
    8322:	cd bf       	out	0x3d, r28	; 61
    8324:	ed 01       	movw	r28, r26
    8326:	08 95       	ret

00008328 <_exit>:
    8328:	f8 94       	cli

0000832a <__stop_program>:
    832a:	ff cf       	rjmp	.-2      	; 0x832a <__stop_program>
